{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ethers_1 = require(\"ethers\");\n\nvar utils_1 = require(\"ethers/lib/utils\");\n\nvar enums_1 = require(\"./enums\");\n\nvar utils_2 = require(\"./utils\");\n\nvar Multicall =\n/** @class */\nfunction () {\n  function Multicall(_options) {\n    this._options = _options;\n    this.ABI = [{\n      constant: false,\n      inputs: [{\n        components: [{\n          name: 'target',\n          type: 'address'\n        }, {\n          name: 'callData',\n          type: 'bytes'\n        }],\n        name: 'calls',\n        type: 'tuple[]'\n      }],\n      name: 'aggregate',\n      outputs: [{\n        name: 'blockNumber',\n        type: 'uint256'\n      }, {\n        name: 'returnData',\n        type: 'bytes[]'\n      }],\n      payable: false,\n      stateMutability: 'nonpayable',\n      type: 'function'\n    }];\n\n    if (this._options.web3Instance) {\n      this._executionType = enums_1.ExecutionType.web3;\n      return;\n    }\n\n    if (this._options.ethersProvider) {\n      this._executionType = enums_1.ExecutionType.ethers;\n      return;\n    }\n\n    if (this._options.nodeUrl) {\n      this._executionType = enums_1.ExecutionType.customHttp;\n      return;\n    }\n\n    throw new Error( // tslint:disable-next-line: max-line-length\n    'Your options passed in our incorrect they need to match either `MulticallOptionsEthers`, `MulticallOptionsWeb3` or `MulticallOptionsCustomJsonRpcProvider` interfaces');\n  }\n  /**\r\n   * Call all the contract calls in 1\r\n   * @param calls The calls\r\n   */\n\n\n  Multicall.prototype.call = function (contractCallContexts) {\n    return __awaiter(this, void 0, void 0, function () {\n      var aggregateResponse, returnObject, response, contractCallsResults, originalContractCallContext, returnObjectResult, method, methodContext, originalContractCallMethodContext, outputTypes, decodedReturnValue;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!Array.isArray(contractCallContexts)) {\n              contractCallContexts = [contractCallContexts];\n            }\n\n            return [4\n            /*yield*/\n            , this.execute(this.buildAggregateCallContext(contractCallContexts))];\n\n          case 1:\n            aggregateResponse = _a.sent();\n            returnObject = {\n              results: {},\n              blockNumber: aggregateResponse.blockNumber\n            };\n\n            for (response = 0; response < aggregateResponse.results.length; response++) {\n              contractCallsResults = aggregateResponse.results[response];\n              originalContractCallContext = contractCallContexts[contractCallsResults.contractContextIndex];\n              returnObjectResult = {\n                originalContractCallContext: utils_2.Utils.deepClone(originalContractCallContext),\n                callsReturnContext: []\n              };\n\n              for (method = 0; method < contractCallsResults.methodResults.length; method++) {\n                methodContext = contractCallsResults.methodResults[method];\n                originalContractCallMethodContext = originalContractCallContext.calls[methodContext.contractMethodIndex];\n                outputTypes = this.findOutputTypesFromAbi(originalContractCallContext.abi, originalContractCallMethodContext.methodName);\n\n                if (outputTypes && outputTypes.length > 0) {\n                  decodedReturnValue = utils_1.defaultAbiCoder.decode( // tslint:disable-next-line: no-any\n                  outputTypes, methodContext.returnData);\n                  returnObjectResult.callsReturnContext.push(utils_2.Utils.deepClone({\n                    // ethers put the result of the decode in an array\n                    returnValues: decodedReturnValue[0],\n                    decoded: true,\n                    reference: originalContractCallMethodContext.reference,\n                    methodName: originalContractCallMethodContext.methodName,\n                    methodParameters: originalContractCallMethodContext.methodParameters\n                  }));\n                } else {\n                  returnObjectResult.callsReturnContext.push(utils_2.Utils.deepClone({\n                    returnValues: methodContext.returnData,\n                    decoded: false,\n                    reference: originalContractCallMethodContext.reference,\n                    methodName: originalContractCallMethodContext.methodName,\n                    methodParameters: originalContractCallMethodContext.methodParameters\n                  }));\n                }\n              }\n\n              returnObject.results[returnObjectResult.originalContractCallContext.reference] = returnObjectResult;\n            }\n\n            return [2\n            /*return*/\n            , returnObject];\n        }\n      });\n    });\n  };\n  /**\r\n   * Build aggregate call context\r\n   * @param contractCallContexts The contract call contexts\r\n   */\n\n\n  Multicall.prototype.buildAggregateCallContext = function (contractCallContexts) {\n    var aggregateCallContext = [];\n\n    for (var contract = 0; contract < contractCallContexts.length; contract++) {\n      var contractContext = contractCallContexts[contract];\n      var executingInterface = new ethers_1.ethers.utils.Interface(JSON.stringify(contractContext.abi));\n\n      for (var method = 0; method < contractContext.calls.length; method++) {\n        // https://github.com/ethers-io/ethers.js/issues/211\n        var methodContext = contractContext.calls[method]; // tslint:disable-next-line: no-unused-expression\n\n        var encodedData = executingInterface.encodeFunctionData(methodContext.methodName, methodContext.methodParameters);\n        aggregateCallContext.push({\n          contractContextIndex: utils_2.Utils.deepClone(contract),\n          contractMethodIndex: utils_2.Utils.deepClone(method),\n          target: contractContext.contractAddress,\n          encodedData: encodedData\n        });\n      }\n    }\n\n    return aggregateCallContext;\n  };\n  /**\r\n   * Find output types from abi\r\n   * @param abi The abi\r\n   * @param methodName The method name\r\n   */\n\n\n  Multicall.prototype.findOutputTypesFromAbi = function (abi, methodName) {\n    for (var i = 0; i < abi.length; i++) {\n      if (abi[i].name === methodName) {\n        return abi[i].outputs;\n      }\n    }\n\n    return undefined;\n  };\n  /**\r\n   * Execute the multicall contract call\r\n   * @param calls The calls\r\n   */\n\n\n  Multicall.prototype.execute = function (calls) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = this._executionType;\n\n            switch (_a) {\n              case enums_1.ExecutionType.web3:\n                return [3\n                /*break*/\n                , 1];\n\n              case enums_1.ExecutionType.ethers:\n                return [3\n                /*break*/\n                , 3];\n\n              case enums_1.ExecutionType.customHttp:\n                return [3\n                /*break*/\n                , 3];\n            }\n\n            return [3\n            /*break*/\n            , 5];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.executeWithWeb3(calls)];\n\n          case 2:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 3:\n            return [4\n            /*yield*/\n            , this.executeWithEthersOrCustom(calls)];\n\n          case 4:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 5:\n            throw new Error(this._executionType + \" is not defined\");\n        }\n      });\n    });\n  };\n  /**\r\n   * Execute aggregate with web3 instance\r\n   * @param calls The calls context\r\n   */\n\n\n  Multicall.prototype.executeWithWeb3 = function (calls) {\n    return __awaiter(this, void 0, void 0, function () {\n      var web3, networkId, contract, contractResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            web3 = this.getTypedOptions().web3Instance;\n            return [4\n            /*yield*/\n            , web3.eth.net.getId()];\n\n          case 1:\n            networkId = _a.sent();\n            contract = web3.eth.Contract(this.ABI, this.getContractBasedOnNetwork(networkId));\n            return [4\n            /*yield*/\n            , contract.methods.aggregate(this.mapCallContextToMatchContractFormat(calls)).call()];\n\n          case 2:\n            contractResponse = _a.sent();\n            return [2\n            /*return*/\n            , this.buildUpAggregateResponse(contractResponse, calls)];\n        }\n      });\n    });\n  };\n  /**\r\n   * Execute with ethers using passed in provider context or custom one\r\n   * @param calls The calls\r\n   */\n\n\n  Multicall.prototype.executeWithEthersOrCustom = function (calls) {\n    return __awaiter(this, void 0, void 0, function () {\n      var ethersProvider, customProvider, network, contract, contractResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            ethersProvider = this.getTypedOptions().ethersProvider;\n\n            if (!ethersProvider) {\n              customProvider = this.getTypedOptions();\n\n              if (customProvider.nodeUrl) {\n                ethersProvider = new ethers_1.ethers.providers.JsonRpcProvider(customProvider.nodeUrl);\n              } else {\n                ethersProvider = ethers_1.ethers.getDefaultProvider();\n              }\n            }\n\n            return [4\n            /*yield*/\n            , ethersProvider.getNetwork()];\n\n          case 1:\n            network = _a.sent();\n            contract = new ethers_1.ethers.Contract(this.getContractBasedOnNetwork(network.chainId), this.ABI, ethersProvider);\n            return [4\n            /*yield*/\n            , contract.callStatic.aggregate(this.mapCallContextToMatchContractFormat(calls))];\n\n          case 2:\n            contractResponse = _a.sent();\n            return [2\n            /*return*/\n            , this.buildUpAggregateResponse(contractResponse, calls)];\n        }\n      });\n    });\n  };\n  /**\r\n   * Build up the aggregated response from the contract response mapping\r\n   * metadata from the calls\r\n   * @param contractResponse The contract response\r\n   * @param calls The calls\r\n   */\n\n\n  Multicall.prototype.buildUpAggregateResponse = function (contractResponse, calls) {\n    var aggregateResponse = {\n      blockNumber: contractResponse.blockNumber.toNumber(),\n      results: []\n    };\n\n    var _loop_1 = function _loop_1(i) {\n      var existingResponse = aggregateResponse.results.find(function (c) {\n        return c.contractContextIndex === calls[i].contractContextIndex;\n      });\n\n      if (existingResponse) {\n        existingResponse.methodResults.push({\n          returnData: contractResponse.returnData[i],\n          contractMethodIndex: calls[i].contractMethodIndex\n        });\n      } else {\n        aggregateResponse.results.push({\n          methodResults: [{\n            returnData: contractResponse.returnData[i],\n            contractMethodIndex: calls[i].contractMethodIndex\n          }],\n          contractContextIndex: calls[i].contractContextIndex\n        });\n      }\n    };\n\n    for (var i = 0; i < contractResponse.returnData.length; i++) {\n      _loop_1(i);\n    }\n\n    return aggregateResponse;\n  };\n  /**\r\n   * Map call contract to match contract format\r\n   * @param calls The calls context\r\n   */\n\n\n  Multicall.prototype.mapCallContextToMatchContractFormat = function (calls) {\n    return calls.map(function (call) {\n      return {\n        target: call.target,\n        callData: call.encodedData\n      };\n    });\n  };\n  /**\r\n   * Get typed options\r\n   */\n\n\n  Multicall.prototype.getTypedOptions = function () {\n    return this._options;\n  };\n  /**\r\n   * Get the contract based on the network\r\n   * @param network The network\r\n   */\n\n\n  Multicall.prototype.getContractBasedOnNetwork = function (network) {\n    // if they have overriden the multicall custom contract address then use that\n    if (this._options.multicallCustomContractAddress) {\n      return this._options.multicallCustomContractAddress;\n    }\n\n    switch (network) {\n      case enums_1.Networks.mainnet:\n        return '0xeefba1e63905ef1d7acba5a8513c70307c1ce441';\n\n      case enums_1.Networks.kovan:\n        return '0x2cc8688c5f75e365aaeeb4ea8d6a480405a48d2a';\n\n      case enums_1.Networks.rinkeby:\n        return '0x42ad527de7d4e9d9d011ac45b31d8551f8fe9821';\n\n      case enums_1.Networks.ropsten:\n        return '0x53c43764255c17bd724f74c4ef150724ac50a3ed';\n\n      default:\n        throw new Error(\"Network - \" + network + \" is not got a contract defined it only supports mainnet, kovan, rinkeby and ropsten\");\n    }\n  };\n\n  return Multicall;\n}();\n\nexports.Multicall = Multicall;","map":null,"metadata":{},"sourceType":"script"}