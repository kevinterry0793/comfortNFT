{"ast":null,"code":"import _slicedToArray from\"/Users/hienle/Documents/GitHub/comfortNFT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useCallback,useState}from'react';export default function useLocalStorage(key,initialValue){// State to store our value\n// Pass initial state function to useState so logic is only executed once\nvar _useState=useState(function(){try{// Get from local storage by key\nvar item=window.localStorage.getItem(key);// Parse stored json or if none return initialValue\nreturn item?JSON.parse(item):initialValue;}catch(error){// If error also return initialValue\nconsole.log(error);return initialValue;}}),_useState2=_slicedToArray(_useState,2),storedValue=_useState2[0],setStoredValue=_useState2[1];// Return a wrapped version of useState's setter function that ...\n// ... persists the new value to localStorage.\nvar setValue=useCallback(function(value){try{// Allow value to be a function so we have same API as useState\nvar valueToStore=value instanceof Function?value(storedValue):value;// Save state\nsetStoredValue(valueToStore);// Save to local storage\nwindow.localStorage.setItem(key,JSON.stringify(valueToStore));}catch(error){// A more advanced implementation would handle the error case\nconsole.log(error);}},[]);return[storedValue,setValue];}","map":null,"metadata":{},"sourceType":"module"}