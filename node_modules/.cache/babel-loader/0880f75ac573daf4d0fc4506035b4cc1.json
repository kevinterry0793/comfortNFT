{"ast":null,"code":"var _jsxFileName = \"/Users/hienle/Documents/GitHub/comfortNFT/src/contexts/Balances/Provider.tsx\";\nimport React, { useCallback, useEffect, useState } from 'react';\nimport BigNumber from 'bignumber.js';\nimport { useWallet } from 'use-wallet';\nimport { getAddresses } from 'constants/tokenAddresses';\nimport { getBalance } from 'utils';\nimport Context from './Context';\nconst addresses = getAddresses();\n\nconst Provider = ({\n  children\n}) => {\n  const [strnEthLpBalance, setStrnEthLpBalance] = useState();\n  const [strnTokenBalance, setStrnTokenBalance] = useState();\n  const [strnIncBalance, setStrnIncBalance] = useState();\n  const [strnXiotLpBalance, setStrnXiotLpBalance] = useState();\n  const [strnEthLpPoolBalance, setStrnEthLpPoolBalance] = useState();\n  const [strnXiotLpPoolBalance, setStrnXiotLpPoolBalance] = useState();\n  const [stxpTokenBalance, setStxpTokenBalance] = useState();\n  const {\n    account,\n    ethereum\n  } = useWallet();\n  const fetchBalances = useCallback(async (userAddress, provider) => {\n    const balances = await Promise.all([await getBalance(provider, addresses.strnLPTokenAddress, userAddress), await getBalance(provider, addresses.strnTokenAddress, userAddress), await getBalance(provider, addresses.strnEthIncAddress, userAddress), await getBalance(provider, addresses.strnXiotLPTokenAddress, userAddress), await getBalance(provider, addresses.strnEthIncAddress, userAddress), await getBalance(provider, addresses.strnXiotPoolAddress, userAddress), await getBalance(provider, addresses.stxpTokenAddress, userAddress)]);\n    setStrnEthLpBalance(new BigNumber(balances[0]).dividedBy(new BigNumber(10).pow(18)));\n    setStrnTokenBalance(new BigNumber(balances[1]).dividedBy(new BigNumber(10).pow(18)));\n    setStrnIncBalance(new BigNumber(balances[2]).dividedBy(new BigNumber(10).pow(18)));\n    setStrnXiotLpBalance(new BigNumber(balances[3]).dividedBy(new BigNumber(10).pow(18)));\n    setStrnEthLpPoolBalance(new BigNumber(balances[4]).dividedBy(new BigNumber(10).pow(18)));\n    setStrnXiotLpPoolBalance(new BigNumber(balances[5]).dividedBy(new BigNumber(10).pow(18)));\n    setStxpTokenBalance(new BigNumber(balances[6]).dividedBy(new BigNumber(10).pow(18)));\n  }, [setStrnEthLpBalance, setStrnTokenBalance, setStrnIncBalance, setStrnXiotLpBalance, setStrnEthLpPoolBalance, setStxpTokenBalance]);\n  useEffect(() => {\n    if (account && ethereum) {\n      fetchBalances(account, ethereum);\n    }\n  }, [account, ethereum, fetchBalances]);\n  useEffect(() => {\n    if (account && ethereum) {\n      fetchBalances(account, ethereum);\n      let refreshInterval = setInterval(() => fetchBalances(account, ethereum), 10000);\n      return () => clearInterval(refreshInterval);\n    }\n  }, [account, ethereum, fetchBalances]);\n  return /*#__PURE__*/React.createElement(Context.Provider, {\n    value: {\n      strnEthLpBalance,\n      strnTokenBalance,\n      strnIncBalance,\n      strnXiotLpBalance,\n      strnEthLpPoolBalance,\n      strnXiotLpPoolBalance,\n      stxpTokenBalance\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }\n  }, children);\n};\n\nexport default Provider;","map":{"version":3,"sources":["/Users/hienle/Documents/GitHub/comfortNFT/src/contexts/Balances/Provider.tsx"],"names":["React","useCallback","useEffect","useState","BigNumber","useWallet","getAddresses","getBalance","Context","addresses","Provider","children","strnEthLpBalance","setStrnEthLpBalance","strnTokenBalance","setStrnTokenBalance","strnIncBalance","setStrnIncBalance","strnXiotLpBalance","setStrnXiotLpBalance","strnEthLpPoolBalance","setStrnEthLpPoolBalance","strnXiotLpPoolBalance","setStrnXiotLpPoolBalance","stxpTokenBalance","setStxpTokenBalance","account","ethereum","fetchBalances","userAddress","provider","balances","Promise","all","strnLPTokenAddress","strnTokenAddress","strnEthIncAddress","strnXiotLPTokenAddress","strnXiotPoolAddress","stxpTokenAddress","dividedBy","pow","refreshInterval","setInterval","clearInterval"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,QAAxC,QAAwD,OAAxD;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,SAASC,SAAT,QAA0B,YAA1B;AAGA,SACEC,YADF,QAEO,0BAFP;AAGA,SAASC,UAAT,QAA2B,OAA3B;AAEA,OAAOC,OAAP,MAAoB,WAApB;AAEA,MAAMC,SAAS,GAAGH,YAAY,EAA9B;;AAEA,MAAMI,QAAkB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAC3C,QAAM,CAACC,gBAAD,EAAmBC,mBAAnB,IAA0CV,QAAQ,EAAxD;AACA,QAAM,CAACW,gBAAD,EAAmBC,mBAAnB,IAA0CZ,QAAQ,EAAxD;AACA,QAAM,CAACa,cAAD,EAAiBC,iBAAjB,IAAsCd,QAAQ,EAApD;AACA,QAAM,CAACe,iBAAD,EAAoBC,oBAApB,IAA4ChB,QAAQ,EAA1D;AACA,QAAM,CAACiB,oBAAD,EAAuBC,uBAAvB,IAAkDlB,QAAQ,EAAhE;AACA,QAAM,CAACmB,qBAAD,EAAwBC,wBAAxB,IAAoDpB,QAAQ,EAAlE;AACA,QAAM,CAACqB,gBAAD,EAAmBC,mBAAnB,IAA0CtB,QAAQ,EAAxD;AAEA,QAAM;AAAEuB,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAwEtB,SAAS,EAAvF;AAEA,QAAMuB,aAAa,GAAG3B,WAAW,CAAC,OAAO4B,WAAP,EAA4BC,QAA5B,KAAmD;AACnF,UAAMC,QAAQ,GAAG,MAAMC,OAAO,CAACC,GAAR,CAAY,CACjC,MAAM1B,UAAU,CAACuB,QAAD,EAAWrB,SAAS,CAACyB,kBAArB,EAAyCL,WAAzC,CADiB,EAEjC,MAAMtB,UAAU,CAACuB,QAAD,EAAWrB,SAAS,CAAC0B,gBAArB,EAAuCN,WAAvC,CAFiB,EAGjC,MAAMtB,UAAU,CAACuB,QAAD,EAAWrB,SAAS,CAAC2B,iBAArB,EAAwCP,WAAxC,CAHiB,EAIjC,MAAMtB,UAAU,CAACuB,QAAD,EAAWrB,SAAS,CAAC4B,sBAArB,EAA6CR,WAA7C,CAJiB,EAKjC,MAAMtB,UAAU,CAACuB,QAAD,EAAWrB,SAAS,CAAC2B,iBAArB,EAAwCP,WAAxC,CALiB,EAMjC,MAAMtB,UAAU,CAACuB,QAAD,EAAWrB,SAAS,CAAC6B,mBAArB,EAA0CT,WAA1C,CANiB,EAOjC,MAAMtB,UAAU,CAACuB,QAAD,EAAWrB,SAAS,CAAC8B,gBAArB,EAAuCV,WAAvC,CAPiB,CAAZ,CAAvB;AASAhB,IAAAA,mBAAmB,CAAC,IAAIT,SAAJ,CAAc2B,QAAQ,CAAC,CAAD,CAAtB,EAA2BS,SAA3B,CAAqC,IAAIpC,SAAJ,CAAc,EAAd,EAAkBqC,GAAlB,CAAsB,EAAtB,CAArC,CAAD,CAAnB;AACA1B,IAAAA,mBAAmB,CAAC,IAAIX,SAAJ,CAAc2B,QAAQ,CAAC,CAAD,CAAtB,EAA2BS,SAA3B,CAAqC,IAAIpC,SAAJ,CAAc,EAAd,EAAkBqC,GAAlB,CAAsB,EAAtB,CAArC,CAAD,CAAnB;AACAxB,IAAAA,iBAAiB,CAAC,IAAIb,SAAJ,CAAc2B,QAAQ,CAAC,CAAD,CAAtB,EAA2BS,SAA3B,CAAqC,IAAIpC,SAAJ,CAAc,EAAd,EAAkBqC,GAAlB,CAAsB,EAAtB,CAArC,CAAD,CAAjB;AACAtB,IAAAA,oBAAoB,CAAC,IAAIf,SAAJ,CAAc2B,QAAQ,CAAC,CAAD,CAAtB,EAA2BS,SAA3B,CAAqC,IAAIpC,SAAJ,CAAc,EAAd,EAAkBqC,GAAlB,CAAsB,EAAtB,CAArC,CAAD,CAApB;AACApB,IAAAA,uBAAuB,CAAC,IAAIjB,SAAJ,CAAc2B,QAAQ,CAAC,CAAD,CAAtB,EAA2BS,SAA3B,CAAqC,IAAIpC,SAAJ,CAAc,EAAd,EAAkBqC,GAAlB,CAAsB,EAAtB,CAArC,CAAD,CAAvB;AACAlB,IAAAA,wBAAwB,CAAC,IAAInB,SAAJ,CAAc2B,QAAQ,CAAC,CAAD,CAAtB,EAA2BS,SAA3B,CAAqC,IAAIpC,SAAJ,CAAc,EAAd,EAAkBqC,GAAlB,CAAsB,EAAtB,CAArC,CAAD,CAAxB;AACAhB,IAAAA,mBAAmB,CAAC,IAAIrB,SAAJ,CAAc2B,QAAQ,CAAC,CAAD,CAAtB,EAA2BS,SAA3B,CAAqC,IAAIpC,SAAJ,CAAc,EAAd,EAAkBqC,GAAlB,CAAsB,EAAtB,CAArC,CAAD,CAAnB;AACD,GAjBgC,EAiB9B,CACD5B,mBADC,EAEDE,mBAFC,EAGDE,iBAHC,EAIDE,oBAJC,EAKDE,uBALC,EAMDI,mBANC,CAjB8B,CAAjC;AA0BAvB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIwB,OAAO,IAAIC,QAAf,EAAyB;AACvBC,MAAAA,aAAa,CAACF,OAAD,EAAUC,QAAV,CAAb;AACD;AACF,GAJQ,EAIN,CACDD,OADC,EAEDC,QAFC,EAGDC,aAHC,CAJM,CAAT;AAUA1B,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIwB,OAAO,IAAIC,QAAf,EAAyB;AACvBC,MAAAA,aAAa,CAACF,OAAD,EAAUC,QAAV,CAAb;AACA,UAAIe,eAAe,GAAGC,WAAW,CAAC,MAAMf,aAAa,CAACF,OAAD,EAAUC,QAAV,CAApB,EAAyC,KAAzC,CAAjC;AACA,aAAO,MAAMiB,aAAa,CAACF,eAAD,CAA1B;AACD;AACF,GANQ,EAMN,CACDhB,OADC,EAEDC,QAFC,EAGDC,aAHC,CANM,CAAT;AAYA,sBACE,oBAAC,OAAD,CAAS,QAAT;AAAkB,IAAA,KAAK,EAAE;AACvBhB,MAAAA,gBADuB;AAEvBE,MAAAA,gBAFuB;AAGvBE,MAAAA,cAHuB;AAIvBE,MAAAA,iBAJuB;AAKvBE,MAAAA,oBALuB;AAMvBE,MAAAA,qBANuB;AAOvBE,MAAAA;AAPuB,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASGb,QATH,CADF;AAaD,CAxED;;AA0EA,eAAeD,QAAf","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from 'use-wallet'\nimport { provider } from 'web3-core'\n\nimport {\n  getAddresses,\n} from 'constants/tokenAddresses'\nimport { getBalance } from 'utils'\n\nimport Context from './Context'\n\nconst addresses = getAddresses()\n\nconst Provider: React.FC = ({ children }) => {\n  const [strnEthLpBalance, setStrnEthLpBalance] = useState<BigNumber>()\n  const [strnTokenBalance, setStrnTokenBalance] = useState<BigNumber>()\n  const [strnIncBalance, setStrnIncBalance] = useState<BigNumber>()\n  const [strnXiotLpBalance, setStrnXiotLpBalance] = useState<BigNumber>()\n  const [strnEthLpPoolBalance, setStrnEthLpPoolBalance] = useState<BigNumber>()\n  const [strnXiotLpPoolBalance, setStrnXiotLpPoolBalance] = useState<BigNumber>()\n  const [stxpTokenBalance, setStxpTokenBalance] = useState<BigNumber>()\n\n  const { account, ethereum }: { account: string | null, ethereum: provider } = useWallet()\n\n  const fetchBalances = useCallback(async (userAddress: string, provider: provider) => {\n    const balances = await Promise.all([\n      await getBalance(provider, addresses.strnLPTokenAddress, userAddress),\n      await getBalance(provider, addresses.strnTokenAddress, userAddress),\n      await getBalance(provider, addresses.strnEthIncAddress, userAddress),\n      await getBalance(provider, addresses.strnXiotLPTokenAddress, userAddress),\n      await getBalance(provider, addresses.strnEthIncAddress, userAddress),\n      await getBalance(provider, addresses.strnXiotPoolAddress, userAddress),\n      await getBalance(provider, addresses.stxpTokenAddress, userAddress)\n    ])\n    setStrnEthLpBalance(new BigNumber(balances[0]).dividedBy(new BigNumber(10).pow(18)))\n    setStrnTokenBalance(new BigNumber(balances[1]).dividedBy(new BigNumber(10).pow(18)))\n    setStrnIncBalance(new BigNumber(balances[2]).dividedBy(new BigNumber(10).pow(18)))\n    setStrnXiotLpBalance(new BigNumber(balances[3]).dividedBy(new BigNumber(10).pow(18)))\n    setStrnEthLpPoolBalance(new BigNumber(balances[4]).dividedBy(new BigNumber(10).pow(18)))\n    setStrnXiotLpPoolBalance(new BigNumber(balances[5]).dividedBy(new BigNumber(10).pow(18)))\n    setStxpTokenBalance(new BigNumber(balances[6]).dividedBy(new BigNumber(10).pow(18)))\n  }, [\n    setStrnEthLpBalance,\n    setStrnTokenBalance,\n    setStrnIncBalance,\n    setStrnXiotLpBalance,\n    setStrnEthLpPoolBalance,\n    setStxpTokenBalance\n  ])\n\n  useEffect(() => {\n    if (account && ethereum) {\n      fetchBalances(account, ethereum)\n    }\n  }, [\n    account,\n    ethereum,\n    fetchBalances,\n  ])\n\n  useEffect(() => {\n    if (account && ethereum) {\n      fetchBalances(account, ethereum)\n      let refreshInterval = setInterval(() => fetchBalances(account, ethereum), 10000)\n      return () => clearInterval(refreshInterval)\n    }\n  }, [\n    account,\n    ethereum,\n    fetchBalances,\n  ])\n\n  return (\n    <Context.Provider value={{\n      strnEthLpBalance,\n      strnTokenBalance,\n      strnIncBalance,\n      strnXiotLpBalance,\n      strnEthLpPoolBalance,\n      strnXiotLpPoolBalance,\n      stxpTokenBalance\n    }}>\n      {children}\n    </Context.Provider>\n  )\n}\n\nexport default Provider"]},"metadata":{},"sourceType":"module"}