{"ast":null,"code":"var _jsxFileName = \"/Users/hienle/Documents/GitHub/comfortNFT/src/contexts/StrainNfts/Provider.tsx\";\nimport React, { useCallback, useEffect, useState } from 'react';\nimport BigNumber from 'bignumber.js';\nimport { useWallet } from 'use-wallet';\nimport { getAddresses } from 'constants/tokenAddresses';\nimport Context from './Context';\nimport { PoolIds } from 'constants/poolValues';\nimport useYam from 'hooks/useYam';\nimport { addNftStake, burnNft, generateNft, getNftEarned, harvestNfts } from 'yam-sdk/utils';\nimport { getUserNfts } from 'utils';\nimport Axios from 'axios';\n\nconst Provider = ({\n  children\n}) => {\n  const [confirmTxModalIsOpen, setConfirmTxModalIsOpen] = useState(false);\n  const [nftcollection, setNftCollection] = useState([]);\n  const [oldNftCollection, setOldNftCollection] = useState([]);\n  const [isCreating, setIsCreating] = useState(false);\n  const [isAdding, setIsAdding] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [earnedStrnBalance, setEarnedStrnBalance] = useState();\n  const [strnEthLpPoolBalance, setStrnEthLpPoolBalance] = useState();\n  const [strnXiotLpPoolBalance, setStrnXiotLpPoolBalance] = useState();\n  const [isHarvesting, setIsHarvesting] = useState(false);\n  const [fetchNfts, setFetchNfts] = useState(true);\n  const [fetchOldNfts, setFetchOldNfts] = useState(true);\n  const [txHash, setTxHash] = useState();\n  const {\n    account,\n    ethereum\n  } = useWallet();\n  const yam = useYam();\n  const fetchUsersNfts = useCallback(async (yam, userAddress, provider) => {\n    if (account === undefined || yam === undefined) {\n      console.log('account, yam', account !== undefined, yam !== undefined);\n      return;\n    }\n\n    setIsLoading(true);\n    if (txHash) checkTxHashRefreshUserNfts(yam.web3.eth, txHash, setTxHash);\n\n    if (fetchNfts) {\n      const startTime = new Date().getTime();\n      setFetchNfts(false);\n      getUserNfts(provider, getAddresses().strainNFTAddress, userAddress, yam.contracts.strain_nft_crafter, yam.contracts.strain_nft_genetics).then(nftinstances => {\n        const fetchTime = new Date().getTime();\n        console.log(`NFT fetching took ${(fetchTime - startTime) / 1000} seconds`);\n        console.log('nftinstances', nftinstances);\n        setNftCollection(nftinstances); // sum up LPs in each pool\n\n        const strnEthNfts = nftinstances.filter(n => n.poolId === PoolIds.STRN_ETH).reduce((p, n) => p.plus(n.lpBalance || 0), new BigNumber(0));\n        const strnXiotNfts = nftinstances.filter(n => n.poolId === PoolIds.STRN_XIOT).reduce((p, n) => p.plus(n.lpBalance || 0), new BigNumber(0));\n        setStrnEthLpPoolBalance(strnEthNfts);\n        setStrnXiotLpPoolBalance(strnXiotNfts);\n      }).catch(e => {\n        setIsLoading(false);\n        setFetchNfts(true);\n      });\n    }\n\n    setIsLoading(false);\n  }, [yam, fetchNfts, txHash]);\n  const fetchOldUsersNfts = useCallback(async (yam, userAddress, provider) => {\n    const oldStrainNFTAddress = getAddresses().oldStrainNFTAddress;\n\n    if (account === undefined || yam === undefined) {\n      console.log('account, yam', account !== undefined, yam !== undefined);\n      return;\n    }\n\n    setIsLoading(true);\n    if (txHash) checkTxHashRefreshUserNfts(yam.web3.eth, txHash, setTxHash);\n\n    if (fetchOldNfts) {\n      const startTime = new Date().getTime();\n      setFetchOldNfts(false);\n      getUserNfts(provider, oldStrainNFTAddress, userAddress, yam.contracts.strain_nft_crafter_old, yam.contracts.strain_nft_genetics).then(oldNftinstances => {\n        const fetchTime = new Date().getTime();\n        console.log(`Old NFT fetching took ${(fetchTime - startTime) / 1000} seconds`);\n        console.log('oldNftinstances', oldNftinstances);\n        setOldNftCollection(oldNftinstances); // sum up LPs in each pool\n\n        const strnEthNfts = oldNftinstances.filter(n => n.poolId === PoolIds.STRN_ETH).reduce((p, n) => p.plus(n.lpBalance || 0), new BigNumber(0));\n        const strnXiotNfts = oldNftinstances.filter(n => n.poolId === PoolIds.STRN_XIOT).reduce((p, n) => p.plus(n.lpBalance || 0), new BigNumber(0));\n        setStrnEthLpPoolBalance(strnEthNfts);\n        setStrnXiotLpPoolBalance(strnXiotNfts);\n      }).catch(e => {\n        setIsLoading(false);\n        setFetchOldNfts(true);\n      });\n    }\n\n    setIsLoading(false);\n  }, [yam, fetchOldNfts, txHash]);\n  const fetchEarnedBalance = useCallback(async (yam, account, nftcollection) => {\n    if (!account || !yam) return;\n    if (!nftcollection || nftcollection.length === 0) return setEarnedStrnBalance(new BigNumber(0));\n    const nftIds = nftcollection.map(n => n.nftId);\n    const balance = await getNftEarned(yam, yam.contracts.strain_nft_crafter_old, account, nftIds);\n    console.log('nft earned balance', String(balance));\n    setEarnedStrnBalance(balance);\n  }, [account, setEarnedStrnBalance, yam, nftcollection]);\n  useEffect(() => {\n    if (account && ethereum && yam) {\n      fetchUsersNfts(yam, account, ethereum);\n      fetchOldUsersNfts(yam, account, ethereum);\n      let refreshInterval = setInterval(() => {\n        fetchUsersNfts(yam, account, ethereum);\n        fetchOldUsersNfts(yam, account, ethereum);\n        fetchEarnedBalance(yam, account, nftcollection);\n      }, 10000);\n      return () => clearInterval(refreshInterval);\n    }\n  }, [account, ethereum, fetchUsersNfts, fetchOldUsersNfts, yam, nftcollection]);\n  const handleCreateNft = useCallback(async (poolId, amount, name) => {\n    if (!yam) return;\n    setConfirmTxModalIsOpen(true);\n    setIsCreating(true);\n    await generateNft(yam.contracts.strain_nft_crafter, yam.web3.eth, poolId, amount, name, account, txHash => {\n      setConfirmTxModalIsOpen(false);\n      setTxHash(txHash);\n    }).catch(e => {\n      console.error(e);\n      setIsCreating(false);\n    });\n    setIsCreating(false);\n  }, [account, setConfirmTxModalIsOpen, setIsCreating, yam]);\n  const handleAddNftStake = useCallback(async (poolId, nftId, amount, stxpAmount) => {\n    if (!yam) return;\n    setConfirmTxModalIsOpen(true);\n    setIsAdding(true);\n    await addNftStake(yam.contracts.strain_nft_crafter, yam.web3.eth, poolId, nftId, amount, stxpAmount, account, async txHash => {\n      setConfirmTxModalIsOpen(false);\n      setTxHash(txHash);\n    }).catch(e => {\n      console.error(e);\n      setIsAdding(false);\n    });\n    setIsAdding(false);\n  }, [account, setConfirmTxModalIsOpen, setIsAdding, yam]);\n  const handleDestroyNft = useCallback(async (poolId, nft) => {\n    if (!yam) return;\n    setConfirmTxModalIsOpen(true);\n    nft.isDestroying = true;\n    await burnNft(yam.contracts.strain_nft_crafter, yam.web3.eth, nft.nftId, poolId, account, txHash => {\n      setConfirmTxModalIsOpen(false);\n      setTxHash(txHash);\n    }).catch(e => {\n      console.error(e);\n      nft.isDestroying = false;\n    });\n    nft.isDestroying = false;\n  }, [account, setConfirmTxModalIsOpen, yam]);\n  const handleNftRetrive = useCallback(async nft => {\n    if (!(nft === null || nft === void 0 ? void 0 : nft.dataUrl)) return nft;\n    Axios.get(nft.dataUrl);\n    const promise = Axios.get(nft.dataUrl);\n    return promise.then(response => ({ ...nft,\n      attribs: response.data\n    }));\n  }, []);\n  const handleOldNftRetrive = useCallback(async nft => {\n    if (!(nft === null || nft === void 0 ? void 0 : nft.dataUrl)) return nft;\n    Axios.get(nft.dataUrl);\n    const promise = Axios.get(nft.dataUrl);\n    return promise.then(response => ({ ...nft,\n      attribs: response.data\n    }));\n  }, []);\n  const handleHarvest = useCallback(async () => {\n    if (!yam) return;\n    setConfirmTxModalIsOpen(true);\n    setIsHarvesting(true);\n    const nftids = nftcollection.map(nft => nft.nftId);\n    if (nftids.length === 0) return;\n    await harvestNfts(yam.contracts.strain_nft_crafter, yam.web3.eth, account, nftids, () => {\n      setConfirmTxModalIsOpen(false);\n    }).catch(e => {\n      console.error(e);\n    });\n    setIsHarvesting(false);\n  }, [account, setConfirmTxModalIsOpen, setIsHarvesting, yam, nftcollection]);\n\n  const checkTxHashRefreshUserNfts = async (provider, txHash, setTxHash) => {\n    const receipt = await provider.getTransactionReceipt(txHash);\n\n    if (receipt !== null) {\n      setTimeout(setFetchNfts(true), 5000);\n      setTxHash('');\n    }\n  };\n\n  const findNftById = nftId => {\n    return nftcollection.find(n => n.nftId === nftId);\n  };\n\n  return /*#__PURE__*/React.createElement(Context.Provider, {\n    value: {\n      setConfirmTxModalIsOpen,\n      strainNftCollection: nftcollection,\n      onDestroyNft: handleDestroyNft,\n      onRetrieve: handleNftRetrive,\n      onRetrieveOld: handleOldNftRetrive,\n      onCreateNft: handleCreateNft,\n      onHarvest: handleHarvest,\n      onAddNftStake: handleAddNftStake,\n      earnedStrnBalance,\n      isCreating,\n      isAdding,\n      isLoading,\n      isHarvesting,\n      strnEthLpPoolBalance,\n      strnXiotLpPoolBalance,\n      findNftById,\n      oldStrainNftCollection: oldNftCollection\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 5\n    }\n  }, children);\n};\n\nexport default Provider;","map":{"version":3,"sources":["/Users/hienle/Documents/GitHub/comfortNFT/src/contexts/StrainNfts/Provider.tsx"],"names":["React","useCallback","useEffect","useState","BigNumber","useWallet","getAddresses","Context","PoolIds","useYam","addNftStake","burnNft","generateNft","getNftEarned","harvestNfts","getUserNfts","Axios","Provider","children","confirmTxModalIsOpen","setConfirmTxModalIsOpen","nftcollection","setNftCollection","oldNftCollection","setOldNftCollection","isCreating","setIsCreating","isAdding","setIsAdding","isLoading","setIsLoading","earnedStrnBalance","setEarnedStrnBalance","strnEthLpPoolBalance","setStrnEthLpPoolBalance","strnXiotLpPoolBalance","setStrnXiotLpPoolBalance","isHarvesting","setIsHarvesting","fetchNfts","setFetchNfts","fetchOldNfts","setFetchOldNfts","txHash","setTxHash","account","ethereum","yam","fetchUsersNfts","userAddress","provider","undefined","console","log","checkTxHashRefreshUserNfts","web3","eth","startTime","Date","getTime","strainNFTAddress","contracts","strain_nft_crafter","strain_nft_genetics","then","nftinstances","fetchTime","strnEthNfts","filter","n","poolId","STRN_ETH","reduce","p","plus","lpBalance","strnXiotNfts","STRN_XIOT","catch","e","fetchOldUsersNfts","oldStrainNFTAddress","strain_nft_crafter_old","oldNftinstances","fetchEarnedBalance","length","nftIds","map","nftId","balance","String","refreshInterval","setInterval","clearInterval","handleCreateNft","amount","name","error","handleAddNftStake","stxpAmount","handleDestroyNft","nft","isDestroying","handleNftRetrive","dataUrl","get","promise","response","attribs","data","handleOldNftRetrive","handleHarvest","nftids","receipt","getTransactionReceipt","setTimeout","findNftById","find","strainNftCollection","onDestroyNft","onRetrieve","onRetrieveOld","onCreateNft","onHarvest","onAddNftStake","oldStrainNftCollection"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from 'use-wallet'\nimport { provider } from 'web3-core'\n\nimport {\n  getAddresses,\n} from 'constants/tokenAddresses'\n\nimport Context from './Context'\nimport { NftInstance, oldNftInstance, PoolIds } from 'constants/poolValues'\nimport useYam from 'hooks/useYam'\nimport { addNftStake, burnNft, generateNft, getNftEarned, harvestNfts } from 'yam-sdk/utils'\nimport { getUserNfts } from 'utils'\nimport Axios from 'axios'\n\nconst Provider: React.FC = ({ children }) => {\n  const [confirmTxModalIsOpen, setConfirmTxModalIsOpen] = useState(false)\n  const [nftcollection, setNftCollection] = useState<NftInstance[]>([])\n  const [oldNftCollection, setOldNftCollection] = useState<oldNftInstance[]>([])\n  const [isCreating, setIsCreating] = useState(false)\n  const [isAdding, setIsAdding] = useState(false)\n  const [isLoading, setIsLoading] = useState(false)\n  const [earnedStrnBalance, setEarnedStrnBalance] = useState<BigNumber>()\n  const [strnEthLpPoolBalance, setStrnEthLpPoolBalance] = useState<BigNumber>()\n  const [strnXiotLpPoolBalance, setStrnXiotLpPoolBalance] = useState<BigNumber>()\n  const [isHarvesting, setIsHarvesting] = useState(false)\n  const [fetchNfts, setFetchNfts] = useState(true);\n  const [fetchOldNfts, setFetchOldNfts] = useState(true);\n  const [txHash, setTxHash] = useState<string>()\n\n  const { account, ethereum }: { account: string | null, ethereum: provider } = useWallet()\n\n  const yam = useYam()\n\n  const fetchUsersNfts = useCallback(async (yam: any, userAddress: string, provider: provider) => {\n    if (account === undefined || yam === undefined) {\n      console.log('account, yam', account !== undefined, yam !== undefined)\n      return\n    }\n    setIsLoading(true)\n\n    if (txHash) checkTxHashRefreshUserNfts(yam.web3.eth, txHash, setTxHash);\n    if (fetchNfts) {\n      const startTime = new Date().getTime();\n      setFetchNfts(false)\n      getUserNfts(provider, getAddresses().strainNFTAddress, userAddress, yam.contracts.strain_nft_crafter, yam.contracts.strain_nft_genetics)\n        .then(nftinstances => {\n          const fetchTime = new Date().getTime();\n          console.log(`NFT fetching took ${(fetchTime - startTime) / 1000} seconds`)\n          console.log('nftinstances', nftinstances)\n          setNftCollection(nftinstances)\n\n          // sum up LPs in each pool\n          const strnEthNfts = nftinstances.filter(n => n.poolId === PoolIds.STRN_ETH).reduce((p, n) => p.plus(n.lpBalance || 0), new BigNumber(0));\n          const strnXiotNfts = nftinstances.filter(n => n.poolId === PoolIds.STRN_XIOT).reduce((p, n) => p.plus(n.lpBalance || 0), new BigNumber(0));\n          setStrnEthLpPoolBalance(strnEthNfts);\n          setStrnXiotLpPoolBalance(strnXiotNfts);\n        })\n        .catch(e => {\n          setIsLoading(false);\n          setFetchNfts(true)\n        })\n    }\n    setIsLoading(false);\n  }, [yam, fetchNfts, txHash])\n\n  const fetchOldUsersNfts = useCallback(async (yam: any, userAddress: string, provider: provider) => {\n\n    const oldStrainNFTAddress = getAddresses().oldStrainNFTAddress;\n    if (account === undefined || yam === undefined) {\n      console.log('account, yam', account !== undefined, yam !== undefined)\n      return\n    }\n    setIsLoading(true)\n\n    if (txHash) checkTxHashRefreshUserNfts(yam.web3.eth, txHash, setTxHash);\n    if (fetchOldNfts) {\n      const startTime = new Date().getTime();\n      setFetchOldNfts(false)\n      getUserNfts(provider, oldStrainNFTAddress, userAddress, yam.contracts.strain_nft_crafter_old, yam.contracts.strain_nft_genetics)\n        .then(oldNftinstances => {\n          const fetchTime = new Date().getTime();\n          console.log(`Old NFT fetching took ${(fetchTime - startTime) / 1000} seconds`)\n          console.log('oldNftinstances', oldNftinstances)\n          setOldNftCollection(oldNftinstances)\n\n          // sum up LPs in each pool\n          const strnEthNfts = oldNftinstances.filter(n => n.poolId === PoolIds.STRN_ETH).reduce((p, n) => p.plus(n.lpBalance || 0), new BigNumber(0));\n          const strnXiotNfts = oldNftinstances.filter(n => n.poolId === PoolIds.STRN_XIOT).reduce((p, n) => p.plus(n.lpBalance || 0), new BigNumber(0));\n          setStrnEthLpPoolBalance(strnEthNfts);\n          setStrnXiotLpPoolBalance(strnXiotNfts);\n        })\n        .catch(e => {\n          setIsLoading(false);\n          setFetchOldNfts(true)\n        })\n    }\n    setIsLoading(false);\n  }, [yam, fetchOldNfts, txHash])\n\n  const fetchEarnedBalance = useCallback(async (yam, account, nftcollection: NftInstance[]) => {\n    if (!account || !yam) return\n    if (!nftcollection || nftcollection.length === 0) return setEarnedStrnBalance(new BigNumber(0));\n    const nftIds = nftcollection.map(n => n.nftId);\n    const balance = await getNftEarned(yam, yam.contracts.strain_nft_crafter_old, account, nftIds);\n    console.log('nft earned balance', String(balance));\n    setEarnedStrnBalance(balance)\n  }, [\n    account,\n    setEarnedStrnBalance,\n    yam,\n    nftcollection\n  ])\n\n  useEffect(() => {\n    if (account && ethereum && yam) {\n      fetchUsersNfts(yam, account, ethereum)\n      fetchOldUsersNfts(yam, account, ethereum)\n      let refreshInterval = setInterval(() => {\n        fetchUsersNfts(yam, account, ethereum);\n        fetchOldUsersNfts(yam, account, ethereum)\n        fetchEarnedBalance(yam, account, nftcollection);\n      }, 10000)\n      return () => clearInterval(refreshInterval)\n    }\n  }, [\n    account,\n    ethereum,\n    fetchUsersNfts,\n    fetchOldUsersNfts,\n    yam,\n    nftcollection,\n  ])\n\n  const handleCreateNft = useCallback(async (poolId: string, amount: string, name: string) => {\n    if (!yam) return\n    setConfirmTxModalIsOpen(true)\n    setIsCreating(true)\n    await generateNft(yam.contracts.strain_nft_crafter, yam.web3.eth, poolId, amount, name, account, (txHash: string) => {\n      setConfirmTxModalIsOpen(false)\n      setTxHash(txHash)\n    }).catch(e => {\n      console.error(e)\n      setIsCreating(false)\n    })\n    setIsCreating(false)\n  }, [\n    account,\n    setConfirmTxModalIsOpen,\n    setIsCreating,\n    yam\n  ])\n\n  const handleAddNftStake = useCallback(async (poolId: string, nftId: string, amount: string, stxpAmount: string) => {\n    if (!yam) return\n    setConfirmTxModalIsOpen(true)\n    setIsAdding(true)\n    await addNftStake(yam.contracts.strain_nft_crafter, yam.web3.eth, poolId, nftId, amount, stxpAmount, account, async (txHash: string) => {\n      setConfirmTxModalIsOpen(false)\n      setTxHash(txHash)\n    }).catch(e => {\n      console.error(e)\n      setIsAdding(false)\n    })\n    setIsAdding(false)\n  }, [\n    account,\n    setConfirmTxModalIsOpen,\n    setIsAdding,\n    yam\n  ])\n\n  const handleDestroyNft = useCallback(async (poolId: string, nft: NftInstance) => {\n    if (!yam) return\n    setConfirmTxModalIsOpen(true)\n    nft.isDestroying = true;\n    await burnNft(yam.contracts.strain_nft_crafter, yam.web3.eth, nft.nftId, poolId, account, (txHash: string) => {\n      setConfirmTxModalIsOpen(false)\n      setTxHash(txHash)\n    }).catch(e => {\n      console.error(e)\n      nft.isDestroying = false;\n    })\n    nft.isDestroying = false;\n  }, [\n    account,\n    setConfirmTxModalIsOpen,\n    yam\n  ])\n\n  const handleNftRetrive = useCallback(async (nft: NftInstance): Promise<NftInstance> => {\n    if (!nft?.dataUrl) return nft;\n    Axios.get(nft.dataUrl)\n    const promise = Axios.get(nft.dataUrl)\n    return promise.then(response => ({ ...nft, attribs: response.data }));\n  }, [])\n\n  const handleOldNftRetrive = useCallback(async (nft: oldNftInstance): Promise<oldNftInstance> => {\n    if (!nft?.dataUrl) return nft;\n    Axios.get(nft.dataUrl)\n    const promise = Axios.get(nft.dataUrl)\n    return promise.then(response => ({ ...nft, attribs: response.data }));\n  }, [])\n\n  const handleHarvest = useCallback(async () => {\n    if (!yam) return\n    setConfirmTxModalIsOpen(true)\n    setIsHarvesting(true)\n    const nftids = nftcollection.map(nft => nft.nftId);\n    if (nftids.length === 0) return;\n    await harvestNfts(yam.contracts.strain_nft_crafter, yam.web3.eth, account, nftids, () => {\n      setConfirmTxModalIsOpen(false)\n    }).catch(e => {\n      console.error(e)\n    })\n    setIsHarvesting(false)\n  }, [\n    account,\n    setConfirmTxModalIsOpen,\n    setIsHarvesting,\n    yam,\n    nftcollection\n  ])\n\n  const checkTxHashRefreshUserNfts = async (provider: any, txHash: string, setTxHash: Function) => {\n    const receipt = await provider.getTransactionReceipt(txHash);\n    if (receipt !== null) {\n      setTimeout(setFetchNfts(true), 5000)\n      setTxHash('')\n    }\n  }\n\n  const findNftById = (nftId: string): NftInstance | undefined => {\n    return nftcollection.find(n => n.nftId === nftId);\n  }\n\n  return (\n    <Context.Provider value={{\n      setConfirmTxModalIsOpen,\n      strainNftCollection: nftcollection,\n      onDestroyNft: handleDestroyNft,\n      onRetrieve: handleNftRetrive,\n      onRetrieveOld: handleOldNftRetrive,\n      onCreateNft: handleCreateNft,\n      onHarvest: handleHarvest,\n      onAddNftStake: handleAddNftStake,\n      earnedStrnBalance,\n      isCreating,\n      isAdding,\n      isLoading,\n      isHarvesting,\n      strnEthLpPoolBalance,\n      strnXiotLpPoolBalance,\n      findNftById,\n      oldStrainNftCollection: oldNftCollection,\n    }}>\n      {children}\n    </Context.Provider>\n  )\n}\n\nexport default Provider"]},"metadata":{},"sourceType":"module"}