{"ast":null,"code":"var _jsxFileName = \"/Users/hienle/Documents/GitHub/comfortNFT/src/contexts/Greenhouse/Provider.tsx\";\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { useWallet } from 'use-wallet';\nimport BigNumber from 'bignumber.js';\nimport Context from './Context';\nimport useYam from 'hooks/useYam';\nimport { breedNfts } from 'yam-sdk/utils';\nimport useStrainNfts from 'hooks/useStrainNfts';\nimport { getAddresses } from 'constants/tokenAddresses';\nimport { MIN_LP_AMOUNTS_DISPLAY, PoolIds } from 'constants/poolValues';\nconst addresses = getAddresses();\n\nconst Provider = ({\n  children\n}) => {\n  const [isBreeding, setIsBreeding] = useState(false);\n  const [parentOneNftId, setParentOneNftId] = useState('');\n  const [parentTwoNftId, setParentTwoNftId] = useState('');\n  const [burnAmount, setBurnAmount] = useState('0');\n  const [stxpAmount, setStxpAmount] = useState('0');\n  const [childName, setChildName] = useState('');\n  const [lpTokenAmount, setLpTokenAmount] = useState(MIN_LP_AMOUNTS_DISPLAY[Number(PoolIds.STRN_ETH)]);\n  const {\n    strainNftCollection\n  } = useStrainNfts();\n  const [canBreed, setCanBreed] = useState(false);\n  const {\n    account,\n    ethereum\n  } = useWallet();\n  const yam = useYam();\n  const handleBreeding = useCallback(async () => {\n    if (!yam) return;\n    setIsBreeding(true);\n    console.log('parentOneNftId', parentOneNftId, 'parentTwoNftId', parentTwoNftId);\n    if (parentOneNftId === '' || parentTwoNftId === '') return setIsBreeding(false);\n    await breedNfts(yam.contracts.strain_nft_crafter, yam.web3.eth, \"0\", // only one pool\n    lpTokenAmount, stxpAmount, burnAmount, childName, parentOneNftId, parentTwoNftId, account, txHash => {\n      setIsBreeding(false);\n    }).catch(e => {\n      console.error(e);\n      setIsBreeding(false);\n    });\n    setIsBreeding(false);\n  }, [account, setIsBreeding, yam, parentOneNftId, parentTwoNftId, childName, lpTokenAmount]);\n\n  const handleCalculateBreedFee = () => {\n    if (parentOneNftId === '' || parentTwoNftId === '') return \"0\";\n    if (!strainNftCollection || strainNftCollection.length === 0) return \"0\";\n    const parentOne = strainNftCollection.find(s => s.nftId === parentOneNftId);\n    const parentTwo = strainNftCollection.find(s => s.nftId === parentTwoNftId);\n    if (!(parentOne === null || parentOne === void 0 ? void 0 : parentOne.breedFee) || !(parentTwo === null || parentTwo === void 0 ? void 0 : parentTwo.breedFee)) return \"0\";\n    const feeOne = parentOne.breedFee;\n    const feeTwo = parentTwo.breedFee;\n    const totalFeeBN = new BigNumber(feeOne).plus(feeTwo);\n    return String(totalFeeBN.div(new BigNumber(10).pow(18)));\n  };\n\n  useEffect(() => handleCanBreed(parentOneNftId, parentTwoNftId), [parentOneNftId, parentTwoNftId]);\n\n  const handleCanBreed = (parentOneNftId, parentTwoNftId) => {\n    if (parentOneNftId === '' || parentTwoNftId === '') return setCanBreed(false); // need to get contract call worked out\n\n    setCanBreed(true); //getCanBreed(yam.contracts.strain_nft_crafter, parentOneNftId, parentTwoNftId).then(result => setCanBreed(result));\n  };\n\n  return /*#__PURE__*/React.createElement(Context.Provider, {\n    value: {\n      parentOneNftId,\n      parentTwoNftId,\n      isBreeding,\n      onBreeding: handleBreeding,\n      setBurnAmount,\n      setStxpAmount: setStxpAmount,\n      setParentOneNftId,\n      setParentTwoNftId,\n      burnAmount,\n      stxpAmount,\n      setChildName,\n      childName,\n      lpTokenAmount,\n      setLpTokenAmount,\n      getBreedingFee: handleCalculateBreedFee,\n      parentsCanBreed: canBreed,\n      strainCrafterAddress: addresses.strainNFTCrafterAddress\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 5\n    }\n  }, children);\n};\n\nexport default Provider;","map":{"version":3,"sources":["/Users/hienle/Documents/GitHub/comfortNFT/src/contexts/Greenhouse/Provider.tsx"],"names":["React","useCallback","useEffect","useState","useWallet","BigNumber","Context","useYam","breedNfts","useStrainNfts","getAddresses","MIN_LP_AMOUNTS_DISPLAY","PoolIds","addresses","Provider","children","isBreeding","setIsBreeding","parentOneNftId","setParentOneNftId","parentTwoNftId","setParentTwoNftId","burnAmount","setBurnAmount","stxpAmount","setStxpAmount","childName","setChildName","lpTokenAmount","setLpTokenAmount","Number","STRN_ETH","strainNftCollection","canBreed","setCanBreed","account","ethereum","yam","handleBreeding","console","log","contracts","strain_nft_crafter","web3","eth","txHash","catch","e","error","handleCalculateBreedFee","length","parentOne","find","s","nftId","parentTwo","breedFee","feeOne","feeTwo","totalFeeBN","plus","String","div","pow","handleCanBreed","onBreeding","getBreedingFee","parentsCanBreed","strainCrafterAddress","strainNFTCrafterAddress"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react'\nimport { useWallet } from 'use-wallet'\nimport { provider } from 'web3-core'\nimport BigNumber from 'bignumber.js'\nimport Context from './Context'\n\nimport useYam from 'hooks/useYam'\nimport { breedNfts, getCanBreed } from 'yam-sdk/utils'\nimport useStrainNfts from 'hooks/useStrainNfts'\nimport {\n  getAddresses\n} from 'constants/tokenAddresses'\nimport { MIN_LP_AMOUNTS_DISPLAY, PoolIds } from 'constants/poolValues'\n\nconst addresses = getAddresses()\n\nconst Provider: React.FC = ({ children }) => {\n  const [isBreeding, setIsBreeding] = useState<boolean>(false)\n  const [parentOneNftId, setParentOneNftId] = useState('')\n  const [parentTwoNftId, setParentTwoNftId] = useState('')\n  const [burnAmount, setBurnAmount] = useState('0')\n  const [stxpAmount, setStxpAmount] = useState('0')\n  const [childName, setChildName] = useState('')\n  const [lpTokenAmount, setLpTokenAmount] = useState(MIN_LP_AMOUNTS_DISPLAY[Number(PoolIds.STRN_ETH)]);\n  const { strainNftCollection } = useStrainNfts();\n  const [canBreed, setCanBreed] = useState(false); \n\n  const { account, ethereum }: { account: string | null, ethereum: provider } = useWallet()\n\n  const yam = useYam()\n\n  const handleBreeding = useCallback(async () => {\n    if (!yam) return\n    setIsBreeding(true)\n    console.log('parentOneNftId', parentOneNftId, 'parentTwoNftId', parentTwoNftId)\n    if (parentOneNftId === '' || parentTwoNftId === '') return setIsBreeding(false);\n\n    await breedNfts(yam.contracts.strain_nft_crafter,\n      yam.web3.eth,\n      \"0\", // only one pool\n      lpTokenAmount,\n      stxpAmount,\n      burnAmount,\n      childName,\n      parentOneNftId,\n      parentTwoNftId,\n      account, (txHash: string) => {\n        setIsBreeding(false)\n      }).catch(e => {\n        console.error(e)\n        setIsBreeding(false)\n      })\n    setIsBreeding(false)\n  }, [\n    account,\n    setIsBreeding,\n    yam,\n    parentOneNftId,\n    parentTwoNftId,\n    childName,\n    lpTokenAmount\n  ])\n\n  const handleCalculateBreedFee = () => {\n    if (parentOneNftId === '' || parentTwoNftId === '') return \"0\";\n    if (!strainNftCollection || strainNftCollection.length === 0) return \"0\";\n    const parentOne = strainNftCollection.find(s => s.nftId === parentOneNftId);\n    const parentTwo = strainNftCollection.find(s => s.nftId === parentTwoNftId);\n    if (!parentOne?.breedFee || !parentTwo?.breedFee) return \"0\";\n    const feeOne = parentOne.breedFee;\n    const feeTwo = parentTwo.breedFee;\n    const totalFeeBN = new BigNumber(feeOne).plus(feeTwo);\n    return String(totalFeeBN.div(new BigNumber(10).pow(18)))\n  };\n\n  useEffect(() => handleCanBreed(parentOneNftId, parentTwoNftId), [parentOneNftId, parentTwoNftId])\n\n  const handleCanBreed = (parentOneNftId: string, parentTwoNftId: string) => {\n    if (parentOneNftId === '' || parentTwoNftId === '') return setCanBreed(false);\n    // need to get contract call worked out\n    setCanBreed(true);\n    //getCanBreed(yam.contracts.strain_nft_crafter, parentOneNftId, parentTwoNftId).then(result => setCanBreed(result));\n  };\n\n  return (\n    <Context.Provider value={{\n      parentOneNftId,\n      parentTwoNftId,\n      isBreeding,\n      onBreeding: handleBreeding,\n      setBurnAmount,\n      setStxpAmount: setStxpAmount,\n      setParentOneNftId,\n      setParentTwoNftId,\n      burnAmount,\n      stxpAmount,\n      setChildName,\n      childName,\n      lpTokenAmount,\n      setLpTokenAmount,\n      getBreedingFee: handleCalculateBreedFee,\n      parentsCanBreed: canBreed,\n      strainCrafterAddress: addresses.strainNFTCrafterAddress\n    }}>\n      {children}\n    </Context.Provider>\n  )\n}\n\nexport default Provider"]},"metadata":{},"sourceType":"module"}