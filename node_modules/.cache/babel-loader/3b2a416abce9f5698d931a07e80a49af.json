{"ast":null,"code":"import { useCallback, useState, useEffect } from 'react';\nimport { useWallet } from 'use-wallet';\nimport { approve } from 'utils';\nimport useAllowance from './useAllowance';\n\nconst useApproval = (tokenAddress, spenderAddress, onTxHash) => {\n  const allowance = useAllowance(tokenAddress, spenderAddress);\n  const [isApproving, setIsApproving] = useState(false);\n  const [isApproved, setIsApproved] = useState(false);\n  const {\n    account,\n    ethereum\n  } = useWallet();\n  const handleApprove = useCallback(async () => {\n    if (!ethereum || !account || !spenderAddress || !tokenAddress) {\n      return;\n    }\n\n    try {\n      setIsApproving(true);\n      const result = await approve(account, spenderAddress, tokenAddress, ethereum, onTxHash);\n      setIsApproved(result);\n      setIsApproving(false);\n    } catch (e) {\n      setIsApproving(false);\n      return false;\n    }\n  }, [account, ethereum, onTxHash, setIsApproved, setIsApproving, spenderAddress, tokenAddress]);\n  useEffect(() => {\n    if (!!(allowance === null || allowance === void 0 ? void 0 : allowance.toNumber())) {\n      setIsApproved(true);\n    }\n  }, [allowance, setIsApproved]);\n  return {\n    isApproved,\n    isApproving,\n    onApprove: handleApprove\n  };\n};\n\nexport default useApproval;","map":{"version":3,"sources":["/Users/hienle/Documents/GitHub/comfortNFT/src/hooks/useApproval.ts"],"names":["useCallback","useState","useEffect","useWallet","approve","useAllowance","useApproval","tokenAddress","spenderAddress","onTxHash","allowance","isApproving","setIsApproving","isApproved","setIsApproved","account","ethereum","handleApprove","result","e","toNumber","onApprove"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,QAAtB,EAAgCC,SAAhC,QAAiD,OAAjD;AAEA,SAASC,SAAT,QAA0B,YAA1B;AAGA,SAASC,OAAT,QAAwB,OAAxB;AAEA,OAAOC,YAAP,MAAyB,gBAAzB;;AAEA,MAAMC,WAAW,GAAG,CAClBC,YADkB,EAElBC,cAFkB,EAGlBC,QAHkB,KAIf;AACH,QAAMC,SAAS,GAAGL,YAAY,CAACE,YAAD,EAAeC,cAAf,CAA9B;AACA,QAAM,CAACG,WAAD,EAAcC,cAAd,IAAgCX,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM,CAACY,UAAD,EAAaC,aAAb,IAA8Bb,QAAQ,CAAC,KAAD,CAA5C;AAEA,QAAM;AAAEc,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAwEb,SAAS,EAAvF;AAEA,QAAMc,aAAa,GAAGjB,WAAW,CAAC,YAAY;AAC5C,QAAI,CAACgB,QAAD,IAAa,CAACD,OAAd,IAAyB,CAACP,cAA1B,IAA4C,CAACD,YAAjD,EAA+D;AAC7D;AACD;;AACD,QAAI;AACFK,MAAAA,cAAc,CAAC,IAAD,CAAd;AACA,YAAMM,MAAM,GAAG,MAAMd,OAAO,CAC1BW,OAD0B,EAE1BP,cAF0B,EAG1BD,YAH0B,EAI1BS,QAJ0B,EAK1BP,QAL0B,CAA5B;AAOAK,MAAAA,aAAa,CAACI,MAAD,CAAb;AACAN,MAAAA,cAAc,CAAC,KAAD,CAAd;AACD,KAXD,CAWE,OAAOO,CAAP,EAAU;AACVP,MAAAA,cAAc,CAAC,KAAD,CAAd;AACA,aAAO,KAAP;AACD;AACF,GAnBgC,EAmB9B,CACDG,OADC,EAEDC,QAFC,EAGDP,QAHC,EAIDK,aAJC,EAKDF,cALC,EAMDJ,cANC,EAODD,YAPC,CAnB8B,CAAjC;AA6BAL,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAAC,EAACQ,SAAD,aAACA,SAAD,uBAACA,SAAS,CAAEU,QAAX,EAAD,CAAL,EAA6B;AAC3BN,MAAAA,aAAa,CAAC,IAAD,CAAb;AACD;AACF,GAJQ,EAIN,CACDJ,SADC,EAEDI,aAFC,CAJM,CAAT;AASA,SAAO;AACLD,IAAAA,UADK;AAELF,IAAAA,WAFK;AAGLU,IAAAA,SAAS,EAAEJ;AAHN,GAAP;AAKD,CAtDD;;AAwDA,eAAeX,WAAf","sourcesContent":["import { useCallback, useState, useEffect } from 'react'\n\nimport { useWallet } from 'use-wallet'\nimport { provider } from 'web3-core'\n\nimport { approve } from 'utils'\n\nimport useAllowance from './useAllowance'\n\nconst useApproval = (\n  tokenAddress?: string,\n  spenderAddress?: string,\n  onTxHash?: (txHash: string) => void,\n) => {\n  const allowance = useAllowance(tokenAddress, spenderAddress)\n  const [isApproving, setIsApproving] = useState(false)\n  const [isApproved, setIsApproved] = useState(false)\n\n  const { account, ethereum }: { account: string | null, ethereum?: provider} = useWallet()\n\n  const handleApprove = useCallback(async () => {\n    if (!ethereum || !account || !spenderAddress || !tokenAddress) {\n      return\n    }\n    try {\n      setIsApproving(true)\n      const result = await approve(\n        account,\n        spenderAddress,\n        tokenAddress,\n        ethereum,\n        onTxHash,\n      )\n      setIsApproved(result)\n      setIsApproving(false)\n    } catch (e) {\n      setIsApproving(false)\n      return false\n    }\n  }, [\n    account,\n    ethereum,\n    onTxHash,\n    setIsApproved,\n    setIsApproving,\n    spenderAddress,\n    tokenAddress,\n  ])\n\n  useEffect(() => {\n    if (!!allowance?.toNumber()) {\n      setIsApproved(true)\n    }\n  }, [\n    allowance,\n    setIsApproved,\n  ])\n\n  return {\n    isApproved,\n    isApproving,\n    onApprove: handleApprove,\n  }\n}\n\nexport default useApproval"]},"metadata":{},"sourceType":"module"}