{"ast":null,"code":"var _jsxFileName = \"/Users/hienle/Documents/GitHub/comfortNFT/src/contexts/Staking/Provider.tsx\";\nimport React, { useCallback, useEffect, useState } from 'react';\nimport BigNumber from 'bignumber.js';\nimport { useWallet } from 'use-wallet';\nimport ConfirmTransactionModal from 'components/ConfirmTransactionModal';\nimport { getAddresses } from 'constants/tokenAddresses';\nimport useYam from 'hooks/useYam';\nimport { getExitableAmount, getSingleEarned, getSingleStakeBalances, getSingleStakingEndTime, singleExit, stxpSingleHarvest, stxpSingleRedeem, stxpSingleStake } from 'yam-sdk/utils';\nimport Context from './Context';\nconst addresses = getAddresses();\n\nconst Provider = ({\n  children\n}) => {\n  const [confirmTxModalIsOpen, setConfirmTxModalIsOpen] = useState(false);\n  const [isHarvesting, setIsHarvesting] = useState(false);\n  const [isRedeeming, setIsRedeeming] = useState(false);\n  const [isStaking, setIsStaking] = useState(false);\n  const [isUnstaking, setIsUnstaking] = useState(false);\n  const [totalStaked, setTotakStaked] = useState();\n  const [earnedStxpPoolBalance, setEarnedStxpPoolBalance] = useState();\n  const [userStakes, setUserStakes] = useState([]);\n  const [withdrawStakeAmount, setWithdrawStakeAmount] = useState();\n  const [endTime, setEndTime] = useState();\n  const [lastExpiringStake, setLastExpiringStake] = useState();\n  const yam = useYam();\n  const {\n    account\n  } = useWallet();\n\n  const getIncentivizerAddress = () => {\n    return addresses.strnEthIncAddress;\n  };\n\n  const fetchStakedBalance = useCallback(async () => {\n    if (!account || !yam) return;\n    const exitableAmount = await getExitableAmount(yam.contracts.stxpInc_pool, account);\n    setWithdrawStakeAmount(new BigNumber(String(exitableAmount)).dividedBy(new BigNumber(10).pow(18)));\n    const stakes = await getSingleStakeBalances(yam.contracts.stxpInc_pool, account);\n    const totalStaked = stakes.reduce((p, s) => p.plus(s.amount), new BigNumber(0));\n    setTotakStaked(totalStaked);\n    setUserStakes(stakes);\n\n    if (stakes && stakes.length > 0) {\n      const current = new Date().getTime() / 1000;\n      const lastExpiringStake = stakes.filter(s => s.lockDate > current).sort((a, b) => Number(a.lockDate) < Number(b.lockDate) ? 1 : -1);\n\n      if (lastExpiringStake && lastExpiringStake.length > 0) {\n        setLastExpiringStake(lastExpiringStake[0]);\n      } else {\n        setLastExpiringStake(undefined);\n      }\n    }\n  }, [account, setTotakStaked, setUserStakes, yam]);\n  const fetchEarnedBalance = useCallback(async () => {\n    if (!account || !yam) return;\n    const balance = await getSingleEarned(yam, yam.contracts.stxpInc_pool, account);\n    setEarnedStxpPoolBalance(balance);\n  }, [account, setEarnedStxpPoolBalance, yam]);\n  const fetchBalances = useCallback(async () => {\n    fetchEarnedBalance();\n    fetchStakedBalance();\n  }, [fetchEarnedBalance, fetchStakedBalance]);\n  const handleHarvest = useCallback(async () => {\n    if (!yam) return;\n    setConfirmTxModalIsOpen(true);\n    setIsHarvesting(true);\n    await stxpSingleHarvest(yam.contracts.stxpInc_pool, yam.web3.eth, account, () => {\n      setConfirmTxModalIsOpen(false);\n    }).catch(e => {\n      console.error(e);\n    });\n    setIsHarvesting(false);\n  }, [account, setConfirmTxModalIsOpen, setIsHarvesting, yam]); // amount is the amount of STRN user wants to exit and will claim all STXP\n\n  const handleRedeem = useCallback(async amount => {\n    if (!yam) return;\n    setConfirmTxModalIsOpen(true);\n    setIsRedeeming(true);\n    await stxpSingleRedeem(yam.contracts.stxpInc_pool, yam.web3.eth, amount, account, () => {\n      setConfirmTxModalIsOpen(false);\n    }).catch(e => {\n      console.error(e);\n      setIsRedeeming(false);\n    });\n    setIsRedeeming(false);\n  }, [account, setConfirmTxModalIsOpen, setIsRedeeming, yam]);\n  const handleStake = useCallback(async (duration, amount) => {\n    console.log('staking, stake, is yam undefined', yam === undefined);\n    if (!yam) return;\n    setConfirmTxModalIsOpen(true);\n    setIsStaking(true);\n    await stxpSingleStake(yam.contracts.stxpInc_pool, yam.web3.eth, duration, amount, account, () => {\n      setConfirmTxModalIsOpen(false);\n    }).catch(e => {\n      console.error(e);\n      setIsStaking(false);\n    });\n    setIsStaking(false);\n  }, [account, setConfirmTxModalIsOpen, setIsStaking, yam]);\n  const handleUnstake = useCallback(async amount => {\n    if (!yam) return;\n    setConfirmTxModalIsOpen(true);\n    setIsUnstaking(true);\n    await singleExit(yam.contracts.stxpInc_pool, yam.web3.eth, amount, account, () => {\n      setConfirmTxModalIsOpen(false);\n    }).catch(e => {\n      console.error(e);\n      setIsUnstaking(false);\n    });\n    setIsUnstaking(false);\n  }, [account, setConfirmTxModalIsOpen, setIsUnstaking, yam]);\n  useEffect(() => {\n    if (yam) getSingleStakingEndTime(yam, yam.contracts.stxpInc_pool).then(endTime => setEndTime(endTime));\n    fetchBalances();\n    let refreshInterval = setInterval(() => {\n      fetchBalances();\n    }, 10000);\n    return () => clearInterval(refreshInterval);\n  }, [fetchBalances, yam]);\n  return /*#__PURE__*/React.createElement(Context.Provider, {\n    value: {\n      setConfirmTxModalIsOpen,\n      earnedStxpPoolBalance,\n      isHarvesting,\n      isRedeeming,\n      isStaking,\n      isUnstaking,\n      onHarvest: handleHarvest,\n      onRedeem: handleRedeem,\n      onStake: handleStake,\n      onUnstake: handleUnstake,\n      getIncentivizerAddress,\n      totalStaked,\n      strnTokenAddress: addresses.strnTokenAddress,\n      endTime,\n      withdrawStakeAmount,\n      lastExpiringStake,\n      userStakes\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 5\n    }\n  }, children, /*#__PURE__*/React.createElement(ConfirmTransactionModal, {\n    isOpen: confirmTxModalIsOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default Provider;","map":{"version":3,"sources":["/Users/hienle/Documents/GitHub/comfortNFT/src/contexts/Staking/Provider.tsx"],"names":["React","useCallback","useEffect","useState","BigNumber","useWallet","ConfirmTransactionModal","getAddresses","useYam","getExitableAmount","getSingleEarned","getSingleStakeBalances","getSingleStakingEndTime","singleExit","stxpSingleHarvest","stxpSingleRedeem","stxpSingleStake","Context","addresses","Provider","children","confirmTxModalIsOpen","setConfirmTxModalIsOpen","isHarvesting","setIsHarvesting","isRedeeming","setIsRedeeming","isStaking","setIsStaking","isUnstaking","setIsUnstaking","totalStaked","setTotakStaked","earnedStxpPoolBalance","setEarnedStxpPoolBalance","userStakes","setUserStakes","withdrawStakeAmount","setWithdrawStakeAmount","endTime","setEndTime","lastExpiringStake","setLastExpiringStake","yam","account","getIncentivizerAddress","strnEthIncAddress","fetchStakedBalance","exitableAmount","contracts","stxpInc_pool","String","dividedBy","pow","stakes","reduce","p","s","plus","amount","length","current","Date","getTime","filter","lockDate","sort","a","b","Number","undefined","fetchEarnedBalance","balance","fetchBalances","handleHarvest","web3","eth","catch","e","console","error","handleRedeem","handleStake","duration","log","handleUnstake","then","refreshInterval","setInterval","clearInterval","onHarvest","onRedeem","onStake","onUnstake","strnTokenAddress"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react'\n\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from 'use-wallet'\n\nimport ConfirmTransactionModal from 'components/ConfirmTransactionModal'\nimport {\n  getAddresses\n} from 'constants/tokenAddresses'\nimport useYam from 'hooks/useYam'\n\nimport {\n  getExitableAmount,\n  getSingleEarned,\n  getSingleStakeBalances,\n  getSingleStakingEndTime,\n  singleExit,\n  stxpSingleHarvest,\n  stxpSingleRedeem,\n  stxpSingleStake,\n} from 'yam-sdk/utils'\n\nimport Context from './Context'\nimport { SingleStake } from 'constants/poolValues'\n\n\nconst addresses = getAddresses()\n\nconst Provider: React.FC = ({ children }) => {\n  const [confirmTxModalIsOpen, setConfirmTxModalIsOpen] = useState(false)\n  const [isHarvesting, setIsHarvesting] = useState(false)\n  const [isRedeeming, setIsRedeeming] = useState(false)\n  const [isStaking, setIsStaking] = useState(false)\n  const [isUnstaking, setIsUnstaking] = useState(false)\n  const [totalStaked, setTotakStaked] = useState<BigNumber>()\n  const [earnedStxpPoolBalance, setEarnedStxpPoolBalance] = useState<BigNumber>()\n  const [userStakes, setUserStakes] = useState<SingleStake[]>([])\n  const [withdrawStakeAmount, setWithdrawStakeAmount] = useState<BigNumber>()\n  const [endTime, setEndTime] = useState<BigNumber>()\n  const [lastExpiringStake, setLastExpiringStake] = useState<SingleStake>()\n\n  const yam = useYam()\n  const { account } = useWallet()\n\n  const getIncentivizerAddress = () => {\n    return addresses.strnEthIncAddress\n  }\n\n  const fetchStakedBalance = useCallback(async () => {\n    if (!account || !yam) return\n    const exitableAmount = await getExitableAmount(yam.contracts.stxpInc_pool, account);\n    setWithdrawStakeAmount(new BigNumber(String(exitableAmount)).dividedBy(new BigNumber(10).pow(18)))\n\n    const stakes: SingleStake[] = await getSingleStakeBalances(yam.contracts.stxpInc_pool, account)\n    const totalStaked = stakes.reduce((p, s) => p.plus(s.amount), new BigNumber(0))\n    setTotakStaked(totalStaked)\n    setUserStakes(stakes)\n\n    if (stakes && stakes.length > 0) {\n      const current = (new Date().getTime() / 1000);\n      const lastExpiringStake = stakes.filter(s => s.lockDate > current)\n        .sort((a, b) => Number(a.lockDate) < Number(b.lockDate) ? 1 : -1)\n      if (lastExpiringStake && lastExpiringStake.length > 0) {\n        setLastExpiringStake(lastExpiringStake[0])\n      }\n      else {\n        setLastExpiringStake(undefined)\n      }\n    }\n  }, [\n    account,\n    setTotakStaked,\n    setUserStakes,\n    yam\n  ])\n\n  const fetchEarnedBalance = useCallback(async () => {\n    if (!account || !yam) return\n    const balance = await getSingleEarned(yam, yam.contracts.stxpInc_pool, account)\n    setEarnedStxpPoolBalance(balance)\n  }, [\n    account,\n    setEarnedStxpPoolBalance,\n    yam\n  ])\n\n  const fetchBalances = useCallback(async () => {\n    fetchEarnedBalance()\n    fetchStakedBalance()\n  }, [\n    fetchEarnedBalance,\n    fetchStakedBalance\n  ])\n\n  const handleHarvest = useCallback(async () => {\n    if (!yam) return\n    setConfirmTxModalIsOpen(true)\n    setIsHarvesting(true)\n    await stxpSingleHarvest(yam.contracts.stxpInc_pool, yam.web3.eth, account, () => {\n      setConfirmTxModalIsOpen(false)\n    }).catch(e => {\n      console.error(e)\n    })\n    setIsHarvesting(false)\n  }, [\n    account,\n    setConfirmTxModalIsOpen,\n    setIsHarvesting,\n    yam\n  ])\n\n  // amount is the amount of STRN user wants to exit and will claim all STXP\n  const handleRedeem = useCallback(async (amount) => {\n    if (!yam) return\n    setConfirmTxModalIsOpen(true)\n    setIsRedeeming(true)\n    await stxpSingleRedeem(yam.contracts.stxpInc_pool, yam.web3.eth, amount, account, () => {\n      setConfirmTxModalIsOpen(false)\n    }).catch(e => {\n      console.error(e)\n      setIsRedeeming(false)\n    })\n    setIsRedeeming(false)\n  }, [\n    account,\n    setConfirmTxModalIsOpen,\n    setIsRedeeming,\n    yam\n  ])\n\n  const handleStake = useCallback(async (duration: string, amount: string) => {\n    console.log('staking, stake, is yam undefined', yam === undefined);\n    if (!yam) return\n    setConfirmTxModalIsOpen(true)\n    setIsStaking(true)\n    await stxpSingleStake(yam.contracts.stxpInc_pool, yam.web3.eth, duration, amount, account, () => {\n      setConfirmTxModalIsOpen(false)\n    }).catch(e => {\n      console.error(e)\n      setIsStaking(false)\n    })\n    setIsStaking(false)\n  }, [\n    account,\n    setConfirmTxModalIsOpen,\n    setIsStaking,\n    yam\n  ])\n\n  const handleUnstake = useCallback(async (amount: string) => {\n    if (!yam) return\n    setConfirmTxModalIsOpen(true)\n    setIsUnstaking(true)\n    await singleExit(yam.contracts.stxpInc_pool, yam.web3.eth, amount, account, () => {\n      setConfirmTxModalIsOpen(false)\n    }).catch(e => {\n      console.error(e)\n      setIsUnstaking(false)\n    })\n    setIsUnstaking(false)\n  }, [\n    account,\n    setConfirmTxModalIsOpen,\n    setIsUnstaking,\n    yam\n  ])\n\n  useEffect(() => {\n    if (yam) getSingleStakingEndTime(yam, yam.contracts.stxpInc_pool).then(endTime => setEndTime(endTime))\n    fetchBalances()\n    let refreshInterval = setInterval(() => {\n      fetchBalances()\n    }, 10000)\n    return () => clearInterval(refreshInterval)\n  }, [fetchBalances, yam])\n\n  return (\n    <Context.Provider value={{\n      setConfirmTxModalIsOpen,\n      earnedStxpPoolBalance,\n      isHarvesting,\n      isRedeeming,\n      isStaking,\n      isUnstaking,\n      onHarvest: handleHarvest,\n      onRedeem: handleRedeem,\n      onStake: handleStake,\n      onUnstake: handleUnstake,\n      getIncentivizerAddress,\n      totalStaked,\n      strnTokenAddress: addresses.strnTokenAddress,\n      endTime,\n      withdrawStakeAmount,\n      lastExpiringStake,\n      userStakes\n    }}>\n      {children}\n      <ConfirmTransactionModal isOpen={confirmTxModalIsOpen} />\n    </Context.Provider>\n  )\n}\n\nexport default Provider"]},"metadata":{},"sourceType":"module"}