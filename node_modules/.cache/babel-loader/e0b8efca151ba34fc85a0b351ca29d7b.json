{"ast":null,"code":"var _jsxFileName = \"/Users/hienle/Documents/GitHub/comfortNFT/src/contexts/Vesting/Provider.tsx\";\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { useWallet } from 'use-wallet';\nimport useYam from 'hooks/useYam';\nimport { claimVested, currUnclaimedMigratorVesting, currUnclaimedDelegatorRewards, currVested } from 'yam-sdk/utils';\nimport ConfirmTransactionModal from 'components/ConfirmTransactionModal';\nimport Context from './Context';\n\nconst Provider = ({\n  children\n}) => {\n  const {\n    account\n  } = useWallet();\n  const yam = useYam();\n  const [vestedBalance, setVestedBalance] = useState();\n  const [vestedDelegatorRewardBalance, setVestedDelegatorRewardBalance] = useState();\n  const [vestedMigratedBalance, setVestedMigratedBalance] = useState();\n  const [isClaiming, setIsClaiming] = useState(false);\n  const [confirmTxModalIsOpen, setConfirmtxModalIsOpen] = useState(false);\n  const fetchVestedBalances = useCallback(async () => {\n    const vBal = await currVested(yam, account);\n    const dRVBal = await currUnclaimedDelegatorRewards(yam, account);\n    const mVBal = await currUnclaimedMigratorVesting(yam, account);\n    setVestedBalance(vBal);\n    setVestedDelegatorRewardBalance(dRVBal);\n    setVestedMigratedBalance(mVBal);\n  }, [account, setVestedBalance, setVestedDelegatorRewardBalance, setVestedMigratedBalance, yam]);\n  const handleClaimTxSent = useCallback(() => {\n    setIsClaiming(true);\n    setConfirmtxModalIsOpen(false);\n  }, [setIsClaiming, setConfirmtxModalIsOpen]);\n  const handleClaim = useCallback(async () => {\n    setConfirmtxModalIsOpen(true);\n    await claimVested(yam, account, handleClaimTxSent);\n    setIsClaiming(false);\n  }, [account, handleClaimTxSent, setConfirmtxModalIsOpen, setIsClaiming, yam]);\n  useEffect(() => {\n    if (account && yam) {\n      fetchVestedBalances();\n    }\n  }, [account, fetchVestedBalances, yam]);\n  useEffect(() => {\n    if (account && yam) {\n      fetchVestedBalances();\n      let refreshInterval = setInterval(fetchVestedBalances, 10000);\n      return () => clearInterval(refreshInterval);\n    }\n  }, [account, yam, fetchVestedBalances]);\n  return /*#__PURE__*/React.createElement(Context.Provider, {\n    value: {\n      onClaim: handleClaim,\n      isClaiming,\n      vestedBalance,\n      vestedDelegatorRewardBalance,\n      vestedMigratedBalance\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 5\n    }\n  }, children, /*#__PURE__*/React.createElement(ConfirmTransactionModal, {\n    isOpen: confirmTxModalIsOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default Provider;","map":{"version":3,"sources":["/Users/hienle/Documents/GitHub/comfortNFT/src/contexts/Vesting/Provider.tsx"],"names":["React","useCallback","useEffect","useState","useWallet","useYam","claimVested","currUnclaimedMigratorVesting","currUnclaimedDelegatorRewards","currVested","ConfirmTransactionModal","Context","Provider","children","account","yam","vestedBalance","setVestedBalance","vestedDelegatorRewardBalance","setVestedDelegatorRewardBalance","vestedMigratedBalance","setVestedMigratedBalance","isClaiming","setIsClaiming","confirmTxModalIsOpen","setConfirmtxModalIsOpen","fetchVestedBalances","vBal","dRVBal","mVBal","handleClaimTxSent","handleClaim","refreshInterval","setInterval","clearInterval","onClaim"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react'\n\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from 'use-wallet'\n\nimport useYam from 'hooks/useYam'\nimport { \n  claimVested,\n  currUnclaimedMigratorVesting,\n  currUnclaimedDelegatorRewards,\n  currVested,\n} from 'yam-sdk/utils'\n\nimport ConfirmTransactionModal from 'components/ConfirmTransactionModal'\n\nimport Context from './Context'\n\nconst Provider: React.FC = ({ children }) => {\n  const { account } = useWallet()\n  const yam = useYam()\n\n  const [vestedBalance, setVestedBalance] = useState<BigNumber>()\n  const [vestedDelegatorRewardBalance, setVestedDelegatorRewardBalance] = useState<BigNumber>()\n  const [vestedMigratedBalance, setVestedMigratedBalance] = useState<BigNumber>()\n\n  const [isClaiming, setIsClaiming] = useState(false)\n  const [confirmTxModalIsOpen, setConfirmtxModalIsOpen] = useState(false)\n\n  const fetchVestedBalances = useCallback(async () => {\n    const vBal = await currVested(yam, account)\n    const dRVBal = await currUnclaimedDelegatorRewards(yam, account)\n    const mVBal = await currUnclaimedMigratorVesting(yam, account)\n    setVestedBalance(vBal)\n    setVestedDelegatorRewardBalance(dRVBal)\n    setVestedMigratedBalance(mVBal)\n  }, [\n    account,\n    setVestedBalance,\n    setVestedDelegatorRewardBalance,\n    setVestedMigratedBalance,\n    yam,\n  ])\n\n  const handleClaimTxSent = useCallback(() => {\n    setIsClaiming(true)\n    setConfirmtxModalIsOpen(false)\n  }, [\n    setIsClaiming,\n    setConfirmtxModalIsOpen\n  ])\n\n  const handleClaim = useCallback(async () => {\n    setConfirmtxModalIsOpen(true)\n    await claimVested(yam, account, handleClaimTxSent)\n    setIsClaiming(false)\n  }, [\n    account,\n    handleClaimTxSent,\n    setConfirmtxModalIsOpen,\n    setIsClaiming,\n    yam\n  ])\n\n  useEffect(() => {\n    if (account && yam) {\n      fetchVestedBalances()\n    }\n  }, [\n    account,\n    fetchVestedBalances,\n    yam,\n  ])\n\n  useEffect(() => {\n    if (account && yam) {\n      fetchVestedBalances()\n      let refreshInterval = setInterval(fetchVestedBalances, 10000)\n      return () => clearInterval(refreshInterval)\n    }\n  }, [\n    account,\n    yam,\n    fetchVestedBalances,\n  ])\n\n  return (\n    <Context.Provider value={{\n      onClaim: handleClaim,\n      isClaiming,\n      vestedBalance,\n      vestedDelegatorRewardBalance,\n      vestedMigratedBalance,\n    }}>\n      {children}\n      <ConfirmTransactionModal isOpen={confirmTxModalIsOpen} />\n    </Context.Provider>\n  )\n}\n\nexport default Provider\n"]},"metadata":{},"sourceType":"module"}