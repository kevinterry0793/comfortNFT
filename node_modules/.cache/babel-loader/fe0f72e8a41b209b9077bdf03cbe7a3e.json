{"ast":null,"code":"var _jsxFileName = \"/Users/hienle/Documents/GitHub/comfortNFT/src/views/Common/StyledNft.tsx\";\nimport { attributeNames, DEFAULT_NFT_SIZE, POOL_NAMES, PoolIds, ENABLE_BURN_REWARDS_AMOUNT } from \"constants/poolValues\";\nimport useStrainNfts from \"hooks/useStrainNfts\";\nimport React, { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { Spacer } from \"react-neu\";\nimport numeral from \"numeral\";\nimport styled from \"styled-components\";\nimport { Tooltip } from \"react-lightweight-tooltip\";\nimport StyledPrimaryButton from \"./StyledButton\";\nimport AdditionalStakeModal from \"views/Modals/AdditionalStakeModal\";\nimport useBalances from \"hooks/useBalances\";\n\nconst StyledNft = ({\n  nft,\n  isDispensary = false,\n  isBurnOldNftsPage = false\n}) => {\n  var _updatedNft$attribs3;\n\n  const [isNftLoading, setIsNftLoading] = useState(false);\n  const [updatedNft, setUpdatedNft] = useState();\n  const [canBurn, setCanBurn] = useState(false);\n  const [addStakeModalIsOpen, setAddStakeModalIsOpen] = useState(false);\n  const {\n    onRetrieve,\n    onRetrieveOld,\n    onDestroyNft,\n    earnedStrnBalance,\n    isAdding,\n    onAddNftStake\n  } = useStrainNfts();\n  const {\n    strnEthLpBalance,\n    strnXiotLpBalance\n  } = useBalances();\n  const poolName = useMemo(() => POOL_NAMES[Number(nft === null || nft === void 0 ? void 0 : nft.poolId)], [nft === null || nft === void 0 ? void 0 : nft.poolId]);\n  useEffect(() => {\n    if (nft && !updatedNft) {\n      setIsNftLoading(true);\n      onRetrieve(nft).then(updated => {\n        setUpdatedNft(updated);\n        setIsNftLoading(false);\n      }).catch(e => {\n        console.error(e);\n        setIsNftLoading(false);\n      });\n    }\n  }, [nft === null || nft === void 0 ? void 0 : nft.nftId, updatedNft]);\n  useEffect(() => {\n    if (earnedStrnBalance === undefined) return setCanBurn(false);\n    setCanBurn(earnedStrnBalance.lte(ENABLE_BURN_REWARDS_AMOUNT));\n  }, [earnedStrnBalance]);\n\n  const getAttribute = name => {\n    var _updatedNft$attribs;\n\n    if (!updatedNft) return \"-\";\n    const attributes = updatedNft === null || updatedNft === void 0 ? void 0 : (_updatedNft$attribs = updatedNft.attribs) === null || _updatedNft$attribs === void 0 ? void 0 : _updatedNft$attribs.attributes;\n    if (!attributes) return \"-\";\n    const found = attributes.find(a => a.trait_type === name);\n    if (!found) return \"-\";\n    return found.value;\n  };\n\n  const getName = () => {\n    var _updatedNft$attribs2;\n\n    if (!nft) return \"-\";\n    if (nft === null || nft === void 0 ? void 0 : nft.nftName) return nft === null || nft === void 0 ? void 0 : nft.nftName;\n    return updatedNft === null || updatedNft === void 0 ? void 0 : (_updatedNft$attribs2 = updatedNft.attribs) === null || _updatedNft$attribs2 === void 0 ? void 0 : _updatedNft$attribs2.name;\n  };\n\n  const handelUnstake = () => {\n    if (!(nft === null || nft === void 0 ? void 0 : nft.poolId)) {\n      console.error(\"for some reason the nft doesn't have a pool id\");\n      return;\n    }\n\n    onDestroyNft(nft.poolId, nft);\n  };\n\n  const handleAddStakeClick = useCallback(() => {\n    setAddStakeModalIsOpen(true);\n  }, [setAddStakeModalIsOpen]);\n  const handleDismissStakeModal = useCallback(() => {\n    setAddStakeModalIsOpen(false);\n  }, [setAddStakeModalIsOpen]);\n  const handleOnAdditionalStake = useCallback((amount, stxpAmount) => {\n    const poolId = (nft === null || nft === void 0 ? void 0 : nft.poolId) || \"0\"; // assume pool 0, nft?.poolId should always be populated\n\n    onAddNftStake(poolId, nft.nftId, amount, stxpAmount);\n    handleDismissStakeModal();\n  }, [handleDismissStakeModal, onAddNftStake]);\n  const walletBalance = useMemo(() => {\n    // need better way to get specific pool balance\n    return nft.poolId === \"0\" ? strnEthLpBalance : strnXiotLpBalance;\n  }, [strnEthLpBalance, strnXiotLpBalance]);\n  const formattedLPBalance = useMemo(() => {\n    if (nft && (nft === null || nft === void 0 ? void 0 : nft.lpBalance)) {\n      if (PoolIds.STRN_ETH === nft.poolId) return numeral(nft.lpBalance).format(\"0.00a\");else return nft.lpBalance.toFixed(8);\n    } else {\n      return \"--\";\n    }\n  }, [nft]);\n  const greenRoundedStyle = {\n    content: {\n      backgroundColor: \"hsl(215deg 70.4% 33.1% / 100%)\",\n      color: \"#FFFFFF\",\n      fontWeight: 600\n    },\n    wrapper: {},\n    gap: {},\n    tooltip: {\n      backgroundColor: \"hsl(215deg 70.4% 33.1% / 100%)\",\n      borderRadius: \"10px\"\n    },\n    arrow: {\n      borderTop: \"solid hsl(215deg 70.4% 33.1% / 100%) 5px\"\n    }\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(NFTCard, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }\n  }, !isNftLoading && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(StyledHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(StyledTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 15\n    }\n  }, getName()), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 15\n    }\n  }, \"#\", getAttribute(attributeNames.MINTED))), /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }\n  }, getAttribute(attributeNames.VIBES)), /*#__PURE__*/React.createElement(Spacer, {\n    size: \"sm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"img\", {\n    src: updatedNft === null || updatedNft === void 0 ? void 0 : (_updatedNft$attribs3 = updatedNft.attribs) === null || _updatedNft$attribs3 === void 0 ? void 0 : _updatedNft$attribs3.image,\n    height: DEFAULT_NFT_SIZE,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Spacer, {\n    size: \"sm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(RarityPill, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }\n  }, getAttribute(attributeNames.RARITY)), /*#__PURE__*/React.createElement(StyledInfo, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Tooltip, {\n    styles: greenRoundedStyle,\n    content: isDispensary ? `Buy / Sell Your NFT ${nft.nftName}` : !canBurn ? \"In order to burn your NFT, you must first claim your rewards.\" : \"Burning will release your LP tokens\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 15\n    }\n  }, isDispensary ? /*#__PURE__*/React.createElement(StyledPrimaryButton // onClick={}\n  // disabled={}\n  , {\n    text: \"Buy\",\n    size: \"sm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 33\n    }\n  }) : /*#__PURE__*/React.createElement(StyledPrimaryButton, {\n    onClick: handelUnstake,\n    disabled: nft.isDestroying || !canBurn,\n    text: !canBurn ? \"Claim first (i)\" : nft.isDestroying ? \"Burning ...\" : \"Burn\",\n    size: \"sm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 22\n    }\n  })), /*#__PURE__*/React.createElement(StyledLabels, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(StyledLpLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 19\n    }\n  }, poolName), /*#__PURE__*/React.createElement(StyledValue, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 19\n    }\n  }, (nft === null || nft === void 0 ? void 0 : nft.lpBalance) ? formattedLPBalance : \"-\")), isBurnOldNftsPage ? null : /*#__PURE__*/React.createElement(StyledPrimaryButton, {\n    text: isAdding ? \"...\" : \"+\",\n    onClick: handleAddStakeClick,\n    size: \"sm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 45\n    }\n  })))), isNftLoading && /*#__PURE__*/React.createElement(StyledLoading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 26\n    }\n  }, \"Loading ...\")), /*#__PURE__*/React.createElement(AdditionalStakeModal, {\n    isOpen: addStakeModalIsOpen,\n    onDismiss: handleDismissStakeModal,\n    onAddStake: handleOnAdditionalStake,\n    label: `${getAttribute(attributeNames.LP_TYPE)} UNI-V2 LP`,\n    fullBalance: walletBalance,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Spacer, {\n    size: \"md\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst StyledLpLabel = styled.div`\n  display: flex;\n  flex-flow: column nowrap;\n  margin-right: 0.5rem;\n`;\nconst StyledHeader = styled.div`\n  margin: 0 1rem;\n  display: flex;\n  justify-content: space-between;\n`;\nconst StyledTitle = styled.h3`\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n`;\nconst NFTCard = styled.div`\n  display: flex;\n  flex-flow: column;\n  width: 300px;\n  max-height: 450px;\n  background-color: #0e2b52;\n  border-radius: 20px;\n  color: white;\n  text-align: center;\n  display: inline-block !important;\n  margin: 1rem;\n`;\nconst RarityPill = styled.button`\n  width: 100px;\n  height: 26px;\n  background-color: #7af7b6;\n  border: 0;\n  border-radius: 6px;\n  font-family: Gopher;\n`;\nconst StyledLoading = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n`;\nconst StyledInfo = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin: 1rem;\n`;\nconst StyledLabels = styled.div`\n  display: flex;\n  flex-flow: row wrap;\n  justify-content: flex-start;\n\n  > div {\n    width: unset;\n  }\n`;\nconst StyledValue = styled.span`\n  font-size: 18px;\n  font-weight: 600;\n`;\nexport default StyledNft;","map":{"version":3,"sources":["/Users/hienle/Documents/GitHub/comfortNFT/src/views/Common/StyledNft.tsx"],"names":["attributeNames","DEFAULT_NFT_SIZE","POOL_NAMES","PoolIds","ENABLE_BURN_REWARDS_AMOUNT","useStrainNfts","React","useCallback","useEffect","useMemo","useState","Spacer","numeral","styled","Tooltip","StyledPrimaryButton","AdditionalStakeModal","useBalances","StyledNft","nft","isDispensary","isBurnOldNftsPage","isNftLoading","setIsNftLoading","updatedNft","setUpdatedNft","canBurn","setCanBurn","addStakeModalIsOpen","setAddStakeModalIsOpen","onRetrieve","onRetrieveOld","onDestroyNft","earnedStrnBalance","isAdding","onAddNftStake","strnEthLpBalance","strnXiotLpBalance","poolName","Number","poolId","then","updated","catch","e","console","error","nftId","undefined","lte","getAttribute","name","attributes","attribs","found","find","a","trait_type","value","getName","nftName","handelUnstake","handleAddStakeClick","handleDismissStakeModal","handleOnAdditionalStake","amount","stxpAmount","walletBalance","formattedLPBalance","lpBalance","STRN_ETH","format","toFixed","greenRoundedStyle","content","backgroundColor","color","fontWeight","wrapper","gap","tooltip","borderRadius","arrow","borderTop","MINTED","VIBES","image","RARITY","isDestroying","LP_TYPE","StyledLpLabel","div","StyledHeader","StyledTitle","h3","NFTCard","RarityPill","button","StyledLoading","StyledInfo","StyledLabels","StyledValue","span"],"mappings":";AAAA,SACEA,cADF,EAGEC,gBAHF,EAIEC,UAJF,EAKEC,OALF,EAMEC,0BANF,QAOO,sBAPP;AAQA,OAAOC,aAAP,MAA0B,qBAA1B;AACA,OAAOC,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,OAAxC,EAAiDC,QAAjD,QAAiE,OAAjE;AAEA,SAASC,MAAT,QAAuB,WAAvB;AACA,OAAOC,OAAP,MAAoB,SAApB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,OAAT,QAAwB,2BAAxB;AACA,OAAOC,mBAAP,MAAgC,gBAAhC;AACA,OAAOC,oBAAP,MAAiC,mCAAjC;AACA,OAAOC,WAAP,MAAwB,mBAAxB;;AAEA,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA,GAAF;AAAOC,EAAAA,YAAY,GAAG,KAAtB;AAA6BC,EAAAA,iBAAiB,GAAG;AAAjD,CAAD,KAAwI;AAAA;;AACxJ,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCb,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAM,CAACc,UAAD,EAAaC,aAAb,IAA8Bf,QAAQ,EAA5C;AACA,QAAM,CAACgB,OAAD,EAAUC,UAAV,IAAwBjB,QAAQ,CAAU,KAAV,CAAtC;AACA,QAAM,CAACkB,mBAAD,EAAsBC,sBAAtB,IAAgDnB,QAAQ,CAC5D,KAD4D,CAA9D;AAIA,QAAM;AACJoB,IAAAA,UADI;AAEJC,IAAAA,aAFI;AAGJC,IAAAA,YAHI;AAIJC,IAAAA,iBAJI;AAKJC,IAAAA,QALI;AAMJC,IAAAA;AANI,MAOF9B,aAAa,EAPjB;AASA,QAAM;AAAE+B,IAAAA,gBAAF;AAAoBC,IAAAA;AAApB,MAA0CpB,WAAW,EAA3D;AAEA,QAAMqB,QAAQ,GAAG7B,OAAO,CAAC,MAAMP,UAAU,CAACqC,MAAM,CAACpB,GAAD,aAACA,GAAD,uBAACA,GAAG,CAAEqB,MAAN,CAAP,CAAjB,EAAwC,CAC9DrB,GAD8D,aAC9DA,GAD8D,uBAC9DA,GAAG,CAAEqB,MADyD,CAAxC,CAAxB;AAIAhC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIW,GAAG,IAAI,CAACK,UAAZ,EAAwB;AACtBD,MAAAA,eAAe,CAAC,IAAD,CAAf;AACAO,MAAAA,UAAU,CAACX,GAAD,CAAV,CACGsB,IADH,CACSC,OAAD,IAA0B;AAC9BjB,QAAAA,aAAa,CAACiB,OAAD,CAAb;AACAnB,QAAAA,eAAe,CAAC,KAAD,CAAf;AACD,OAJH,EAKGoB,KALH,CAKUC,CAAD,IAAc;AACnBC,QAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACArB,QAAAA,eAAe,CAAC,KAAD,CAAf;AACD,OARH;AASD;AACF,GAbQ,EAaN,CAACJ,GAAD,aAACA,GAAD,uBAACA,GAAG,CAAE4B,KAAN,EAAavB,UAAb,CAbM,CAAT;AAeAhB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIyB,iBAAiB,KAAKe,SAA1B,EAAqC,OAAOrB,UAAU,CAAC,KAAD,CAAjB;AACrCA,IAAAA,UAAU,CAACM,iBAAiB,CAACgB,GAAlB,CAAsB7C,0BAAtB,CAAD,CAAV;AACD,GAHQ,EAGN,CAAC6B,iBAAD,CAHM,CAAT;;AAKA,QAAMiB,YAAY,GAAIC,IAAD,IAA0B;AAAA;;AAC7C,QAAI,CAAC3B,UAAL,EAAiB,OAAO,GAAP;AACjB,UAAM4B,UAAU,GAAG5B,UAAH,aAAGA,UAAH,8CAAGA,UAAU,CAAE6B,OAAf,wDAAG,oBAAqBD,UAAxC;AACA,QAAI,CAACA,UAAL,EAAiB,OAAO,GAAP;AACjB,UAAME,KAAK,GAAGF,UAAU,CAACG,IAAX,CAAiBC,CAAD,IAAOA,CAAC,CAACC,UAAF,KAAiBN,IAAxC,CAAd;AACA,QAAI,CAACG,KAAL,EAAY,OAAO,GAAP;AACZ,WAAOA,KAAK,CAACI,KAAb;AACD,GAPD;;AASA,QAAMC,OAAO,GAAG,MAAM;AAAA;;AACpB,QAAI,CAACxC,GAAL,EAAU,OAAO,GAAP;AACV,QAAIA,GAAJ,aAAIA,GAAJ,uBAAIA,GAAG,CAAEyC,OAAT,EAAkB,OAAOzC,GAAP,aAAOA,GAAP,uBAAOA,GAAG,CAAEyC,OAAZ;AAClB,WAAOpC,UAAP,aAAOA,UAAP,+CAAOA,UAAU,CAAE6B,OAAnB,yDAAO,qBAAqBF,IAA5B;AACD,GAJD;;AAMA,QAAMU,aAAa,GAAG,MAAM;AAC1B,QAAI,EAAC1C,GAAD,aAACA,GAAD,uBAACA,GAAG,CAAEqB,MAAN,CAAJ,EAAkB;AAChBK,MAAAA,OAAO,CAACC,KAAR,CAAc,gDAAd;AACA;AACD;;AACDd,IAAAA,YAAY,CAACb,GAAG,CAACqB,MAAL,EAAarB,GAAb,CAAZ;AACD,GAND;;AAQA,QAAM2C,mBAAmB,GAAGvD,WAAW,CAAC,MAAM;AAC5CsB,IAAAA,sBAAsB,CAAC,IAAD,CAAtB;AACD,GAFsC,EAEpC,CAACA,sBAAD,CAFoC,CAAvC;AAIA,QAAMkC,uBAAuB,GAAGxD,WAAW,CAAC,MAAM;AAChDsB,IAAAA,sBAAsB,CAAC,KAAD,CAAtB;AACD,GAF0C,EAExC,CAACA,sBAAD,CAFwC,CAA3C;AAIA,QAAMmC,uBAAuB,GAAGzD,WAAW,CACzC,CAAC0D,MAAD,EAAiBC,UAAjB,KAAwC;AACtC,UAAM1B,MAAM,GAAG,CAAArB,GAAG,SAAH,IAAAA,GAAG,WAAH,YAAAA,GAAG,CAAEqB,MAAL,KAAe,GAA9B,CADsC,CACH;;AACnCL,IAAAA,aAAa,CAACK,MAAD,EAASrB,GAAG,CAAC4B,KAAb,EAAoBkB,MAApB,EAA4BC,UAA5B,CAAb;AACAH,IAAAA,uBAAuB;AACxB,GALwC,EAMzC,CAACA,uBAAD,EAA0B5B,aAA1B,CANyC,CAA3C;AASA,QAAMgC,aAAa,GAAG1D,OAAO,CAAC,MAAM;AAClC;AACA,WAAOU,GAAG,CAACqB,MAAJ,KAAe,GAAf,GAAqBJ,gBAArB,GAAwCC,iBAA/C;AACD,GAH4B,EAG1B,CAACD,gBAAD,EAAmBC,iBAAnB,CAH0B,CAA7B;AAKA,QAAM+B,kBAAkB,GAAG3D,OAAO,CAAC,MAAM;AACvC,QAAIU,GAAG,KAAIA,GAAJ,aAAIA,GAAJ,uBAAIA,GAAG,CAAEkD,SAAT,CAAP,EAA2B;AACzB,UAAIlE,OAAO,CAACmE,QAAR,KAAqBnD,GAAG,CAACqB,MAA7B,EACE,OAAO5B,OAAO,CAACO,GAAG,CAACkD,SAAL,CAAP,CAAuBE,MAAvB,CAA8B,OAA9B,CAAP,CADF,KAEK,OAAOpD,GAAG,CAACkD,SAAJ,CAAcG,OAAd,CAAsB,CAAtB,CAAP;AACN,KAJD,MAIO;AACL,aAAO,IAAP;AACD;AACF,GARiC,EAQ/B,CAACrD,GAAD,CAR+B,CAAlC;AAUA,QAAMsD,iBAAiB,GAAG;AACxBC,IAAAA,OAAO,EAAE;AACPC,MAAAA,eAAe,EAAE,gCADV;AAEPC,MAAAA,KAAK,EAAE,SAFA;AAGPC,MAAAA,UAAU,EAAE;AAHL,KADe;AAMxBC,IAAAA,OAAO,EAAE,EANe;AAOxBC,IAAAA,GAAG,EAAE,EAPmB;AAQxBC,IAAAA,OAAO,EAAE;AACPL,MAAAA,eAAe,EAAE,gCADV;AAEPM,MAAAA,YAAY,EAAE;AAFP,KARe;AAYxBC,IAAAA,KAAK,EAAE;AACLC,MAAAA,SAAS,EAAE;AADN;AAZiB,GAA1B;AAiBA,sBACE,uDACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAAC7D,YAAD,iBACC,uDACE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAcqC,OAAO,EAArB,CADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAMT,YAAY,CAAClD,cAAc,CAACoF,MAAhB,CAAlB,CAFF,CADF,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKlC,YAAY,CAAClD,cAAc,CAACqF,KAAhB,CAAjB,CALF,eAME,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,IAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,eAOE;AAAK,IAAA,GAAG,EAAE7D,UAAF,aAAEA,UAAF,+CAAEA,UAAU,CAAE6B,OAAd,yDAAE,qBAAqBiC,KAA/B;AAAsC,IAAA,MAAM,EAAErF,gBAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,eAQE,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,IAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,eASE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAaiD,YAAY,CAAClD,cAAc,CAACuF,MAAhB,CAAzB,CATF,eAUE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,OAAD;AACE,IAAA,MAAM,EAAEd,iBADV;AAEE,IAAA,OAAO,EACLrD,YAAY,GAAI,uBAAsBD,GAAG,CAACyC,OAAQ,EAAtC,GAA0C,CAAClC,OAAD,GAClD,+DADkD,GAElD,qCALR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQGN,YAAY,gBAAG,oBAAC,mBAAD,CACd;AACA;AAFc;AAGd,IAAA,IAAI,EACF,KAJY;AAMd,IAAA,IAAI,EAAC,IANS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,gBAOR,oBAAC,mBAAD;AACH,IAAA,OAAO,EAAEyC,aADN;AAEH,IAAA,QAAQ,EAAE1C,GAAG,CAACqE,YAAJ,IAAoB,CAAC9D,OAF5B;AAGH,IAAA,IAAI,EACF,CAACA,OAAD,GACI,iBADJ,GAEIP,GAAG,CAACqE,YAAJ,GACA,aADA,GAEA,MARH;AAUH,IAAA,IAAI,EAAC,IAVF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAfP,CADF,eA6BE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMlD,QAAN,CADF,eAEE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAAAnB,GAAG,SAAH,IAAAA,GAAG,WAAH,YAAAA,GAAG,CAAEkD,SAAL,IAAiBD,kBAAjB,GAAsC,GADzC,CAFF,CADF,EAOG/C,iBAAiB,GAAG,IAAH,gBAAU,oBAAC,mBAAD;AAC1B,IAAA,IAAI,EAAEa,QAAQ,GAAG,KAAH,GAAW,GADC;AAE1B,IAAA,OAAO,EAAE4B,mBAFiB;AAG1B,IAAA,IAAI,EAAE,IAHoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAP9B,CA7BF,CAVF,CAFJ,EAyDGxC,YAAY,iBAAI,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAzDnB,CADF,eA4DE,oBAAC,oBAAD;AACE,IAAA,MAAM,EAAEM,mBADV;AAEE,IAAA,SAAS,EAAEmC,uBAFb;AAGE,IAAA,UAAU,EAAEC,uBAHd;AAIE,IAAA,KAAK,EAAG,GAAEd,YAAY,CAAClD,cAAc,CAACyF,OAAhB,CAAyB,YAJjD;AAKE,IAAA,WAAW,EAAEtB,aALf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA5DF,eAmEE,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,IAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAnEF,CADF;AAuED,CA1LD;;AA4LA,MAAMuB,aAAa,GAAG7E,MAAM,CAAC8E,GAAI;AACjC;AACA;AACA;AACA,CAJA;AAMA,MAAMC,YAAY,GAAG/E,MAAM,CAAC8E,GAAI;AAChC;AACA;AACA;AACA,CAJA;AAMA,MAAME,WAAW,GAAGhF,MAAM,CAACiF,EAAG;AAC9B;AACA;AACA;AACA,CAJA;AAMA,MAAMC,OAAO,GAAGlF,MAAM,CAAC8E,GAAI;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAXA;AAYA,MAAMK,UAAU,GAAGnF,MAAM,CAACoF,MAAO;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,CAPA;AASA,MAAMC,aAAa,GAAGrF,MAAM,CAAC8E,GAAI;AACjC;AACA;AACA;AACA;AACA;AACA,CANA;AAQA,MAAMQ,UAAU,GAAGtF,MAAM,CAAC8E,GAAI;AAC9B;AACA;AACA;AACA;AACA,CALA;AAOA,MAAMS,YAAY,GAAGvF,MAAM,CAAC8E,GAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CARA;AAUA,MAAMU,WAAW,GAAGxF,MAAM,CAACyF,IAAK;AAChC;AACA;AACA,CAHA;AAKA,eAAepF,SAAf","sourcesContent":["import {\n  attributeNames,\n  NftInstance,\n  DEFAULT_NFT_SIZE,\n  POOL_NAMES,\n  PoolIds,\n  ENABLE_BURN_REWARDS_AMOUNT,\n} from \"constants/poolValues\";\nimport useStrainNfts from \"hooks/useStrainNfts\";\nimport React, { useCallback, useEffect, useMemo, useState } from \"react\";\n\nimport { Spacer } from \"react-neu\";\nimport numeral from \"numeral\";\nimport styled from \"styled-components\";\nimport { Tooltip } from \"react-lightweight-tooltip\";\nimport StyledPrimaryButton from \"./StyledButton\";\nimport AdditionalStakeModal from \"views/Modals/AdditionalStakeModal\";\nimport useBalances from \"hooks/useBalances\";\n\nconst StyledNft = ({ nft, isDispensary = false, isBurnOldNftsPage = false}: { nft: NftInstance, isDispensary?: Boolean, isBurnOldNftsPage?: Boolean }) => {\n  const [isNftLoading, setIsNftLoading] = useState(false);\n  const [updatedNft, setUpdatedNft] = useState<NftInstance>();\n  const [canBurn, setCanBurn] = useState<boolean>(false);\n  const [addStakeModalIsOpen, setAddStakeModalIsOpen] = useState<boolean>(\n    false\n  );\n\n  const {\n    onRetrieve,\n    onRetrieveOld,\n    onDestroyNft,\n    earnedStrnBalance,\n    isAdding,\n    onAddNftStake,\n  } = useStrainNfts();\n\n  const { strnEthLpBalance, strnXiotLpBalance } = useBalances();\n\n  const poolName = useMemo(() => POOL_NAMES[Number(nft?.poolId)], [\n    nft?.poolId,\n  ]);\n\n  useEffect(() => {\n    if (nft && !updatedNft) {\n      setIsNftLoading(true);\n      onRetrieve(nft)\n        .then((updated: NftInstance) => {\n          setUpdatedNft(updated);\n          setIsNftLoading(false);\n        })\n        .catch((e: Error) => {\n          console.error(e);\n          setIsNftLoading(false);\n        });\n    }\n  }, [nft?.nftId, updatedNft]);\n\n  useEffect(() => {\n    if (earnedStrnBalance === undefined) return setCanBurn(false);\n    setCanBurn(earnedStrnBalance.lte(ENABLE_BURN_REWARDS_AMOUNT));\n  }, [earnedStrnBalance]);\n\n  const getAttribute = (name: string): string => {\n    if (!updatedNft) return \"-\";\n    const attributes = updatedNft?.attribs?.attributes;\n    if (!attributes) return \"-\";\n    const found = attributes.find((a) => a.trait_type === name);\n    if (!found) return \"-\";\n    return found.value;\n  };\n\n  const getName = () => {\n    if (!nft) return \"-\";\n    if (nft?.nftName) return nft?.nftName;\n    return updatedNft?.attribs?.name;\n  };\n\n  const handelUnstake = () => {\n    if (!nft?.poolId) {\n      console.error(\"for some reason the nft doesn't have a pool id\");\n      return;\n    }\n    onDestroyNft(nft.poolId, nft);\n  };\n\n  const handleAddStakeClick = useCallback(() => {\n    setAddStakeModalIsOpen(true);\n  }, [setAddStakeModalIsOpen]);\n\n  const handleDismissStakeModal = useCallback(() => {\n    setAddStakeModalIsOpen(false);\n  }, [setAddStakeModalIsOpen]);\n\n  const handleOnAdditionalStake = useCallback(\n    (amount: string, stxpAmount: string) => {\n      const poolId = nft?.poolId || \"0\"; // assume pool 0, nft?.poolId should always be populated\n      onAddNftStake(poolId, nft.nftId, amount, stxpAmount);\n      handleDismissStakeModal();\n    },\n    [handleDismissStakeModal, onAddNftStake]\n  );\n\n  const walletBalance = useMemo(() => {\n    // need better way to get specific pool balance\n    return nft.poolId === \"0\" ? strnEthLpBalance : strnXiotLpBalance;\n  }, [strnEthLpBalance, strnXiotLpBalance]);\n\n  const formattedLPBalance = useMemo(() => {\n    if (nft && nft?.lpBalance) {\n      if (PoolIds.STRN_ETH === nft.poolId)\n        return numeral(nft.lpBalance).format(\"0.00a\");\n      else return nft.lpBalance.toFixed(8);\n    } else {\n      return \"--\";\n    }\n  }, [nft]);\n\n  const greenRoundedStyle = {\n    content: {\n      backgroundColor: \"hsl(215deg 70.4% 33.1% / 100%)\",\n      color: \"#FFFFFF\",\n      fontWeight: 600,\n    },\n    wrapper: {},\n    gap: {},\n    tooltip: {\n      backgroundColor: \"hsl(215deg 70.4% 33.1% / 100%)\",\n      borderRadius: \"10px\",\n    },\n    arrow: {\n      borderTop: \"solid hsl(215deg 70.4% 33.1% / 100%) 5px\",\n    },\n  };\n\n  return (\n    <>\n      <NFTCard>\n        {!isNftLoading && (\n          <>\n            <StyledHeader>\n              <StyledTitle>{getName()}</StyledTitle>\n              <h3>#{getAttribute(attributeNames.MINTED)}</h3>\n            </StyledHeader>\n            <h4>{getAttribute(attributeNames.VIBES)}</h4>\n            <Spacer size=\"sm\" />\n            <img src={updatedNft?.attribs?.image} height={DEFAULT_NFT_SIZE} />\n            <Spacer size=\"sm\" />\n            <RarityPill>{getAttribute(attributeNames.RARITY)}</RarityPill>\n            <StyledInfo>\n              <Tooltip\n                styles={greenRoundedStyle}\n                content={\n                  isDispensary ? `Buy / Sell Your NFT ${nft.nftName}` : !canBurn\n                    ? \"In order to burn your NFT, you must first claim your rewards.\"\n                    : \"Burning will release your LP tokens\"\n                }\n              >\n                {isDispensary ? <StyledPrimaryButton\n                  // onClick={}\n                  // disabled={}\n                  text={\n                    \"Buy\"\n                  }\n                  size=\"sm\"\n                /> : <StyledPrimaryButton\n                  onClick={handelUnstake}\n                  disabled={nft.isDestroying || !canBurn}\n                  text={\n                    !canBurn\n                      ? \"Claim first (i)\"\n                      : nft.isDestroying\n                      ? \"Burning ...\"\n                      : \"Burn\"\n                  }\n                  size=\"sm\"\n                />}\n              </Tooltip>\n              <StyledLabels>\n                <StyledLpLabel>\n                  <div>{poolName}</div>\n                  <StyledValue>\n                    {nft?.lpBalance ? formattedLPBalance : \"-\"}\n                  </StyledValue>\n                </StyledLpLabel>\n                {isBurnOldNftsPage ? null : <StyledPrimaryButton\n                  text={isAdding ? \"...\" : \"+\"}\n                  onClick={handleAddStakeClick}\n                  size={\"sm\"}\n                />}\n              </StyledLabels>\n            </StyledInfo>\n          </>\n        )}\n        {isNftLoading && <StyledLoading>Loading ...</StyledLoading>}\n      </NFTCard>\n      <AdditionalStakeModal\n        isOpen={addStakeModalIsOpen}\n        onDismiss={handleDismissStakeModal}\n        onAddStake={handleOnAdditionalStake}\n        label={`${getAttribute(attributeNames.LP_TYPE)} UNI-V2 LP`}\n        fullBalance={walletBalance}\n      />\n      <Spacer size=\"md\" />\n    </>\n  );\n};\n\nconst StyledLpLabel = styled.div`\n  display: flex;\n  flex-flow: column nowrap;\n  margin-right: 0.5rem;\n`;\n\nconst StyledHeader = styled.div`\n  margin: 0 1rem;\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst StyledTitle = styled.h3`\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n`;\n\nconst NFTCard = styled.div`\n  display: flex;\n  flex-flow: column;\n  width: 300px;\n  max-height: 450px;\n  background-color: #0e2b52;\n  border-radius: 20px;\n  color: white;\n  text-align: center;\n  display: inline-block !important;\n  margin: 1rem;\n`;\nconst RarityPill = styled.button`\n  width: 100px;\n  height: 26px;\n  background-color: #7af7b6;\n  border: 0;\n  border-radius: 6px;\n  font-family: Gopher;\n`;\n\nconst StyledLoading = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n`;\n\nconst StyledInfo = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin: 1rem;\n`;\n\nconst StyledLabels = styled.div`\n  display: flex;\n  flex-flow: row wrap;\n  justify-content: flex-start;\n\n  > div {\n    width: unset;\n  }\n`;\n\nconst StyledValue = styled.span`\n  font-size: 18px;\n  font-weight: 600;\n`;\n\nexport default StyledNft;\n"]},"metadata":{},"sourceType":"module"}