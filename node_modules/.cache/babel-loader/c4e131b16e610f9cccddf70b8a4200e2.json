{"ast":null,"code":"var _jsxFileName = \"/Users/hienle/Documents/GitHub/comfortNFT/src/views/Greenhouse/components/CarouselNFT.tsx\";\nimport useStrainNfts from \"hooks/useStrainNfts\";\nimport React, { useEffect, useMemo, useState } from \"react\";\nimport { Spacer } from \"react-neu\";\nimport styled from \"styled-components\"; // import StyledPrimaryButton from \"./StyledButton\";\n\nimport useGreenhouse from \"hooks/useGreenhouse\";\n\nconst StyledNft = ({\n  nft,\n  changeParent\n}) => {\n  const [isNftLoading, setIsNftLoading] = useState(false);\n  const [updatedNft, setUpdatedNft] = useState();\n  const {\n    onRetrieve\n  } = useStrainNfts();\n  useEffect(() => {\n    if (nft && !updatedNft) {\n      setIsNftLoading(true);\n      onRetrieve(nft).then(updated => {\n        setUpdatedNft(updated);\n        setIsNftLoading(false);\n      }).catch(e => {\n        console.error(e);\n        setIsNftLoading(false);\n      });\n    }\n  }, [nft, onRetrieve, updatedNft]);\n\n  const getName = () => {\n    var _updatedNft$attribs;\n\n    if (!nft) return \"-\";\n    if (nft === null || nft === void 0 ? void 0 : nft.nftName) return nft === null || nft === void 0 ? void 0 : nft.nftName;\n    return updatedNft === null || updatedNft === void 0 ? void 0 : (_updatedNft$attribs = updatedNft.attribs) === null || _updatedNft$attribs === void 0 ? void 0 : _updatedNft$attribs.name;\n  };\n\n  const getAttribute = name => {\n    var _updatedNft$attribs2;\n\n    if (!updatedNft) return \"-\";\n    const attributes = updatedNft === null || updatedNft === void 0 ? void 0 : (_updatedNft$attribs2 = updatedNft.attribs) === null || _updatedNft$attribs2 === void 0 ? void 0 : _updatedNft$attribs2.attributes;\n    if (!attributes) return \"-\";\n    const found = attributes.find(a => a.trait_type === name);\n    if (!found) return \"-\";\n    return found.value;\n  };\n\n  const {\n    parentOneNftId,\n    setParentOneNftId,\n    parentTwoNftId,\n    setParentTwoNftId\n  } = useGreenhouse();\n  const NFTCarousel = useMemo(() => {\n    if (parentOneNftId === nft.nftId) {\n      var _updatedNft$attribs3;\n\n      return /*#__PURE__*/React.createElement(CarouselNFTWrap, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: updatedNft === null || updatedNft === void 0 ? void 0 : (_updatedNft$attribs3 = updatedNft.attribs) === null || _updatedNft$attribs3 === void 0 ? void 0 : _updatedNft$attribs3.image,\n        height: \"70px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(ParentText, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }\n      }, \"Parent 1\"));\n    } else if (parentTwoNftId === nft.nftId) {\n      var _updatedNft$attribs4;\n\n      return /*#__PURE__*/React.createElement(CarouselNFTWrap, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: updatedNft === null || updatedNft === void 0 ? void 0 : (_updatedNft$attribs4 = updatedNft.attribs) === null || _updatedNft$attribs4 === void 0 ? void 0 : _updatedNft$attribs4.image,\n        height: \"70px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(ParentText, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }\n      }, \"Parent 2\"));\n    } else {\n      var _updatedNft$attribs5;\n\n      return (\n        /*#__PURE__*/\n        // eslint-disable-next-line jsx-a11y/alt-text\n        React.createElement(\"img\", {\n          src: updatedNft === null || updatedNft === void 0 ? void 0 : (_updatedNft$attribs5 = updatedNft.attribs) === null || _updatedNft$attribs5 === void 0 ? void 0 : _updatedNft$attribs5.image,\n          height: \"70px\",\n          onClick: () => {\n            if (!parentOneNftId) {\n              setParentOneNftId(nft.nftId);\n            } else if (parentOneNftId && !parentTwoNftId) {\n              setParentTwoNftId(nft.nftId);\n            } else if (changeParent === false) {\n              setParentOneNftId(nft.nftId);\n            } else if (changeParent === true) {\n              setParentTwoNftId(nft.nftId);\n            }\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 9\n          }\n        })\n      );\n    }\n  }, [nft.nftId, parentOneNftId, parentTwoNftId, setParentOneNftId, setParentTwoNftId, updatedNft]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Spacer, {\n    size: \"sm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  }), NFTCarousel);\n};\n\nconst CarouselNFTWrap = styled.div`\n  background-color: #183d69;\n  border-radius: 12px;\n`;\nconst ParentText = styled.span`\n  font-size: 12px;\n  padding-left: 12px;\n  color: #03f190;\n  font-weight: 500;\n`;\nexport default StyledNft;","map":{"version":3,"sources":["/Users/hienle/Documents/GitHub/comfortNFT/src/views/Greenhouse/components/CarouselNFT.tsx"],"names":["useStrainNfts","React","useEffect","useMemo","useState","Spacer","styled","useGreenhouse","StyledNft","nft","changeParent","isNftLoading","setIsNftLoading","updatedNft","setUpdatedNft","onRetrieve","then","updated","catch","e","console","error","getName","nftName","attribs","name","getAttribute","attributes","found","find","a","trait_type","value","parentOneNftId","setParentOneNftId","parentTwoNftId","setParentTwoNftId","NFTCarousel","nftId","image","CarouselNFTWrap","div","ParentText","span"],"mappings":"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","sourcesContent":["import {\n  attributeNames,\n  NftInstance,\n  DEFAULT_NFT_SIZE,\n  POOL_NAMES,\n  PoolIds,\n  ENABLE_BURN_REWARDS_AMOUNT,\n} from \"constants/poolValues\";\nimport useStrainNfts from \"hooks/useStrainNfts\";\nimport React, { useCallback, useEffect, useMemo, useState } from \"react\";\n\nimport { Spacer } from \"react-neu\";\nimport numeral from \"numeral\";\nimport styled from \"styled-components\";\n// import StyledPrimaryButton from \"./StyledButton\";\nimport AdditionalStakeModal from \"views/Modals/AdditionalStakeModal\";\nimport useBalances from \"hooks/useBalances\";\nimport useGreenhouse from \"hooks/useGreenhouse\";\n\ninterface CarouselProps {\n  activeParent: any;\n}\n\nconst StyledNft = ({ nft, changeParent }: { nft: NftInstance, changeParent: Boolean }) => {\n  const [isNftLoading, setIsNftLoading] = useState(false);\n  const [updatedNft, setUpdatedNft] = useState<NftInstance>();\n\n  const { onRetrieve } = useStrainNfts();\n\n  useEffect(() => {\n    if (nft && !updatedNft) {\n      setIsNftLoading(true);\n      onRetrieve(nft)\n        .then((updated: NftInstance) => {\n          setUpdatedNft(updated);\n          setIsNftLoading(false);\n        })\n        .catch((e: Error) => {\n          console.error(e);\n          setIsNftLoading(false);\n        });\n    }\n  }, [nft, onRetrieve, updatedNft]);\n\n  const getName = () => {\n    if (!nft) return \"-\";\n    if (nft?.nftName) return nft?.nftName;\n    return updatedNft?.attribs?.name;\n  };\n\n  const getAttribute = (name: string): string => {\n    if (!updatedNft) return \"-\";\n    const attributes = updatedNft?.attribs?.attributes;\n    if (!attributes) return \"-\";\n    const found = attributes.find((a) => a.trait_type === name);\n    if (!found) return \"-\";\n    return found.value;\n  };\n\n  const {\n    parentOneNftId,\n    setParentOneNftId,\n    parentTwoNftId,\n    setParentTwoNftId,\n  } = useGreenhouse();\n\n  const NFTCarousel = useMemo(() => {\n    if (parentOneNftId === nft.nftId) {\n      return (\n        <CarouselNFTWrap>\n          <img src={updatedNft?.attribs?.image} height=\"70px\" />\n          <ParentText>Parent 1</ParentText>\n        </CarouselNFTWrap>\n      );\n    } else if (parentTwoNftId === nft.nftId) {\n      return (\n        <CarouselNFTWrap>\n          <img src={updatedNft?.attribs?.image} height=\"70px\" />\n          <ParentText>Parent 2</ParentText>\n        </CarouselNFTWrap>\n      );\n    } else {\n      return (\n        // eslint-disable-next-line jsx-a11y/alt-text\n        <img\n          src={updatedNft?.attribs?.image}\n          height=\"70px\"\n          onClick={() => {\n            if (!parentOneNftId) {\n              setParentOneNftId(nft.nftId);\n            } else if (parentOneNftId && !parentTwoNftId) {\n              setParentTwoNftId(nft.nftId);\n            } else if (changeParent === false) {\n              setParentOneNftId(nft.nftId);\n            } else if (changeParent === true) {\n              setParentTwoNftId(nft.nftId);\n            }\n          }}\n        />\n      );\n    }\n  }, [\n    nft.nftId,\n    parentOneNftId,\n    parentTwoNftId,\n    setParentOneNftId,\n    setParentTwoNftId,\n    updatedNft,\n  ]);\n\n  return (\n    <>\n      <Spacer size=\"sm\" />\n\n      {NFTCarousel}\n    </>\n  );\n};\n\nconst CarouselNFTWrap = styled.div`\n  background-color: #183d69;\n  border-radius: 12px;\n`;\n\nconst ParentText = styled.span`\n  font-size: 12px;\n  padding-left: 12px;\n  color: #03f190;\n  font-weight: 500;\n`;\n\nexport default StyledNft;\n"]},"metadata":{},"sourceType":"module"}