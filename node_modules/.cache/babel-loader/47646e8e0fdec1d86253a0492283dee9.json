{"ast":null,"code":"import { useEffect, useState } from \"react\";\nexport const NUMBER_OF_SECONDS_IN_A_DAY = 86400;\nconst HOURS_IN_A_DAY = 24;\nconst MINUTES_IN_A_HOUR = 60;\nexport const useTimer = () => {\n  const [currentTime, setCurrentTime] = useState(Math.floor(Date.now() / 1000));\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCurrentTime(seconds => seconds + 1);\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [currentTime]);\n  return currentTime;\n};\nexport function getDaysRemaining(endUnixTimestamp, startUnixTimestamp) {\n  if (!endUnixTimestamp || !startUnixTimestamp) return 0;\n  if (startUnixTimestamp > endUnixTimestamp) return 0;\n  const remainingTicks = endUnixTimestamp - startUnixTimestamp;\n  return Math.floor(remainingTicks / NUMBER_OF_SECONDS_IN_A_DAY);\n}\n\nfunction getHoursRemaining(endUnixTimestamp, startUnixTimestamp) {\n  if (!endUnixTimestamp || !startUnixTimestamp) return 0;\n  if (startUnixTimestamp > endUnixTimestamp) return 0;\n  const remainingTicks = endUnixTimestamp - startUnixTimestamp;\n  return Math.floor(remainingTicks / NUMBER_OF_SECONDS_IN_A_DAY * HOURS_IN_A_DAY);\n}\n\nfunction getMinutesRemaining(endUnixTimestamp, startUnixTimestamp) {\n  if (!endUnixTimestamp || !startUnixTimestamp) return 0;\n  if (startUnixTimestamp > endUnixTimestamp) return 0;\n  const remainingTicks = endUnixTimestamp - startUnixTimestamp;\n  return Math.floor(remainingTicks / NUMBER_OF_SECONDS_IN_A_DAY * HOURS_IN_A_DAY * MINUTES_IN_A_HOUR);\n}\n\nfunction getSecondsRemaining(endUnixTimestamp, startUnixTimestamp) {\n  if (!endUnixTimestamp || !startUnixTimestamp) return 0;\n  if (startUnixTimestamp > endUnixTimestamp) return 0;\n  const remainingTicks = endUnixTimestamp - startUnixTimestamp; // use MINUTES_IN_A_HOUR 2 times since there are also 60 seconds in a minute\n\n  return Math.floor(remainingTicks / NUMBER_OF_SECONDS_IN_A_DAY * HOURS_IN_A_DAY * MINUTES_IN_A_HOUR * MINUTES_IN_A_HOUR);\n}\n\nexport function getHoursMinusDaysRemaining(endUnixTimestamp, startUnixTimestamp) {\n  const getDays = getDaysRemaining(endUnixTimestamp, startUnixTimestamp);\n  const hours = getDays * 24;\n  return normalizeValue(getHoursRemaining(endUnixTimestamp, startUnixTimestamp) - hours);\n}\nexport function getMinutesMinusHoursRemaining(endUnixTimestamp, startUnixTimestamp) {\n  const getHours = getHoursRemaining(endUnixTimestamp, startUnixTimestamp);\n  const hours = getHours * 60;\n  return normalizeValue(getMinutesRemaining(endUnixTimestamp, startUnixTimestamp) - hours);\n}\nexport function getSecondsMinusMinutesRemaining(endUnixTimestamp, startUnixTimestamp) {\n  const getMinutes = getMinutesRemaining(endUnixTimestamp, startUnixTimestamp);\n  const minutes = getMinutes * 60;\n  return normalizeValue(getSecondsRemaining(endUnixTimestamp, startUnixTimestamp) - minutes);\n}\n\nfunction normalizeValue(value) {\n  const normalized = `0${value}`;\n  return normalized.substr(normalized.length - 2, 2);\n}","map":{"version":3,"sources":["/Users/hienle/Documents/GitHub/comfortNFT/src/hooks/useTimer.ts"],"names":["useEffect","useState","NUMBER_OF_SECONDS_IN_A_DAY","HOURS_IN_A_DAY","MINUTES_IN_A_HOUR","useTimer","currentTime","setCurrentTime","Math","floor","Date","now","interval","setInterval","seconds","clearInterval","getDaysRemaining","endUnixTimestamp","startUnixTimestamp","remainingTicks","getHoursRemaining","getMinutesRemaining","getSecondsRemaining","getHoursMinusDaysRemaining","getDays","hours","normalizeValue","getMinutesMinusHoursRemaining","getHours","getSecondsMinusMinutesRemaining","getMinutes","minutes","value","normalized","substr","length"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\n\nexport const NUMBER_OF_SECONDS_IN_A_DAY = 86400;\nconst HOURS_IN_A_DAY = 24;\nconst MINUTES_IN_A_HOUR = 60;\n\nexport const useTimer = () => {\n    const [currentTime, setCurrentTime] = useState(Math.floor(Date.now() / 1000));\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            setCurrentTime(seconds => seconds + 1);\n        }, 1000);\n        return () => clearInterval(interval);\n    }, [currentTime]);\n\n    return currentTime;\n};\n\nexport function getDaysRemaining(\n    endUnixTimestamp: number,\n    startUnixTimestamp: number\n): number {\n    if (!endUnixTimestamp || !startUnixTimestamp) return 0;\n    if (startUnixTimestamp > endUnixTimestamp) return 0;\n    const remainingTicks = endUnixTimestamp - startUnixTimestamp;\n    return Math.floor(remainingTicks / NUMBER_OF_SECONDS_IN_A_DAY);\n}\n\nfunction getHoursRemaining(\n    endUnixTimestamp: number,\n    startUnixTimestamp: number\n): number {\n    if (!endUnixTimestamp || !startUnixTimestamp) return 0;\n    if (startUnixTimestamp > endUnixTimestamp) return 0;\n    const remainingTicks = endUnixTimestamp - startUnixTimestamp;\n    return Math.floor(\n        (remainingTicks / NUMBER_OF_SECONDS_IN_A_DAY) * HOURS_IN_A_DAY\n    );\n}\n\nfunction getMinutesRemaining(\n    endUnixTimestamp: number,\n    startUnixTimestamp: number\n): number {\n    if (!endUnixTimestamp || !startUnixTimestamp) return 0;\n    if (startUnixTimestamp > endUnixTimestamp) return 0;\n    const remainingTicks = endUnixTimestamp - startUnixTimestamp;\n    return Math.floor(\n        (remainingTicks / NUMBER_OF_SECONDS_IN_A_DAY) *\n        HOURS_IN_A_DAY *\n        MINUTES_IN_A_HOUR\n    );\n}\n\nfunction getSecondsRemaining(\n    endUnixTimestamp: number,\n    startUnixTimestamp: number\n): number {\n    if (!endUnixTimestamp || !startUnixTimestamp) return 0;\n    if (startUnixTimestamp > endUnixTimestamp) return 0;\n    const remainingTicks = endUnixTimestamp - startUnixTimestamp;\n    // use MINUTES_IN_A_HOUR 2 times since there are also 60 seconds in a minute\n    return Math.floor(\n        (remainingTicks / NUMBER_OF_SECONDS_IN_A_DAY) *\n        HOURS_IN_A_DAY *\n        MINUTES_IN_A_HOUR *\n        MINUTES_IN_A_HOUR\n    );\n}\n\nexport function getHoursMinusDaysRemaining(\n    endUnixTimestamp: number,\n    startUnixTimestamp: number\n): string {\n    const getDays = getDaysRemaining(endUnixTimestamp, startUnixTimestamp);\n    const hours = getDays * 24;\n    return normalizeValue(getHoursRemaining(endUnixTimestamp, startUnixTimestamp) - hours);\n}\n\nexport function getMinutesMinusHoursRemaining(\n    endUnixTimestamp: number,\n    startUnixTimestamp: number\n): string {\n    const getHours = getHoursRemaining(endUnixTimestamp, startUnixTimestamp);\n    const hours = getHours * 60;\n    return normalizeValue(getMinutesRemaining(endUnixTimestamp, startUnixTimestamp) - hours);\n}\n\nexport function getSecondsMinusMinutesRemaining(\n    endUnixTimestamp: number,\n    startUnixTimestamp: number\n): string {\n    const getMinutes = getMinutesRemaining(endUnixTimestamp, startUnixTimestamp);\n    const minutes = getMinutes * 60;\n    return normalizeValue(getSecondsRemaining(endUnixTimestamp, startUnixTimestamp) - minutes);\n}\n\nfunction normalizeValue(value: number): string {\n    const normalized = `0${value}`;\n    return normalized.substr(normalized.length -2, 2)\n}"]},"metadata":{},"sourceType":"module"}