{"ast":null,"code":"var _jsxFileName = \"/Users/hienle/Documents/GitHub/comfortNFT/src/views/Apothecary/Harvest.tsx\";\nimport React, { useMemo } from 'react';\nimport numeral from 'numeral';\nimport { Spacer } from 'react-neu';\nimport { useWallet } from 'use-wallet';\nimport { bnToDec } from 'utils';\nimport useStrainNfts from 'hooks/useStrainNfts';\nimport styled from 'styled-components';\nimport StyledPrimaryButton from 'views/Common/StyledButton';\n\nconst Harvest = () => {\n  const {\n    earnedStrnBalance,\n    isHarvesting,\n    onHarvest\n  } = useStrainNfts();\n  const {\n    status\n  } = useWallet();\n  const HarvestAction = useMemo(() => {\n    if (status !== 'connected' || earnedStrnBalance === undefined) {\n      return /*#__PURE__*/React.createElement(StyledPrimaryButton, {\n        disabled: true,\n        full: true,\n        text: \"Claim Rewards\",\n        variant: \"secondary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 17\n        }\n      });\n    }\n\n    if (!isHarvesting) {\n      return /*#__PURE__*/React.createElement(StyledPrimaryButton, {\n        full: true,\n        onClick: () => onHarvest(),\n        text: \"Claim Rewards\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 17\n        }\n      });\n    }\n\n    if (isHarvesting) {\n      return /*#__PURE__*/React.createElement(StyledPrimaryButton, {\n        disabled: true,\n        full: true,\n        text: \"Claiming...\",\n        variant: \"secondary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 17\n        }\n      });\n    }\n  }, [isHarvesting, earnedStrnBalance, onHarvest, status]);\n  const formattedEarnedBalance = useMemo(() => {\n    if (earnedStrnBalance) {\n      return numeral(bnToDec(earnedStrnBalance)).format('0.00a');\n    } else {\n      return '--';\n    }\n  }, [earnedStrnBalance]);\n\n  if (status === 'connected') {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Spacer, {\n      size: \"md\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }\n    }, \"STRN Rewards: \", /*#__PURE__*/React.createElement(StyledValue, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 36\n      }\n    }, formattedEarnedBalance)), /*#__PURE__*/React.createElement(Spacer, {\n      size: \"sm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }\n    }), HarvestAction);\n  }\n\n  return null;\n};\n\nconst StyledValue = styled.span`\n    font-size: 18px;\n    font-weight: 600;\n`;\nexport default Harvest;","map":{"version":3,"sources":["/Users/hienle/Documents/GitHub/comfortNFT/src/views/Apothecary/Harvest.tsx"],"names":["React","useMemo","numeral","Spacer","useWallet","bnToDec","useStrainNfts","styled","StyledPrimaryButton","Harvest","earnedStrnBalance","isHarvesting","onHarvest","status","HarvestAction","undefined","formattedEarnedBalance","format","StyledValue","span"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AAEA,OAAOC,OAAP,MAAoB,SAApB;AACA,SACIC,MADJ,QAEO,WAFP;AAGA,SAASC,SAAT,QAA0B,YAA1B;AAEA,SAASC,OAAT,QAAwB,OAAxB;AACA,OAAOC,aAAP,MAA0B,qBAA1B;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,mBAAP,MAAgC,2BAAhC;;AAEA,MAAMC,OAAiB,GAAG,MAAM;AAC5B,QAAM;AACFC,IAAAA,iBADE;AAEFC,IAAAA,YAFE;AAGFC,IAAAA;AAHE,MAIFN,aAAa,EAJjB;AAMA,QAAM;AAAEO,IAAAA;AAAF,MAAaT,SAAS,EAA5B;AAEA,QAAMU,aAAa,GAAGb,OAAO,CAAC,MAAM;AAChC,QAAIY,MAAM,KAAK,WAAX,IAA0BH,iBAAiB,KAAKK,SAApD,EAA+D;AAC3D,0BACI,oBAAC,mBAAD;AACI,QAAA,QAAQ,MADZ;AAEI,QAAA,IAAI,MAFR;AAGI,QAAA,IAAI,EAAC,eAHT;AAII,QAAA,OAAO,EAAC,WAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAQH;;AACD,QAAI,CAACJ,YAAL,EAAmB;AACf,0BACI,oBAAC,mBAAD;AACI,QAAA,IAAI,MADR;AAEI,QAAA,OAAO,EAAE,MAAMC,SAAS,EAF5B;AAGI,QAAA,IAAI,EAAC,eAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAOH;;AACD,QAAID,YAAJ,EAAkB;AACd,0BACI,oBAAC,mBAAD;AACI,QAAA,QAAQ,MADZ;AAEI,QAAA,IAAI,MAFR;AAGI,QAAA,IAAI,EAAC,aAHT;AAII,QAAA,OAAO,EAAC,WAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAQH;AACJ,GA9B4B,EA8B1B,CACCA,YADD,EAECD,iBAFD,EAGCE,SAHD,EAICC,MAJD,CA9B0B,CAA7B;AAqCA,QAAMG,sBAAsB,GAAGf,OAAO,CAAC,MAAM;AACzC,QAAIS,iBAAJ,EAAuB;AACnB,aAAOR,OAAO,CAACG,OAAO,CAACK,iBAAD,CAAR,CAAP,CAAoCO,MAApC,CAA2C,OAA3C,CAAP;AACH,KAFD,MAEO;AACH,aAAO,IAAP;AACH;AACJ,GANqC,EAMnC,CAACP,iBAAD,CANmC,CAAtC;;AAQA,MAAIG,MAAM,KAAK,WAAf,EAA4B;AACxB,wBACI,uDACI,oBAAC,MAAD;AAAQ,MAAA,IAAI,EAAC,IAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCAAmB,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAcG,sBAAd,CAAnB,CAFJ,eAGI,oBAAC,MAAD;AAAQ,MAAA,IAAI,EAAC,IAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,EAIKF,aAJL,CADJ;AAQH;;AACD,SAAO,IAAP;AACH,CAjED;;AAmEA,MAAMI,WAAW,GAAGX,MAAM,CAACY,IAAK;AAChC;AACA;AACA,CAHA;AAOA,eAAeV,OAAf","sourcesContent":["import React, { useMemo } from 'react'\n\nimport numeral from 'numeral'\nimport {\n    Spacer,\n} from 'react-neu'\nimport { useWallet } from 'use-wallet'\n\nimport { bnToDec } from 'utils'\nimport useStrainNfts from 'hooks/useStrainNfts'\nimport styled from 'styled-components'\nimport StyledPrimaryButton from 'views/Common/StyledButton'\n\nconst Harvest: React.FC = () => {\n    const {\n        earnedStrnBalance,\n        isHarvesting,\n        onHarvest,\n    } = useStrainNfts()\n\n    const { status } = useWallet()\n\n    const HarvestAction = useMemo(() => {\n        if (status !== 'connected' || earnedStrnBalance === undefined) {\n            return (\n                <StyledPrimaryButton\n                    disabled\n                    full\n                    text=\"Claim Rewards\"\n                    variant=\"secondary\"\n                />\n            )\n        }\n        if (!isHarvesting) {\n            return (\n                <StyledPrimaryButton\n                    full\n                    onClick={() => onHarvest()}\n                    text=\"Claim Rewards\"\n                />\n            )\n        }\n        if (isHarvesting) {\n            return (\n                <StyledPrimaryButton\n                    disabled\n                    full\n                    text=\"Claiming...\"\n                    variant=\"secondary\"\n                />\n            )\n        }\n    }, [\n        isHarvesting,\n        earnedStrnBalance,\n        onHarvest,\n        status\n    ])\n\n    const formattedEarnedBalance = useMemo(() => {\n        if (earnedStrnBalance) {\n            return numeral(bnToDec(earnedStrnBalance)).format('0.00a')\n        } else {\n            return '--'\n        }\n    }, [earnedStrnBalance])\n\n    if (status === 'connected') {\n        return (\n            <>\n                <Spacer size=\"md\" />\n                <div>STRN Rewards: <StyledValue>{formattedEarnedBalance}</StyledValue></div>\n                <Spacer size=\"sm\" />\n                {HarvestAction}\n            </>\n        )\n    }\n    return null;\n}\n\nconst StyledValue = styled.span`\n    font-size: 18px;\n    font-weight: 600;\n`\n\n\n\nexport default Harvest"]},"metadata":{},"sourceType":"module"}