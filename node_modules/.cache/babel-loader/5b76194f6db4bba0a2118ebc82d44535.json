{"ast":null,"code":"var _jsxFileName = \"/Users/hienle/Documents/GitHub/comfortNFT/src/contexts/Prices/PricesProvider.tsx\";\nimport React, { useCallback, useEffect, useState } from 'react';\nimport useYam from 'hooks/useYam';\nimport { bnToDec } from 'utils';\nimport { getCurrentPrice } from 'yam-sdk/utils';\nimport PricesContext from './PricesContext';\n\nconst PricesProvider = ({\n  children\n}) => {\n  const [yamTwap, setYamTwap] = useState();\n  const yam = useYam();\n  const fetchCurrentPrice = useCallback(async () => {\n    if (!yam) return;\n    const price = await getCurrentPrice(yam);\n    setYamTwap(bnToDec(price));\n  }, [setYamTwap, yam]);\n  useEffect(() => {\n    fetchCurrentPrice();\n    let refreshInterval = setInterval(fetchCurrentPrice, 10000);\n    return () => clearInterval(refreshInterval);\n  }, [fetchCurrentPrice]);\n  return /*#__PURE__*/React.createElement(PricesContext.Provider, {\n    value: {\n      yamTwap\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }, children);\n};\n\nexport default PricesProvider;","map":{"version":3,"sources":["/Users/hienle/Documents/GitHub/comfortNFT/src/contexts/Prices/PricesProvider.tsx"],"names":["React","useCallback","useEffect","useState","useYam","bnToDec","getCurrentPrice","PricesContext","PricesProvider","children","yamTwap","setYamTwap","yam","fetchCurrentPrice","price","refreshInterval","setInterval","clearInterval"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,QAAxC,QAAwD,OAAxD;AAEA,OAAOC,MAAP,MAAmB,cAAnB;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,SAASC,eAAT,QAAgC,eAAhC;AAEA,OAAOC,aAAP,MAA0B,iBAA1B;;AAEA,MAAMC,cAAwB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACjD,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,EAAtC;AACA,QAAMS,GAAG,GAAGR,MAAM,EAAlB;AAEA,QAAMS,iBAAiB,GAAGZ,WAAW,CAAC,YAAY;AAChD,QAAI,CAACW,GAAL,EAAU;AACV,UAAME,KAAK,GAAG,MAAMR,eAAe,CAACM,GAAD,CAAnC;AACAD,IAAAA,UAAU,CAACN,OAAO,CAACS,KAAD,CAAR,CAAV;AACD,GAJoC,EAIlC,CAACH,UAAD,EAAaC,GAAb,CAJkC,CAArC;AAMAV,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,iBAAiB;AACjB,QAAIE,eAAe,GAAGC,WAAW,CAACH,iBAAD,EAAoB,KAApB,CAAjC;AACA,WAAO,MAAMI,aAAa,CAACF,eAAD,CAA1B;AACD,GAJQ,EAIN,CAACF,iBAAD,CAJM,CAAT;AAMA,sBACE,oBAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAE;AAC7BH,MAAAA;AAD6B,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGGD,QAHH,CADF;AAOD,CAvBD;;AAyBA,eAAeD,cAAf","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react'\n\nimport useYam from 'hooks/useYam'\nimport { bnToDec } from 'utils'\nimport { getCurrentPrice } from 'yam-sdk/utils'\n\nimport PricesContext from './PricesContext'\n\nconst PricesProvider: React.FC = ({ children }) => {\n  const [yamTwap, setYamTwap] = useState<number>()\n  const yam = useYam()\n\n  const fetchCurrentPrice = useCallback(async () => {\n    if (!yam) return\n    const price = await getCurrentPrice(yam)\n    setYamTwap(bnToDec(price))\n  }, [setYamTwap, yam])\n\n  useEffect(() => {\n    fetchCurrentPrice()\n    let refreshInterval = setInterval(fetchCurrentPrice, 10000)\n    return () => clearInterval(refreshInterval)\n  }, [fetchCurrentPrice])\n  \n  return (\n    <PricesContext.Provider value={{\n      yamTwap,\n    }}>\n      {children}\n    </PricesContext.Provider>\n  )\n}\n\nexport default PricesProvider"]},"metadata":{},"sourceType":"module"}