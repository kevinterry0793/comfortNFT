{"ast":null,"code":"import BigNumber from 'bignumber.js';\nimport { ethers } from 'ethers';\nimport Web3 from 'web3';\nimport ERC20ABI from 'constants/abi/ERC20.json';\nimport ERC1155 from 'constants/abi/ERC1155.json';\nimport { COOLING_OFF_IN_SECONDS } from 'constants/poolValues';\nimport StrainNFTLPTokenWrapper from '../yam-sdk/lib/clean_build/contracts/StrainNFTLPTokenWrapper.json';\nimport StrainNft from '../yam-sdk/lib/clean_build/contracts/StrainNFT.json';\nimport { Multicall } from 'ethereum-multicall';\nimport { Web3Provider } from '@ethersproject/providers';\n\nconst sleep = ms => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n};\n\nexport const waitTransaction = async (provider, txHash) => {\n  const web3 = new Web3(provider);\n  let txReceipt = null;\n\n  while (txReceipt === null) {\n    const r = await web3.eth.getTransactionReceipt(txHash);\n    txReceipt = r;\n    await sleep(2000);\n  }\n\n  return txReceipt.status;\n};\nexport const approve = async (userAddress, spenderAddress, tokenAddress, provider, onTxHash) => {\n  try {\n    const tokenContract = getERC20Contract(provider, tokenAddress);\n    return tokenContract.methods.approve(spenderAddress, String(ethers.constants.MaxUint256)).send({\n      from: userAddress,\n      gas: 80000\n    }, async (error, txHash) => {\n      if (error) {\n        console.log(\"ERC20 could not be approved\", error);\n        onTxHash && onTxHash('');\n        return false;\n      }\n\n      if (onTxHash) {\n        onTxHash(txHash);\n      }\n\n      const status = await waitTransaction(provider, txHash);\n\n      if (!status) {\n        console.log(\"Approval transaction failed.\");\n        return false;\n      }\n\n      return true;\n    });\n  } catch (e) {\n    console.error('approve', e);\n    return false;\n  }\n};\nexport const setApprovalForAll = async (userAddress, spenderAddress, tokenAddress, provider, onTxHash) => {\n  try {\n    const tokenContract = getERC1155Contract(provider, tokenAddress);\n    return tokenContract.methods.setApprovalForAll(spenderAddress, true).send({\n      from: userAddress,\n      gas: 80000\n    }, async (error, txHash) => {\n      if (error) {\n        console.log(\"ERC1155 could not be approved\", error);\n        onTxHash && onTxHash('');\n        return false;\n      }\n\n      if (onTxHash) {\n        onTxHash(txHash);\n      }\n\n      const status = await waitTransaction(provider, txHash);\n\n      if (!status) {\n        console.log(\"Approval for all transaction failed.\");\n        return false;\n      }\n\n      return true;\n    });\n  } catch (e) {\n    console.log('set approval for all ', e);\n    return false;\n  }\n};\nexport const isApprovalForAll = async (userAddress, spenderAddress, tokenAddress, provider) => {\n  try {\n    const tokenContract = getERC1155Contract(provider, tokenAddress);\n    return tokenContract.methods.isApprovedForAll(userAddress, spenderAddress);\n  } catch (e) {\n    console.log('set approval for all ', e);\n    return false;\n  }\n};\nexport const getAllowance = async (userAddress, spenderAddress, tokenAddress, provider) => {\n  try {\n    const tokenContract = getERC20Contract(provider, tokenAddress);\n    const allowance = await tokenContract.methods.allowance(userAddress, spenderAddress).call();\n    return allowance;\n  } catch (e) {\n    return '0';\n  }\n};\nexport const getBalance = async (provider, tokenAddress, userAddress) => {\n  const tokenContract = getERC20Contract(provider, tokenAddress);\n\n  try {\n    const balance = await tokenContract.methods.balanceOf(userAddress).call();\n    return balance;\n  } catch (e) {\n    return '0';\n  }\n};\n\nconst getUsersNftsMulticalResults = async (provider, nftAddress, nftCount, userAddress) => {\n  //let provider = new ethers.providers.StaticJsonRpcProvider(infura_key);\n  const multicall = new Multicall({\n    ethersProvider: provider\n  });\n  console.log('nft count:', nftCount);\n  let items = [];\n\n  for (let i = 0; i < nftCount; i++) {\n    items.push(i);\n  }\n\n  const contractGetNftIdsCall = items.map(i => ({\n    reference: `nftContract${i}`,\n    contractAddress: nftAddress,\n    abi: ERC1155.abi,\n    calls: [{\n      reference: `nftContract${i}`,\n      methodName: 'itemIDs',\n      methodParameters: [i]\n    }]\n  }));\n  let nftIds = [];\n  const nftResults = await multicall.call(contractGetNftIdsCall);\n  Object.keys(nftResults.results).map(key => {\n    // lame issue with typing and this array of calls\n    const nftId = String(new BigNumber(JSON.parse(JSON.stringify(nftResults.results[key].callsReturnContext[0].returnValues)).hex));\n    nftIds.push(nftId);\n  });\n  const contractGetNftOwnerCall = nftIds.map(i => ({\n    reference: `nftContract${i}`,\n    contractAddress: nftAddress,\n    abi: ERC1155.abi,\n    calls: [{\n      reference: `nftContract${i}`,\n      methodName: 'nfOwners',\n      methodParameters: [i]\n    }]\n  })); // ----- get NFT owner ----- //\n\n  let usersNfts = [];\n  const ownerResults = await multicall.call(contractGetNftOwnerCall);\n  Object.keys(ownerResults.results).map(key => {\n    // lame issue with typing and this array of calls\n    const owner = String(ownerResults.results[key].callsReturnContext[0].returnValues);\n\n    if (owner.toLowerCase() === userAddress.toLowerCase()) {\n      const nftId = String(ownerResults.results[key].originalContractCallContext.calls[0].methodParameters[0]);\n      usersNfts.push(nftId);\n    }\n  });\n  return usersNfts;\n};\n\nconst getNftDetailsMulticalResults = async (provider, nftAddress, nftIds) => {\n  //let provider = new ethers.providers.StaticJsonRpcProvider(infura_key);\n  const multicall = new Multicall({\n    ethersProvider: provider\n  });\n  const nftDetails = nftIds.reduce((p, n) => ({ ...p,\n    [n]: {\n      nftId: n,\n      dataUrl: '',\n      nftName: ''\n    }\n  }), {});\n  const contractGetNftDetailCalls = [];\n\n  for (let i = 0; i < nftIds.length; i++) {\n    const nftId = nftIds[i];\n    contractGetNftDetailCalls.push({\n      reference: `nftContract${nftId}Uri`,\n      contractAddress: nftAddress,\n      abi: ERC1155.abi,\n      calls: [{\n        reference: `nftContract${nftId}Uri`,\n        methodName: 'uri',\n        methodParameters: [nftId]\n      }]\n    });\n    contractGetNftDetailCalls.push({\n      reference: `nftContract${nftId}Name`,\n      contractAddress: nftAddress,\n      abi: StrainNft.abi,\n      calls: [{\n        reference: `nftContract${nftId}Name`,\n        methodName: 'nftInfo',\n        methodParameters: [nftId]\n      }]\n    });\n    contractGetNftDetailCalls.push({\n      reference: `nftContract${nftId}Name`,\n      contractAddress: nftAddress,\n      abi: StrainNft.abi,\n      calls: [{\n        reference: `nftContract${nftId}Name`,\n        methodName: 'getName',\n        methodParameters: [nftId]\n      }]\n    });\n  } // ----- get NFT details ----- //\n\n\n  const ownerResults = await multicall.call(contractGetNftDetailCalls);\n  Object.keys(ownerResults.results).map(key => {\n    const method = String(ownerResults.results[key].originalContractCallContext.calls[0].methodName);\n    const nftId = String(ownerResults.results[key].originalContractCallContext.calls[0].methodParameters[0]);\n    const value = ownerResults.results[key].callsReturnContext[0].returnValues;\n\n    if (method === 'uri') {\n      nftDetails[nftId].dataUrl = String(value);\n    } else if (method === 'nftInfo') {\n      nftDetails[nftId].nftInfo = value;\n    } else if (method === 'getName') {\n      nftDetails[nftId].nftName = String(value);\n    }\n  });\n  return Object.values(nftDetails);\n};\n\nexport const getUserNfts = async (provider, nftAddress, userAddress, crafterContract, geneticsContract) => {\n  const nftContract = getERC1155Contract(provider, nftAddress);\n\n  try {\n    var _window;\n\n    const length = await nftContract.methods.getItemIDsLength().call(); // @ts-ignore\n\n    const p = new Web3Provider((_window = window) === null || _window === void 0 ? void 0 : _window.ethereum);\n    const usersNfts = await getUsersNftsMulticalResults(p, nftAddress, length, userAddress);\n    const nfts = await getNftDetailsMulticalResults(p, nftAddress, usersNfts);\n    const userItems = [];\n\n    for (let i = 0; i < nfts.length; i++) {\n      const nft = nfts[i];\n      const {\n        poolId,\n        lpBalance\n      } = await getNftPoolIdBalance(provider, crafterContract, nft.nftId, userAddress);\n      nft.lpBalance = lpBalance;\n      nft.poolId = poolId; // add convenience property\n\n      const now = new Date().getTime() / 1000;\n      const timePassed = now - Number(nft.nftInfo ? nft.nftInfo.lastBreedTime : 0);\n      nft.canBreed = timePassed > COOLING_OFF_IN_SECONDS; // TODO: verify genetics contract address then turn this on\n      //nft.breedFee = await getNftBreedingBurnFee(provider, geneticsContract, nft, userAddress);\n\n      nft.breedFee = \"10000000000000000000\";\n      userItems.push(nft);\n    } // for debugging\n\n\n    console.log('users NFTs', userItems);\n    return userItems;\n  } catch (e) {\n    return [];\n  }\n};\nexport const getNftBreedingBurnFee = async (provider, contract, nft, userAddress) => {\n  var _nft$nftInfo, _nft$nftInfo2, _nft$nftInfo3;\n\n  let fee = \"0\"; // set default\n\n  fee = await contract.methods.getBurnerFee((_nft$nftInfo = nft.nftInfo) === null || _nft$nftInfo === void 0 ? void 0 : _nft$nftInfo.gnome, (_nft$nftInfo2 = nft.nftInfo) === null || _nft$nftInfo2 === void 0 ? void 0 : _nft$nftInfo2.breedCount, (_nft$nftInfo3 = nft.nftInfo) === null || _nft$nftInfo3 === void 0 ? void 0 : _nft$nftInfo3.lastBreedTime).call().catch(e => {\n    console.error(\"Could not get NFT's pool Id, defaulting to `0`\", e);\n  });\n  return fee;\n};\nexport const getNftPoolIdBalance = async (provider, contract, nftId, userAddress) => {\n  let poolId = \"0\"; // set default\n\n  poolId = await contract.methods.nftPool(nftId).call().catch(e => {\n    console.error(\"Could not get NFT's pool Id, defaulting to `0`\", e);\n  });\n  const poolContactAddress = await contract.methods.pools(poolId).call().catch(e => {\n    console.error(\"Could not get NFT's balance\", e);\n  });\n  const lpWrapperContract = getLPTokenWrapperContract(provider, poolContactAddress);\n  const lpBalance = await lpWrapperContract.methods.originalBalanceOf(nftId).call().catch(e => {\n    console.error(\"Could not get NFT's balance\", e);\n  });\n  /*\n    lpBalance = await contract.methods.balanceOf(nftId).call().catch((e: Error) => {\n      console.error(\"Could not get NFT's balance\", e);\n    })\n  */\n\n  return {\n    poolId,\n    lpBalance: new BigNumber(lpBalance).dividedBy(new BigNumber(10).pow(18))\n  };\n};\nexport const getERC20Contract = (provider, address) => {\n  const web3 = new Web3(provider);\n  const contract = new web3.eth.Contract(ERC20ABI.abi, address);\n  return contract;\n};\nexport const getERC1155Contract = (provider, address) => {\n  const web3 = new Web3(provider);\n  const contract = new web3.eth.Contract(ERC1155.abi, address);\n  return contract;\n};\nexport const getLPTokenWrapperContract = (provider, address) => {\n  const web3 = new Web3(provider);\n  const contract = new web3.eth.Contract(StrainNFTLPTokenWrapper.abi, address);\n  return contract;\n};\nexport const bnToDec = (bn, decimals = 18) => {\n  return bn.dividedBy(new BigNumber(10).pow(decimals)).toNumber();\n};\nexport const decToBn = (dec, decimals = 18) => {\n  return new BigNumber(dec).multipliedBy(new BigNumber(10).pow(decimals));\n};\nexport const getFullDisplayBalance = (balance, decimals = 18) => {\n  return balance.dividedBy(new BigNumber(10).pow(decimals)).toFixed();\n};\nexport const setItemValue = (items, index, value) => {\n  items[Number(index)] = value;\n  return items;\n};\nexport const getItemValue = (items = [], index = \"0\") => {\n  return items[Number(index)];\n};","map":{"version":3,"sources":["/Users/hienle/Documents/GitHub/comfortNFT/src/utils/index.ts"],"names":["BigNumber","ethers","Web3","ERC20ABI","ERC1155","COOLING_OFF_IN_SECONDS","StrainNFTLPTokenWrapper","StrainNft","Multicall","Web3Provider","sleep","ms","Promise","resolve","setTimeout","waitTransaction","provider","txHash","web3","txReceipt","r","eth","getTransactionReceipt","status","approve","userAddress","spenderAddress","tokenAddress","onTxHash","tokenContract","getERC20Contract","methods","String","constants","MaxUint256","send","from","gas","error","console","log","e","setApprovalForAll","getERC1155Contract","isApprovalForAll","isApprovedForAll","getAllowance","allowance","call","getBalance","balance","balanceOf","getUsersNftsMulticalResults","nftAddress","nftCount","multicall","ethersProvider","items","i","push","contractGetNftIdsCall","map","reference","contractAddress","abi","calls","methodName","methodParameters","nftIds","nftResults","Object","keys","results","key","nftId","JSON","parse","stringify","callsReturnContext","returnValues","hex","contractGetNftOwnerCall","usersNfts","ownerResults","owner","toLowerCase","originalContractCallContext","getNftDetailsMulticalResults","nftDetails","reduce","p","n","dataUrl","nftName","contractGetNftDetailCalls","length","method","value","nftInfo","values","getUserNfts","crafterContract","geneticsContract","nftContract","getItemIDsLength","window","ethereum","nfts","userItems","nft","poolId","lpBalance","getNftPoolIdBalance","now","Date","getTime","timePassed","Number","lastBreedTime","canBreed","breedFee","getNftBreedingBurnFee","contract","fee","getBurnerFee","gnome","breedCount","catch","nftPool","poolContactAddress","pools","lpWrapperContract","getLPTokenWrapperContract","originalBalanceOf","dividedBy","pow","address","Contract","bnToDec","bn","decimals","toNumber","decToBn","dec","multipliedBy","getFullDisplayBalance","toFixed","setItemValue","index","getItemValue"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js'\nimport { ethers } from 'ethers'\nimport Web3 from 'web3'\nimport { provider, TransactionReceipt } from 'web3-core'\nimport { AbiItem } from 'web3-utils'\n\nimport ERC20ABI from 'constants/abi/ERC20.json'\nimport ERC1155 from 'constants/abi/ERC1155.json'\nimport { COOLING_OFF_IN_SECONDS, NftInfo, NftInstance } from 'constants/poolValues'\nimport StrainNFTLPTokenWrapper from '../yam-sdk/lib/clean_build/contracts/StrainNFTLPTokenWrapper.json'\nimport StrainNft from '../yam-sdk/lib/clean_build/contracts/StrainNFT.json'\nimport {\n  Multicall,\n  ContractCallResults,\n  ContractCallContext,\n} from 'ethereum-multicall';\nimport { Web3Provider, ExternalProvider } from '@ethersproject/providers'\n\nconst sleep = (ms: number) => {\n  return new Promise(resolve => setTimeout(resolve, ms))\n}\n\nexport const waitTransaction = async (provider: provider, txHash: string) => {\n  const web3 = new Web3(provider)\n  let txReceipt: TransactionReceipt | null = null\n  while (txReceipt === null) {\n    const r = await web3.eth.getTransactionReceipt(txHash)\n    txReceipt = r\n    await sleep(2000)\n  }\n  return (txReceipt.status)\n}\n\nexport const approve = async (\n  userAddress: string,\n  spenderAddress: string,\n  tokenAddress: string,\n  provider: provider,\n  onTxHash?: (txHash: string) => void\n): Promise<boolean> => {\n  try {\n    const tokenContract = getERC20Contract(provider, tokenAddress)\n    return tokenContract.methods\n      .approve(spenderAddress, String(ethers.constants.MaxUint256))\n      .send({ from: userAddress, gas: 80000 }, async (error: any, txHash: string) => {\n        if (error) {\n          console.log(\"ERC20 could not be approved\", error)\n          onTxHash && onTxHash('')\n          return false\n        }\n        if (onTxHash) {\n          onTxHash(txHash)\n        }\n        const status = await waitTransaction(provider, txHash)\n        if (!status) {\n          console.log(\"Approval transaction failed.\")\n          return false\n        }\n        return true\n      })\n  } catch (e) {\n    console.error('approve', e)\n    return false\n  }\n}\n\nexport const setApprovalForAll = async (\n  userAddress: string,\n  spenderAddress: string,\n  tokenAddress: string,\n  provider: provider,\n  onTxHash?: (txHash: string) => void\n): Promise<boolean> => {\n  try {\n    const tokenContract = getERC1155Contract(provider, tokenAddress)\n    return tokenContract.methods\n      .setApprovalForAll(spenderAddress, true)\n      .send({ from: userAddress, gas: 80000 }, async (error: any, txHash: string) => {\n        if (error) {\n          console.log(\"ERC1155 could not be approved\", error)\n          onTxHash && onTxHash('')\n          return false\n        }\n        if (onTxHash) {\n          onTxHash(txHash)\n        }\n        const status = await waitTransaction(provider, txHash)\n        if (!status) {\n          console.log(\"Approval for all transaction failed.\")\n          return false\n        }\n        return true\n      })\n  } catch (e) {\n    console.log('set approval for all ', e)\n    return false\n  }\n}\n\nexport const isApprovalForAll = async (\n  userAddress: string,\n  spenderAddress: string,\n  tokenAddress: string,\n  provider: provider,\n): Promise<boolean> => {\n  try {\n    const tokenContract = getERC1155Contract(provider, tokenAddress)\n    return tokenContract.methods.isApprovedForAll(userAddress, spenderAddress)\n  } catch (e) {\n    console.log('set approval for all ', e)\n    return false\n  }\n}\n\nexport const getAllowance = async (\n  userAddress: string,\n  spenderAddress: string,\n  tokenAddress: string,\n  provider: provider\n): Promise<string> => {\n  try {\n    const tokenContract = getERC20Contract(provider, tokenAddress)\n    const allowance: string = await tokenContract.methods.allowance(userAddress, spenderAddress).call()\n    return allowance\n  } catch (e) {\n    return '0'\n  }\n}\n\nexport const getBalance = async (provider: provider, tokenAddress: string, userAddress: string): Promise<string> => {\n  const tokenContract = getERC20Contract(provider, tokenAddress)\n  try {\n    const balance: string = await tokenContract.methods.balanceOf(userAddress).call()\n    return balance\n  } catch (e) {\n    return '0'\n  }\n}\n\nconst getUsersNftsMulticalResults = async (provider: Web3Provider, nftAddress: string, nftCount: number, userAddress: string): Promise<string[]> => {\n  //let provider = new ethers.providers.StaticJsonRpcProvider(infura_key);\n  const multicall = new Multicall({ ethersProvider: provider });\n  console.log('nft count:', nftCount)\n  let items: number[] = [];\n  for (let i = 0; i < nftCount; i++) { items.push(i) }\n\n  const contractGetNftIdsCall: ContractCallContext[] = items.map(i =>\n    ({\n      reference: `nftContract${i}`,\n      contractAddress: nftAddress,\n      abi: ERC1155.abi,\n      calls: [{ reference: `nftContract${i}`, methodName: 'itemIDs', methodParameters: [i] }]\n    })\n  );\n  let nftIds: string[] = []\n  const nftResults: ContractCallResults = await multicall.call(contractGetNftIdsCall);\n  Object.keys(nftResults.results).map(key => {\n    // lame issue with typing and this array of calls\n    const nftId = String(new BigNumber(JSON.parse(JSON.stringify(nftResults.results[key].callsReturnContext[0].returnValues)).hex))\n    nftIds.push(nftId);\n  })\n\n  const contractGetNftOwnerCall: ContractCallContext[] = nftIds.map(i =>\n    ({\n      reference: `nftContract${i}`,\n      contractAddress: nftAddress,\n      abi: ERC1155.abi,\n      calls: [{ reference: `nftContract${i}`, methodName: 'nfOwners', methodParameters: [i] }]\n    })\n  );\n\n  // ----- get NFT owner ----- //\n  let usersNfts: string[] = []\n  const ownerResults: ContractCallResults = await multicall.call(contractGetNftOwnerCall);\n  Object.keys(ownerResults.results).map(key => {\n    // lame issue with typing and this array of calls\n    const owner = String(ownerResults.results[key].callsReturnContext[0].returnValues)\n    if (owner.toLowerCase() === userAddress.toLowerCase()) {\n      const nftId = String(ownerResults.results[key].originalContractCallContext.calls[0].methodParameters[0])\n      usersNfts.push(nftId);\n    }\n  })\n\n  return usersNfts\n}\n\n\nconst getNftDetailsMulticalResults = async (provider: Web3Provider, nftAddress: string, nftIds: string[]): Promise<NftInstance[]> => {\n  //let provider = new ethers.providers.StaticJsonRpcProvider(infura_key);\n  const multicall = new Multicall({ ethersProvider: provider });\n  const nftDetails: { [key: string]: NftInstance } = nftIds.reduce((p, n) => ({ ...p, [n]: { nftId: n, dataUrl: '', nftName: '' } }), {});\n\n  const contractGetNftDetailCalls: ContractCallContext[] = []\n  for (let i = 0; i < nftIds.length; i++) {\n    const nftId = nftIds[i];\n    contractGetNftDetailCalls.push({\n      reference: `nftContract${nftId}Uri`,\n      contractAddress: nftAddress,\n      abi: ERC1155.abi,\n      calls: [{ reference: `nftContract${nftId}Uri`, methodName: 'uri', methodParameters: [nftId] }]\n    });\n\n    contractGetNftDetailCalls.push({\n      reference: `nftContract${nftId}Name`,\n      contractAddress: nftAddress,\n      abi: StrainNft.abi,\n      calls: [{ reference: `nftContract${nftId}Name`, methodName: 'nftInfo', methodParameters: [nftId] }]\n    });\n\n    contractGetNftDetailCalls.push({\n      reference: `nftContract${nftId}Name`,\n      contractAddress: nftAddress,\n      abi: StrainNft.abi,\n      calls: [{ reference: `nftContract${nftId}Name`, methodName: 'getName', methodParameters: [nftId] }]\n    });\n\n  }\n\n  // ----- get NFT details ----- //\n  const ownerResults: ContractCallResults = await multicall.call(contractGetNftDetailCalls);\n  Object.keys(ownerResults.results).map(key => {\n    const method = String(ownerResults.results[key].originalContractCallContext.calls[0].methodName)\n    const nftId = String(ownerResults.results[key].originalContractCallContext.calls[0].methodParameters[0])\n    const value = ownerResults.results[key].callsReturnContext[0].returnValues as any;\n\n    if (method === 'uri') {\n      nftDetails[nftId].dataUrl = String(value);\n    } else if (method === 'nftInfo') {\n      nftDetails[nftId].nftInfo = value as NftInfo;\n    } else if (method === 'getName') {\n      nftDetails[nftId].nftName = String(value);\n    }\n  })\n\n  return Object.values(nftDetails)\n}\n\nexport const getUserNfts = async (provider: provider, nftAddress: string, userAddress: string, crafterContract: any, geneticsContract: any): Promise<NftInstance[]> => {\n  const nftContract = getERC1155Contract(provider, nftAddress)\n  try {\n    const length = await nftContract.methods.getItemIDsLength().call();\n    // @ts-ignore\n    const p = new Web3Provider(window?.ethereum);\n    const usersNfts = await getUsersNftsMulticalResults(p, nftAddress, length, userAddress);\n    const nfts = await getNftDetailsMulticalResults(p, nftAddress, usersNfts)\n\n    const userItems: NftInstance[] = []\n\n    for (let i = 0; i < nfts.length; i++) {\n      const nft = nfts[i]\n      const { poolId, lpBalance } = await getNftPoolIdBalance(provider, crafterContract, nft.nftId, userAddress);\n      nft.lpBalance = lpBalance;\n      nft.poolId = poolId\n\n      // add convenience property\n      const now = new Date().getTime() / 1000;\n      const timePassed = now - Number(nft.nftInfo ? nft.nftInfo.lastBreedTime : 0);\n      nft.canBreed = timePassed > COOLING_OFF_IN_SECONDS;\n\n      // TODO: verify genetics contract address then turn this on\n      //nft.breedFee = await getNftBreedingBurnFee(provider, geneticsContract, nft, userAddress);\n      nft.breedFee = \"10000000000000000000\";\n\n      userItems.push(nft)\n    }\n    // for debugging\n    console.log('users NFTs', userItems)\n    return userItems\n  } catch (e) {\n    return []\n  }\n}\n\nexport const getNftBreedingBurnFee = async (provider: provider, contract: any, nft: NftInstance, userAddress: string) => {\n  let fee = \"0\"; // set default\n  fee = await contract.methods.getBurnerFee(nft.nftInfo?.gnome, nft.nftInfo?.breedCount, nft.nftInfo?.lastBreedTime).call().catch((e: Error) => {\n    console.error(\"Could not get NFT's pool Id, defaulting to `0`\", e);\n  })\n\n  return fee;\n}\n\nexport const getNftPoolIdBalance = async (provider: provider, contract: any, nftId: string, userAddress: string) => {\n  let poolId = \"0\"; // set default\n  poolId = await contract.methods.nftPool(nftId).call().catch((e: Error) => {\n    console.error(\"Could not get NFT's pool Id, defaulting to `0`\", e);\n  })\n\n  const poolContactAddress = await contract.methods.pools(poolId).call().catch((e: Error) => {\n    console.error(\"Could not get NFT's balance\", e);\n  })\n  const lpWrapperContract = getLPTokenWrapperContract(provider, poolContactAddress)\n  const lpBalance = await lpWrapperContract.methods.originalBalanceOf(nftId).call().catch((e: Error) => {\n    console.error(\"Could not get NFT's balance\", e);\n  })\n  /*\n    lpBalance = await contract.methods.balanceOf(nftId).call().catch((e: Error) => {\n      console.error(\"Could not get NFT's balance\", e);\n    })\n  */\n\n  return { poolId, lpBalance: new BigNumber(lpBalance).dividedBy(new BigNumber(10).pow(18)) };\n}\n\nexport const getERC20Contract = (provider: provider, address: string) => {\n  const web3 = new Web3(provider)\n  const contract = new web3.eth.Contract(ERC20ABI.abi as unknown as AbiItem, address)\n  return contract\n}\n\nexport const getERC1155Contract = (provider: provider, address: string) => {\n  const web3 = new Web3(provider)\n  const contract = new web3.eth.Contract(ERC1155.abi as unknown as AbiItem, address)\n  return contract\n}\n\nexport const getLPTokenWrapperContract = (provider: provider, address: string) => {\n  const web3 = new Web3(provider)\n  const contract = new web3.eth.Contract(StrainNFTLPTokenWrapper.abi as unknown as AbiItem, address)\n  return contract\n}\n\nexport const bnToDec = (bn: BigNumber, decimals = 18) => {\n  return bn.dividedBy(new BigNumber(10).pow(decimals)).toNumber()\n}\n\nexport const decToBn = (dec: number, decimals = 18) => {\n  return new BigNumber(dec).multipliedBy(new BigNumber(10).pow(decimals))\n}\n\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18) => {\n  return balance.dividedBy(new BigNumber(10).pow(decimals)).toFixed()\n}\n\nexport const setItemValue = (items: boolean[], index: string, value: boolean) => {\n  items[Number(index)] = value\n  return items;\n}\n\nexport const getItemValue = (items: boolean[] = [], index: string = \"0\"): boolean => {\n  return items[Number(index)]\n}\n"]},"metadata":{},"sourceType":"module"}