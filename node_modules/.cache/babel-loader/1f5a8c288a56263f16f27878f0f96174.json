{"ast":null,"code":"import { ethers } from \"ethers\";\nimport Web3 from \"web3\";\nimport BigNumber from \"bignumber.js\";\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80\n});\nconst GAS_LIMIT = {\n  STAKING: {\n    DEFAULT: 400000,\n    SNX: 850000\n  }\n};\nconst knownSnapshots = {\n  \"0x110f2263e5adf63ea82514bbec3440762edefed1bdf4f0ee06a9458fc3e7e2e7\": \"https://snapshot.page/#/yamv2/proposal/QmTCXW2bhETiwHoDqeyxoDA4CwjURyfc6T4fAJLGz3yKj9\",\n  \"0xad13b6cc77c781ee81529b3bcac2c2e81f588eede376fc9b2c75879cd20ffdc7\": \"https://snapshot.page/#/yam/proposal/QmVzvqJwnnEhnJGxDoKZNNkeRXvrmscrhwpLbZrQxw1mkf\",\n  \"0xd00307c2982b4fba5790f238ff8df9faab975794dd4144eddbd30ac67eb873ed\": \"https://snapshot.page/#/yam/proposal/QmQxMTQkz7fW3AXma69ueEwhq5Sf8HNdUYseEFQFw3uKEx\"\n};\nexport const getPoolStartTime = async poolContract => {\n  return await poolContract.methods.starttime().call();\n};\nexport const stake = async (poolContract, provider, poolId, amount, account, onTxHash) => {\n  let now = new Date().getTime() / 1000; // const gas = GAS_LIMIT.STAKING[tokenName.toUpperCase()] || GAS_LIMIT.STAKING.DEFAULT;\n\n  const gas = GAS_LIMIT.STAKING.DEFAULT;\n\n  if (now >= 1597172400) {\n    return poolContract.methods.stake(String(new BigNumber(amount).times(new BigNumber(10).pow(18))), String(new BigNumber(poolId))).send({\n      from: account,\n      gas: 400000\n    }, async (error, txHash) => {\n      if (error) {\n        onTxHash && onTxHash(\"\");\n        console.log(\"Staking error\", error);\n        return false;\n      }\n\n      onTxHash && onTxHash(txHash);\n      const status = await waitTransaction(provider, txHash);\n\n      if (!status) {\n        console.log(\"Staking transaction failed.\");\n        return false;\n      }\n\n      return true;\n    });\n  } else {\n    alert(\"pool not active\");\n  }\n};\nexport const unstake = async (poolContract, provider, poolId, amount, account, onTxHash) => {\n  let now = new Date().getTime() / 1000;\n\n  if (now >= 1597172400) {\n    return poolContract.methods.withdraw(String(new BigNumber(amount).times(new BigNumber(10).pow(18))), String(new BigNumber(poolId))).send({\n      from: account,\n      gas: 600000\n    }, async (error, txHash) => {\n      if (error) {\n        onTxHash && onTxHash(\"\");\n        console.log(\"Unstaking error\", error);\n        return false;\n      }\n\n      onTxHash && onTxHash(txHash);\n      const status = await waitTransaction(provider, txHash);\n\n      if (!status) {\n        console.log(\"Unstaking transaction failed.\");\n        return false;\n      }\n\n      return true;\n    });\n  } else {\n    alert(\"pool not active\");\n  }\n};\nexport const harvest = async (poolContract, provider, account, onTxHash) => {\n  return poolContract.methods.getReward().send({\n    from: account,\n    gas: 800000\n  }, async (error, txHash) => {\n    if (error) {\n      onTxHash && onTxHash(\"\");\n      console.log(\"Claim error\", error);\n      return false;\n    }\n\n    onTxHash && onTxHash(txHash);\n    const status = await waitTransaction(provider, txHash);\n\n    if (!status) {\n      console.log(\"Claim transaction failed.\");\n      return false;\n    }\n\n    return true;\n  });\n};\nexport const harvestNfts = async (poolContract, provider, account, nftids, onTxHash) => {\n  console.log(\"getRewards nftids\", nftids);\n  return poolContract.methods.getReward(nftids).send({\n    from: account,\n    gas: 800000\n  }, async (error, txHash) => {\n    if (error) {\n      onTxHash && onTxHash(\"\");\n      console.log(\"Claim error\", error);\n      return false;\n    }\n\n    onTxHash && onTxHash(txHash);\n    const status = await waitTransaction(provider, txHash);\n\n    if (!status) {\n      console.log(\"Claim transaction failed.\");\n      return false;\n    }\n\n    return true;\n  });\n};\nexport const redeem = async (poolContract, provider, poolId, account, onTxHash) => {\n  let now = new Date().getTime() / 1000;\n\n  if (now >= 1597172400) {\n    return poolContract.methods.exit(String(new BigNumber(poolId))).send({\n      from: account,\n      gas: 400000\n    }, async (error, txHash) => {\n      if (error) {\n        onTxHash && onTxHash(\"\");\n        console.log(\"Redeem error\", error);\n        return false;\n      }\n\n      onTxHash && onTxHash(txHash);\n      const status = await waitTransaction(provider, txHash);\n\n      if (!status) {\n        console.log(\"Redeem transaction failed.\");\n        return false;\n      }\n\n      return true;\n    });\n  } else {\n    alert(\"pool not active\");\n  }\n};\nexport const singleExit = async (poolContract, provider, amount, account, onTxHash) => {\n  return poolContract.methods.exit(String(new BigNumber(amount).times(new BigNumber(10).pow(18)))).send({\n    from: account,\n    gas: 400000\n  }, async (error, txHash) => {\n    if (error) {\n      onTxHash && onTxHash(\"\");\n      console.log(\"Redeem error\", error);\n      return false;\n    }\n\n    onTxHash && onTxHash(txHash);\n    const status = await waitTransaction(provider, txHash);\n\n    if (!status) {\n      console.log(\"Redeem transaction failed.\");\n      return false;\n    }\n\n    return true;\n  });\n};\nexport const approve = async (tokenContract, poolContract, account) => {\n  return tokenContract.methods.approve(poolContract.options.address, String(ethers.constants.MaxUint256)).send({\n    from: account,\n    gas: 80000\n  });\n};\nexport const getPoolContracts = async yam => {\n  const pools = Object.keys(yam.contracts).filter(c => c.indexOf(\"_pool\") !== -1).reduce((acc, cur) => {\n    const newAcc = { ...acc\n    };\n    newAcc[cur] = yam.contracts[cur];\n    return newAcc;\n  }, {});\n  return pools;\n};\nexport const getSingleStakeBalances = async (pool, account) => {\n  let stakes = [];\n\n  try {\n    stakes = await pool.methods.getStakes(account).call();\n  } catch (e) {\n    console.error(\"can not get user stakes\", e);\n  }\n\n  return stakes;\n};\nexport const getExitableAmount = async (pool, account) => {\n  let amount = new BigNumber(0);\n\n  try {\n    amount = await pool.methods.exitableAmount(account).call();\n  } catch (e) {\n    console.error(\"can not get exitable amount\", e);\n  }\n\n  return amount;\n};\nexport const getSingleStakingEndTime = async (yam, pool) => {\n  const endTime = await pool.methods.endTime().call();\n  return yam.toBigN(endTime || 0);\n};\nexport const stxpSingleRedeem = async (poolContract, provider, amount, account, onTxHash) => {\n  return poolContract.methods.exit(String(amount)).send({\n    from: account,\n    gas: 400000\n  }, async (error, txHash) => {\n    if (error) {\n      onTxHash && onTxHash(\"\");\n      console.log(\"Redeem error\", error);\n      return false;\n    }\n\n    onTxHash && onTxHash(txHash);\n    const status = await waitTransaction(provider, txHash);\n\n    if (!status) {\n      console.log(\"Redeem transaction failed.\");\n      return false;\n    }\n\n    return true;\n  });\n};\nexport const stxpSingleHarvest = async (poolContract, provider, account, onTxHash) => {\n  return poolContract.methods.redeem().send({\n    from: account,\n    gas: 400000\n  }, async (error, txHash) => {\n    if (error) {\n      onTxHash && onTxHash(\"\");\n      console.log(\"Redeem error\", error);\n      return false;\n    }\n\n    onTxHash && onTxHash(txHash);\n    const status = await waitTransaction(provider, txHash);\n\n    if (!status) {\n      console.log(\"Redeem transaction failed.\");\n      return false;\n    }\n\n    return true;\n  });\n};\nexport const stxpSingleStake = async (poolContract, provider, duration, amount, account, onTxHash) => {\n  return poolContract.methods.stake(String(new BigNumber(amount).times(new BigNumber(10).pow(18))), duration).send({\n    from: account,\n    gas: 400000\n  }, async (error, txHash) => {\n    if (error) {\n      onTxHash && onTxHash(\"\");\n      console.log(\"Staking error\", error);\n      return false;\n    }\n\n    onTxHash && onTxHash(txHash);\n    const status = await waitTransaction(provider, txHash);\n\n    if (!status) {\n      console.log(\"Staking transaction failed.\");\n      return false;\n    }\n\n    return true;\n  });\n};\nexport const generateNft = async (poolContract, provider, poolId, amount, name, account, onTxHash) => {\n  console.log(\"create NFT\", String(poolId), String(new BigNumber(amount).times(new BigNumber(10).pow(18))), name);\n  return poolContract.methods.craftStrainNFT(String(poolId), String(new BigNumber(amount).times(new BigNumber(10).pow(18))), name).send({\n    from: account,\n    gas: 1300000\n  }, async (error, txHash) => {\n    if (error) {\n      onTxHash && onTxHash(\"\");\n      console.log(\"create NFT error\", error);\n      return false;\n    }\n\n    onTxHash && onTxHash(txHash);\n    const status = await waitTransaction(provider, txHash);\n\n    if (!status) {\n      console.log(\"Creating NFT transaction failed.\");\n      return false;\n    }\n\n    return true;\n  });\n};\nexport const addNftStake = async (poolContract, provider, poolId, nftId, amount, stxpTokens, account, onTxHash) => {\n  console.log(\"add stake to NFT\", String(poolId), amount, stxpTokens);\n  const lpAmount = String(new BigNumber(amount).times(new BigNumber(10).pow(18)));\n  const stxpAmount = String(new BigNumber(stxpTokens).times(new BigNumber(10).pow(18)));\n  return poolContract.methods.stake(String(poolId), nftId, lpAmount, stxpAmount).send({\n    from: account,\n    gas: 1300000\n  }, async (error, txHash) => {\n    if (error) {\n      onTxHash && onTxHash(\"\");\n      console.log(\"create NFT error\", error);\n      return false;\n    }\n\n    onTxHash && onTxHash(txHash);\n    const status = await waitTransaction(provider, txHash);\n\n    if (!status) {\n      console.log(\"Creating NFT transaction failed.\");\n      return false;\n    }\n\n    return true;\n  });\n};\nexport const burnNft = async (poolContract, provider, nftId, poolId, account, onTxHash) => {\n  return poolContract.methods.burn(String(nftId), String(poolId)).send({\n    from: account,\n    gas: 400000\n  }, async (error, txHash) => {\n    if (error) {\n      onTxHash && onTxHash(\"\");\n      console.log(\"burn NFT error\", error);\n      return false;\n    }\n\n    onTxHash && onTxHash(txHash);\n    const status = await waitTransaction(provider, txHash);\n\n    if (!status) {\n      console.log(\"Destroying NFT transaction failed.\");\n      return false;\n    }\n\n    return true;\n  });\n};\nexport const breedNfts = async (crafterContract, provider, poolId, amount, stxpAmount, stxpBurnAmount, name, parentOne, parentTwo, account, onTxHash) => {\n  console.log(\"breading NFTs\", String(poolId), String(new BigNumber(amount).times(new BigNumber(10).pow(18))), String(new BigNumber(stxpAmount).times(new BigNumber(10).pow(18))), String(new BigNumber(stxpBurnAmount).times(new BigNumber(10).pow(18))), name);\n  return crafterContract.methods.breedStrainNFT(String(poolId), String(new BigNumber(amount).times(new BigNumber(10).pow(18))), String(new BigNumber(stxpAmount).times(new BigNumber(10).pow(18))), String(new BigNumber(stxpBurnAmount).times(new BigNumber(10).pow(18))), name, String(parentOne), String(parentTwo)).send({\n    from: account,\n    gas: 1300000\n  }, async (error, txHash) => {\n    if (error) {\n      onTxHash && onTxHash(\"\");\n      console.log(\"breeding NFTs error\", error);\n      return false;\n    }\n\n    onTxHash && onTxHash(txHash);\n    const status = await waitTransaction(provider, txHash);\n\n    if (!status) {\n      console.log(\"Breeding NFT transaction failed.\");\n      return false;\n    }\n\n    return true;\n  });\n};\nexport const getSingleEarned = async (yam, pool, account) => {\n  return yam.toBigN(await pool.methods.withdrawableRewards(account).call());\n};\nexport const getEarned = async (yam, pool, account) => {\n  return yam.toBigN(await pool.methods.earned(account).call());\n};\nexport const getNftEarned = async (yam, crafter, account, nftid) => {\n  return yam.toBigN(await crafter.methods.earned(account, nftid).call());\n};\nexport const getCanBreed = async (crafter, nftId1, nftId2) => {\n  return await crafter.methods.canBreed(nftId1, nftId2).call();\n};\nexport const getStaked = async (yam, pool, account) => {\n  return yam.toBigN(await pool.methods.balanceOf(account).call());\n};\nexport const getCurrentPrice = async yam => {\n  // FORBROCK: get current YAM price\n  return new BigNumber(await yam.contracts.rebaser.methods.getCurrentTWAP().call());\n};\nexport const getTargetPrice = async yam => {\n  return yam.toBigN(1).toFixed(2);\n};\nexport const getCirculatingSupply = async yam => {\n  let now = await yam.web3.eth.getBlock(\"latest\");\n  let scalingFactor = yam.toBigN(await yam.contracts.yamV3.methods.yamsScalingFactor().call());\n  let starttime = yam.toBigN(await yam.contracts.eth_pool.methods.starttime().call()).toNumber();\n  let timePassed = now[\"timestamp\"] - starttime;\n\n  if (timePassed < 0) {\n    return 0;\n  }\n\n  let yamsDistributed = yam.toBigN(8 * timePassed * 250000 / 625000); //yams from first 8 pools\n\n  let starttimePool2 = yam.toBigN(await yam.contracts.ycrv_pool.methods.starttime().call()).toNumber();\n  timePassed = now[\"timestamp\"] - starttime;\n  let pool2Yams = yam.toBigN(timePassed * 1500000 / 625000); // yams from second pool. note: just accounts for first week\n\n  let circulating = pool2Yams.plus(yamsDistributed).times(scalingFactor).dividedBy(10 ** 36).toFixed(2);\n  return circulating;\n};\nexport const getLastRebaseTimestamp = async yam => {\n  try {\n    const lastTimestamp = yam.toBigN(await yam.contracts.rebaser.methods.lastRebaseTimestampSec().call()).toNumber();\n    return lastTimestamp;\n  } catch (e) {\n    console.log(e);\n  }\n};\nexport const delegate = async (yam, account, onTxHash) => {\n  return yam.contracts.yamV3.methods.delegate(account).send({\n    from: account,\n    gas: 150000\n  }, async (error, txHash) => {\n    if (error) {\n      onTxHash && onTxHash(\"\");\n      console.log(\"Delegate error\", error);\n      return false;\n    }\n\n    onTxHash && onTxHash(txHash);\n    const status = await waitTransaction(yam.web3.eth, txHash);\n\n    if (!status) {\n      console.log(\"Delegate transaction failed.\");\n      return false;\n    }\n\n    return true;\n  });\n};\nexport const didDelegate = async (yam, account) => {\n  return (await yam.contracts.yamV3.methods.delegates(account).call()) === account;\n};\nexport const vote = async (yam, proposal, side, account, onTxHash) => {\n  return yam.contracts.gov2.methods.castVote(proposal, side).send({\n    from: account,\n    gas: 130000\n  }, async (error, txHash) => {\n    if (error) {\n      onTxHash && onTxHash(\"\");\n      console.log(\"Vote error\", error);\n      return false;\n    }\n\n    onTxHash && onTxHash(txHash);\n    const status = await waitTransaction(yam.web3.eth, txHash);\n\n    if (!status) {\n      console.log(\"Vote transaction failed.\");\n      return false;\n    }\n\n    return true;\n  });\n};\nconst stateMap = {\n  0: \"Pending\",\n  1: \"Active\",\n  2: \"Canceled\",\n  3: \"Defeated\",\n  4: \"Succeeded\",\n  5: \"Queued\",\n  6: \"Expired\",\n  7: \"Executed\"\n};\nexport const getProposals = async yam => {\n  let BASE24 = new BigNumber(10).pow(24);\n  const v1Proposals = await yam.contracts.gov.getPastEvents(\"ProposalCreated\", {\n    fromBlock: 10887059,\n    toBlock: 10926022\n  });\n  let proposals = [];\n  let v1Descriptions = [];\n\n  for (let i = 0; i < v1Proposals.length; i++) {\n    let id = v1Proposals[i][\"returnValues\"][\"id\"];\n    let targets = [];\n\n    for (let j = 0; j < v1Proposals[i][\"returnValues\"][\"targets\"].length; j++) {\n      if (yam.contracts.names[v1Proposals[i][\"returnValues\"][\"targets\"][j]]) {\n        targets.push(yam.contracts.names[v1Proposals[i][\"returnValues\"][\"targets\"][j]]);\n      } else {\n        targets.push(v1Proposals[i][\"returnValues\"][\"targets\"][j]);\n      }\n    }\n\n    let sigs = [];\n\n    for (let j = 0; j < v1Proposals[i][\"returnValues\"][\"signatures\"].length; j++) {\n      if (yam.contracts.names[v1Proposals[i][\"returnValues\"][\"signatures\"][j]]) {\n        sigs.push(yam.contracts.names[v1Proposals[i][\"returnValues\"][\"signatures\"][j]]);\n      } else {\n        sigs.push(v1Proposals[i][\"returnValues\"][\"signatures\"][j]);\n      }\n    }\n\n    let ins = [];\n\n    for (let j = 0; j < v1Proposals[i][\"returnValues\"][\"calldatas\"].length; j++) {\n      let abi_types = v1Proposals[i][\"returnValues\"][\"signatures\"][j].split(\"(\")[1].split(\")\").slice(0, -1)[0].split(\",\");\n      let result = yam.web3.eth.abi.decodeParameters(abi_types, v1Proposals[i][\"returnValues\"][\"calldatas\"][j]);\n      let fr = [];\n\n      for (let k = 0; k < result.__length__; k++) {\n        fr.push(result[k.toString()]);\n      }\n\n      ins.push(fr);\n    }\n\n    let proposal = await yam.contracts.gov.methods.proposals(id).call();\n    let fv = new BigNumber(proposal[\"forVotes\"]).div(BASE24);\n    let av = new BigNumber(proposal[\"againstVotes\"]).div(BASE24);\n    let more;\n\n    if (knownSnapshots[v1Proposals[i][\"transactionHash\"]]) {\n      more = knownSnapshots[v1Proposals[i][\"transactionHash\"]];\n    }\n\n    proposals.push({\n      gov: \"gov\",\n      description: v1Proposals[i][\"returnValues\"][\"description\"],\n      state: stateMap[await yam.contracts.gov.methods.state(id).call()],\n      targets: targets,\n      signatures: sigs,\n      inputs: ins,\n      forVotes: fv.toNumber(),\n      againstVotes: av.toNumber(),\n      id: id,\n      start: v1Proposals[i][\"returnValues\"][\"startBlock\"],\n      end: v1Proposals[i][\"returnValues\"][\"endBlock\"],\n      hash: v1Proposals[i][\"transactionHash\"],\n      more: more\n    });\n  }\n\n  const v2Proposals = await yam.contracts.gov2.getPastEvents(\"ProposalCreated\", {\n    fromBlock: 10926022,\n    toBlock: \"latest\"\n  });\n\n  for (let i = 0; i < v2Proposals.length; i++) {\n    let id = v2Proposals[i][\"returnValues\"][\"id\"];\n    let targets = [];\n\n    for (let j = 0; j < v2Proposals[i][\"returnValues\"][\"targets\"].length; j++) {\n      if (yam.contracts.names[v2Proposals[i][\"returnValues\"][\"targets\"][j]]) {\n        targets.push(yam.contracts.names[v2Proposals[i][\"returnValues\"][\"targets\"][j]]);\n      } else {\n        targets.push(v2Proposals[i][\"returnValues\"][\"targets\"][j]);\n      }\n    }\n\n    let sigs = [];\n\n    for (let j = 0; j < v2Proposals[i][\"returnValues\"][\"signatures\"].length; j++) {\n      if (yam.contracts.names[v2Proposals[i][\"returnValues\"][\"signatures\"][j]]) {\n        sigs.push(yam.contracts.names[v2Proposals[i][\"returnValues\"][\"signatures\"][j]]);\n      } else {\n        sigs.push(v2Proposals[i][\"returnValues\"][\"signatures\"][j]);\n      }\n    }\n\n    let ins = [];\n\n    for (let j = 0; j < v2Proposals[i][\"returnValues\"][\"calldatas\"].length; j++) {\n      let abi_types = v2Proposals[i][\"returnValues\"][\"signatures\"][j].split(\"(\")[1].split(\")\").slice(0, -1)[0].split(\",\");\n      let result = yam.web3.eth.abi.decodeParameters(abi_types, v2Proposals[i][\"returnValues\"][\"calldatas\"][j]);\n      let fr = [];\n\n      for (let k = 0; k < result.__length__; k++) {\n        fr.push(result[k.toString()]);\n      }\n\n      ins.push(fr);\n    }\n\n    let proposal = await yam.contracts.gov2.methods.proposals(id).call();\n    let fv = new BigNumber(proposal[\"forVotes\"]).div(BASE24);\n    let av = new BigNumber(proposal[\"againstVotes\"]).div(BASE24);\n    let more;\n\n    if (knownSnapshots[v2Proposals[i][\"transactionHash\"]]) {\n      more = knownSnapshots[v2Proposals[i][\"transactionHash\"]];\n    }\n\n    proposals.push({\n      gov: \"gov2\",\n      description: v2Proposals[i][\"returnValues\"][\"description\"],\n      state: stateMap[await yam.contracts.gov2.methods.state(id).call()],\n      targets: targets,\n      signatures: sigs,\n      inputs: ins,\n      forVotes: fv.toNumber(),\n      againstVotes: av.toNumber(),\n      id: id,\n      start: v2Proposals[i][\"returnValues\"][\"startBlock\"],\n      end: v2Proposals[i][\"returnValues\"][\"endBlock\"],\n      hash: v2Proposals[i][\"transactionHash\"],\n      more: more\n    });\n  } // proposals[1].state = \"Active\"\n  // proposals[0].state = \"Active\"\n\n\n  return proposals;\n};\nexport const getVotingPowers = async (yam, proposals, account) => {\n  let BASE24 = new BigNumber(10).pow(24);\n  let powers = [];\n\n  for (let i = 0; i < proposals.length; i++) {\n    if (proposals[i].gov == \"gov\") {\n      let receipt = await yam.contracts.gov.methods.getReceipt(proposals[i].id, account).call();\n      let power = new BigNumber(receipt[2]).div(BASE24).toNumber();\n\n      if (power == 0) {\n        power = new BigNumber(await yam.contracts.yamV3.methods.getPriorVotes(account, proposals[i].start).call()).div(BASE24).toNumber();\n      }\n\n      powers.push({\n        hash: proposals[i].hash,\n        power: power,\n        voted: receipt[0],\n        side: receipt[1]\n      });\n    } else {\n      let receipt = await yam.contracts.gov2.methods.getReceipt(proposals[i].id, account).call();\n      let power = new BigNumber(receipt[2]).div(BASE24).toNumber();\n\n      if (power == 0) {\n        power = new BigNumber(await yam.contracts.yamV3.methods.getPriorVotes(account, proposals[i].start).call()).div(BASE24).toNumber();\n      }\n\n      powers.push({\n        hash: proposals[i].hash,\n        power: power,\n        voted: receipt[0],\n        side: receipt[1]\n      });\n    }\n  }\n\n  return powers;\n};\nexport const getCurrentVotingPower = async (yam, account) => {\n  let BASE24 = new BigNumber(10).pow(24);\n  return new BigNumber(await yam.contracts.yamV3.methods.getCurrentVotes(account).call()).dividedBy(BASE24).toNumber();\n};\nexport const getVotes = async yam => {\n  const votesRaw = new BigNumber(await yam.contracts.yam.methods.getCurrentVotes(\"0x683A78bA1f6b25E29fbBC9Cd1BFA29A51520De84\").call()).dividedBy(10 ** 24);\n  return votesRaw;\n};\nexport const getScalingFactor = async yam => {\n  return new BigNumber(await yam.contracts.yamV3.methods.yamsScalingFactor().call());\n};\nexport const getDelegatedBalance = async (yam, account) => {\n  return new BigNumber(await yam.contracts.yam.methods.balanceOfUnderlying(account).call()).dividedBy(10 ** 24);\n};\nexport const migrate = async (yam, account) => {\n  return yam.contracts.yamV2migration.methods.migrate().send({\n    from: account,\n    gas: 320000\n  });\n};\nexport const getMigrationEndTime = async yam => {\n  return yam.toBigN(await yam.contracts.yamV2migration.methods.startTime().call()).plus(yam.toBigN(86400 * 3)).toNumber();\n};\nexport const getV2Supply = async yam => {\n  return new BigNumber(await yam.contracts.yamV2.methods.totalSupply().call());\n};\nexport const migrationStarted = async yam => {\n  let now = new Date().getTime() / 1000; // get current time\n\n  let startTime = await yam.contracts.migrator.methods.startTime().call();\n  let token_initialized = await yam.contracts.migrator.methods.token_initialized().call();\n  let delegatorRewardsSet = await yam.contracts.migrator.methods.delegatorRewardsSet().call();\n\n  if (now >= startTime && token_initialized && delegatorRewardsSet) {\n    return true;\n  }\n\n  return false;\n};\n\nconst yamToFragment = async (yam, amount) => {\n  let BASE24 = new BigNumber(10).pow(24);\n  let scalingFactor = new BigNumber(await yam.contracts.yamV3.methods.yamsScalingFactor().call());\n  return amount.multipliedBy(scalingFactor).dividedBy(BASE24);\n};\n\nexport const currVested = async (yam, account) => {\n  let BASE = new BigNumber(10).pow(18);\n  let vested = new BigNumber(await yam.contracts.migrator.methods.vested(account).call());\n  let amt = await yamToFragment(yam, vested);\n  return amt.dividedBy(BASE);\n};\nexport const currUnclaimedDelegatorRewards = async (yam, account) => {\n  let BASE = new BigNumber(10).pow(18);\n  /*\n  let start = new BigNumber(1600444800);\n  let duration = new BigNumber(90 * 86400);\n  let now = new BigNumber(new Date().getTime() / 1000);\n  let percDone = now.minus(start).dividedBy(duration);\n  if (percDone.gt(1)) {\n    percDone = new BigNumber(1)\n  }\n  */\n  //let totalVesting = new BigNumber(await yam.contracts.migrator.methods.delegator_vesting(account).call());\n  //let claimed = new BigNumber(await yam.contracts.migrator.methods.delegator_claimed(account).call());\n  //let unclaimed = ((totalVesting.multipliedBy(percDone)).minus(claimed));\n\n  let unclaimed = new BigNumber(await yam.contracts.strneth_pool.methods.earned(account).call());\n  let amt = await yamToFragment(yam, unclaimed);\n  return amt.dividedBy(BASE);\n};\nexport const currUnclaimedMigratorVesting = async (yam, account) => {\n  let BASE = new BigNumber(10).pow(18);\n  let BASE24 = new BigNumber(10).pow(24);\n  let start = new BigNumber(1600444800);\n  let duration = new BigNumber(30 * 86400);\n  let now = new BigNumber(new Date().getTime() / 1000);\n  let percDone = now.minus(start).dividedBy(duration);\n\n  if (percDone.gt(1)) {\n    percDone = new BigNumber(1);\n  }\n\n  let totalVesting = new BigNumber(await yam.contracts.migrator.methods.vesting(account).call());\n  let claimed = new BigNumber(await yam.contracts.migrator.methods.claimed(account).call());\n  let unclaimed = totalVesting.multipliedBy(percDone).minus(claimed);\n  let amt = await yamToFragment(yam, unclaimed);\n  return amt.dividedBy(BASE);\n};\nexport const delegatorRewards = async (yam, account) => {\n  let BASE = new BigNumber(10).pow(18);\n  let BASE24 = new BigNumber(10).pow(24);\n  let rewards = new BigNumber(await yam.contracts.migrator.methods.delegator_vesting(account).call());\n  let amt = await yamToFragment(yam, rewards);\n  return amt.dividedBy(BASE);\n};\nexport const migrateV3 = async (yam, account, onTxHash) => {\n  return await yam.contracts.migrator.methods.migrate().send({\n    from: account,\n    gas: 200000\n  }, async (error, txHash) => {\n    if (error) {\n      onTxHash && onTxHash(\"\");\n      console.log(\"Migration error\", error);\n      return false;\n    }\n\n    onTxHash && onTxHash(txHash);\n    const status = await waitTransaction(yam.web3.eth, txHash);\n\n    if (!status) {\n      console.log(\"Migration transaction failed.\");\n      return false;\n    }\n\n    return true;\n  });\n};\nexport const claimVested = async (yam, account, onTxHash) => {\n  return await yam.contracts.migrator.methods.claimVested().send({\n    from: account,\n    gas: 140000\n  });\n};\n\nconst sleep = ms => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n};\n\nexport const waitTransaction = async (provider, txHash) => {\n  const web3 = new Web3(provider);\n  let txReceipt = null;\n\n  while (txReceipt === null) {\n    const r = await web3.eth.getTransactionReceipt(txHash);\n    txReceipt = r;\n    await sleep(2000);\n  }\n\n  return txReceipt.status;\n};","map":{"version":3,"sources":["/Users/hienle/Documents/GitHub/comfortNFT/src/yam-sdk/utils/index.js"],"names":["ethers","Web3","BigNumber","config","EXPONENTIAL_AT","DECIMAL_PLACES","GAS_LIMIT","STAKING","DEFAULT","SNX","knownSnapshots","getPoolStartTime","poolContract","methods","starttime","call","stake","provider","poolId","amount","account","onTxHash","now","Date","getTime","gas","String","times","pow","send","from","error","txHash","console","log","status","waitTransaction","alert","unstake","withdraw","harvest","getReward","harvestNfts","nftids","redeem","exit","singleExit","approve","tokenContract","options","address","constants","MaxUint256","getPoolContracts","yam","pools","Object","keys","contracts","filter","c","indexOf","reduce","acc","cur","newAcc","getSingleStakeBalances","pool","stakes","getStakes","e","getExitableAmount","exitableAmount","getSingleStakingEndTime","endTime","toBigN","stxpSingleRedeem","stxpSingleHarvest","stxpSingleStake","duration","generateNft","name","craftStrainNFT","addNftStake","nftId","stxpTokens","lpAmount","stxpAmount","burnNft","burn","breedNfts","crafterContract","stxpBurnAmount","parentOne","parentTwo","breedStrainNFT","getSingleEarned","withdrawableRewards","getEarned","earned","getNftEarned","crafter","nftid","getCanBreed","nftId1","nftId2","canBreed","getStaked","balanceOf","getCurrentPrice","rebaser","getCurrentTWAP","getTargetPrice","toFixed","getCirculatingSupply","web3","eth","getBlock","scalingFactor","yamV3","yamsScalingFactor","eth_pool","toNumber","timePassed","yamsDistributed","starttimePool2","ycrv_pool","pool2Yams","circulating","plus","dividedBy","getLastRebaseTimestamp","lastTimestamp","lastRebaseTimestampSec","delegate","didDelegate","delegates","vote","proposal","side","gov2","castVote","stateMap","getProposals","BASE24","v1Proposals","gov","getPastEvents","fromBlock","toBlock","proposals","v1Descriptions","i","length","id","targets","j","names","push","sigs","ins","abi_types","split","slice","result","abi","decodeParameters","fr","k","__length__","toString","fv","div","av","more","description","state","signatures","inputs","forVotes","againstVotes","start","end","hash","v2Proposals","getVotingPowers","powers","receipt","getReceipt","power","getPriorVotes","voted","getCurrentVotingPower","getCurrentVotes","getVotes","votesRaw","getScalingFactor","getDelegatedBalance","balanceOfUnderlying","migrate","yamV2migration","getMigrationEndTime","startTime","getV2Supply","yamV2","totalSupply","migrationStarted","migrator","token_initialized","delegatorRewardsSet","yamToFragment","multipliedBy","currVested","BASE","vested","amt","currUnclaimedDelegatorRewards","unclaimed","strneth_pool","currUnclaimedMigratorVesting","percDone","minus","gt","totalVesting","vesting","claimed","delegatorRewards","rewards","delegator_vesting","migrateV3","claimVested","sleep","ms","Promise","resolve","setTimeout","txReceipt","r","getTransactionReceipt"],"mappings":"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","sourcesContent":["import { ethers } from \"ethers\";\nimport Web3 from \"web3\";\nimport BigNumber from \"bignumber.js\";\n\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n});\n\nconst GAS_LIMIT = {\n  STAKING: {\n    DEFAULT: 400000,\n    SNX: 850000,\n  },\n};\n\nconst knownSnapshots = {\n  \"0x110f2263e5adf63ea82514bbec3440762edefed1bdf4f0ee06a9458fc3e7e2e7\":\n    \"https://snapshot.page/#/yamv2/proposal/QmTCXW2bhETiwHoDqeyxoDA4CwjURyfc6T4fAJLGz3yKj9\",\n  \"0xad13b6cc77c781ee81529b3bcac2c2e81f588eede376fc9b2c75879cd20ffdc7\":\n    \"https://snapshot.page/#/yam/proposal/QmVzvqJwnnEhnJGxDoKZNNkeRXvrmscrhwpLbZrQxw1mkf\",\n  \"0xd00307c2982b4fba5790f238ff8df9faab975794dd4144eddbd30ac67eb873ed\":\n    \"https://snapshot.page/#/yam/proposal/QmQxMTQkz7fW3AXma69ueEwhq5Sf8HNdUYseEFQFw3uKEx\",\n};\n\nexport const getPoolStartTime = async (poolContract) => {\n  return await poolContract.methods.starttime().call();\n};\n\nexport const stake = async (\n  poolContract,\n  provider,\n  poolId,\n  amount,\n  account,\n  onTxHash\n) => {\n  let now = new Date().getTime() / 1000;\n  // const gas = GAS_LIMIT.STAKING[tokenName.toUpperCase()] || GAS_LIMIT.STAKING.DEFAULT;\n  const gas = GAS_LIMIT.STAKING.DEFAULT;\n  if (now >= 1597172400) {\n    return poolContract.methods\n      .stake(\n        String(new BigNumber(amount).times(new BigNumber(10).pow(18))),\n        String(new BigNumber(poolId))\n      )\n      .send({ from: account, gas: 400000 }, async (error, txHash) => {\n        if (error) {\n          onTxHash && onTxHash(\"\");\n          console.log(\"Staking error\", error);\n          return false;\n        }\n        onTxHash && onTxHash(txHash);\n        const status = await waitTransaction(provider, txHash);\n        if (!status) {\n          console.log(\"Staking transaction failed.\");\n          return false;\n        }\n        return true;\n      });\n  } else {\n    alert(\"pool not active\");\n  }\n};\n\nexport const unstake = async (\n  poolContract,\n  provider,\n  poolId,\n  amount,\n  account,\n  onTxHash\n) => {\n  let now = new Date().getTime() / 1000;\n  if (now >= 1597172400) {\n    return poolContract.methods\n      .withdraw(\n        String(new BigNumber(amount).times(new BigNumber(10).pow(18))),\n        String(new BigNumber(poolId))\n      )\n      .send({ from: account, gas: 600000 }, async (error, txHash) => {\n        if (error) {\n          onTxHash && onTxHash(\"\");\n          console.log(\"Unstaking error\", error);\n          return false;\n        }\n        onTxHash && onTxHash(txHash);\n        const status = await waitTransaction(provider, txHash);\n        if (!status) {\n          console.log(\"Unstaking transaction failed.\");\n          return false;\n        }\n        return true;\n      });\n  } else {\n    alert(\"pool not active\");\n  }\n};\n\nexport const harvest = async (poolContract, provider, account, onTxHash) => {\n  return poolContract.methods\n    .getReward()\n    .send({ from: account, gas: 800000 }, async (error, txHash) => {\n      if (error) {\n        onTxHash && onTxHash(\"\");\n        console.log(\"Claim error\", error);\n        return false;\n      }\n      onTxHash && onTxHash(txHash);\n      const status = await waitTransaction(provider, txHash);\n      if (!status) {\n        console.log(\"Claim transaction failed.\");\n        return false;\n      }\n      return true;\n    });\n};\n\nexport const harvestNfts = async (\n  poolContract,\n  provider,\n  account,\n  nftids,\n  onTxHash\n) => {\n  console.log(\"getRewards nftids\", nftids);\n  return poolContract.methods\n    .getReward(nftids)\n    .send({ from: account, gas: 800000 }, async (error, txHash) => {\n      if (error) {\n        onTxHash && onTxHash(\"\");\n        console.log(\"Claim error\", error);\n        return false;\n      }\n      onTxHash && onTxHash(txHash);\n      const status = await waitTransaction(provider, txHash);\n      if (!status) {\n        console.log(\"Claim transaction failed.\");\n        return false;\n      }\n      return true;\n    });\n};\n\nexport const redeem = async (\n  poolContract,\n  provider,\n  poolId,\n  account,\n  onTxHash\n) => {\n  let now = new Date().getTime() / 1000;\n  if (now >= 1597172400) {\n    return poolContract.methods\n      .exit(String(new BigNumber(poolId)))\n      .send({ from: account, gas: 400000 }, async (error, txHash) => {\n        if (error) {\n          onTxHash && onTxHash(\"\");\n          console.log(\"Redeem error\", error);\n          return false;\n        }\n        onTxHash && onTxHash(txHash);\n        const status = await waitTransaction(provider, txHash);\n        if (!status) {\n          console.log(\"Redeem transaction failed.\");\n          return false;\n        }\n        return true;\n      });\n  } else {\n    alert(\"pool not active\");\n  }\n};\n\nexport const singleExit = async (\n  poolContract,\n  provider,\n  amount,\n  account,\n  onTxHash\n) => {\n  return poolContract.methods\n    .exit(String(new BigNumber(amount).times(new BigNumber(10).pow(18))))\n    .send({ from: account, gas: 400000 }, async (error, txHash) => {\n      if (error) {\n        onTxHash && onTxHash(\"\");\n        console.log(\"Redeem error\", error);\n        return false;\n      }\n      onTxHash && onTxHash(txHash);\n      const status = await waitTransaction(provider, txHash);\n      if (!status) {\n        console.log(\"Redeem transaction failed.\");\n        return false;\n      }\n      return true;\n    });\n};\n\nexport const approve = async (tokenContract, poolContract, account) => {\n  return tokenContract.methods\n    .approve(poolContract.options.address, String(ethers.constants.MaxUint256))\n    .send({ from: account, gas: 80000 });\n};\n\nexport const getPoolContracts = async (yam) => {\n  const pools = Object.keys(yam.contracts)\n    .filter((c) => c.indexOf(\"_pool\") !== -1)\n    .reduce((acc, cur) => {\n      const newAcc = { ...acc };\n      newAcc[cur] = yam.contracts[cur];\n      return newAcc;\n    }, {});\n  return pools;\n};\n\nexport const getSingleStakeBalances = async (pool, account) => {\n  let stakes = [];\n  try {\n    stakes = await pool.methods.getStakes(account).call();\n  } catch (e) {\n    console.error(\"can not get user stakes\", e);\n  }\n  return stakes;\n};\n\nexport const getExitableAmount = async (pool, account) => {\n  let amount = new BigNumber(0);\n  try {\n    amount = await pool.methods.exitableAmount(account).call();\n  } catch (e) {\n    console.error(\"can not get exitable amount\", e);\n  }\n  return amount;\n};\n\nexport const getSingleStakingEndTime = async (yam, pool) => {\n  const endTime = await pool.methods.endTime().call();\n  return yam.toBigN(endTime || 0);\n};\n\nexport const stxpSingleRedeem = async (\n  poolContract,\n  provider,\n  amount,\n  account,\n  onTxHash\n) => {\n  return poolContract.methods\n    .exit(String(amount))\n    .send({ from: account, gas: 400000 }, async (error, txHash) => {\n      if (error) {\n        onTxHash && onTxHash(\"\");\n        console.log(\"Redeem error\", error);\n        return false;\n      }\n      onTxHash && onTxHash(txHash);\n      const status = await waitTransaction(provider, txHash);\n      if (!status) {\n        console.log(\"Redeem transaction failed.\");\n        return false;\n      }\n      return true;\n    });\n};\n\nexport const stxpSingleHarvest = async (\n  poolContract,\n  provider,\n  account,\n  onTxHash\n) => {\n  return poolContract.methods\n    .redeem()\n    .send({ from: account, gas: 400000 }, async (error, txHash) => {\n      if (error) {\n        onTxHash && onTxHash(\"\");\n        console.log(\"Redeem error\", error);\n        return false;\n      }\n      onTxHash && onTxHash(txHash);\n      const status = await waitTransaction(provider, txHash);\n      if (!status) {\n        console.log(\"Redeem transaction failed.\");\n        return false;\n      }\n      return true;\n    });\n};\n\nexport const stxpSingleStake = async (\n  poolContract,\n  provider,\n  duration,\n  amount,\n  account,\n  onTxHash\n) => {\n  return poolContract.methods\n    .stake(\n      String(new BigNumber(amount).times(new BigNumber(10).pow(18))),\n      duration\n    )\n    .send({ from: account, gas: 400000 }, async (error, txHash) => {\n      if (error) {\n        onTxHash && onTxHash(\"\");\n        console.log(\"Staking error\", error);\n        return false;\n      }\n      onTxHash && onTxHash(txHash);\n      const status = await waitTransaction(provider, txHash);\n      if (!status) {\n        console.log(\"Staking transaction failed.\");\n        return false;\n      }\n      return true;\n    });\n};\n\nexport const generateNft = async (\n  poolContract,\n  provider,\n  poolId,\n  amount,\n  name,\n  account,\n  onTxHash\n) => {\n  console.log(\n    \"create NFT\",\n    String(poolId),\n    String(new BigNumber(amount).times(new BigNumber(10).pow(18))),\n    name\n  );\n  return poolContract.methods\n    .craftStrainNFT(\n      String(poolId),\n      String(new BigNumber(amount).times(new BigNumber(10).pow(18))),\n      name\n    )\n    .send({ from: account, gas: 1300000 }, async (error, txHash) => {\n      if (error) {\n        onTxHash && onTxHash(\"\");\n        console.log(\"create NFT error\", error);\n        return false;\n      }\n      onTxHash && onTxHash(txHash);\n      const status = await waitTransaction(provider, txHash);\n      if (!status) {\n        console.log(\"Creating NFT transaction failed.\");\n        return false;\n      }\n      return true;\n    });\n};\n\nexport const addNftStake = async (\n  poolContract,\n  provider,\n  poolId,\n  nftId,\n  amount,\n  stxpTokens,\n  account,\n  onTxHash\n) => {\n  console.log(\"add stake to NFT\", String(poolId), amount, stxpTokens);\n  const lpAmount = String(\n    new BigNumber(amount).times(new BigNumber(10).pow(18))\n  );\n  const stxpAmount = String(\n    new BigNumber(stxpTokens).times(new BigNumber(10).pow(18))\n  );\n  return poolContract.methods\n    .stake(String(poolId), nftId, lpAmount, stxpAmount)\n    .send({ from: account, gas: 1300000 }, async (error, txHash) => {\n      if (error) {\n        onTxHash && onTxHash(\"\");\n        console.log(\"create NFT error\", error);\n        return false;\n      }\n      onTxHash && onTxHash(txHash);\n      const status = await waitTransaction(provider, txHash);\n      if (!status) {\n        console.log(\"Creating NFT transaction failed.\");\n        return false;\n      }\n      return true;\n    });\n};\n\nexport const burnNft = async (\n  poolContract,\n  provider,\n  nftId,\n  poolId,\n  account,\n  onTxHash\n) => {\n  return poolContract.methods\n    .burn(String(nftId), String(poolId))\n    .send({ from: account, gas: 400000 }, async (error, txHash) => {\n      if (error) {\n        onTxHash && onTxHash(\"\");\n        console.log(\"burn NFT error\", error);\n        return false;\n      }\n      onTxHash && onTxHash(txHash);\n      const status = await waitTransaction(provider, txHash);\n      if (!status) {\n        console.log(\"Destroying NFT transaction failed.\");\n        return false;\n      }\n      return true;\n    });\n};\n\nexport const breedNfts = async (\n  crafterContract,\n  provider,\n  poolId,\n  amount,\n  stxpAmount,\n  stxpBurnAmount,\n  name,\n  parentOne,\n  parentTwo,\n  account,\n  onTxHash\n) => {\n  console.log(\n    \"breading NFTs\",\n    String(poolId),\n    String(new BigNumber(amount).times(new BigNumber(10).pow(18))),\n    String(new BigNumber(stxpAmount).times(new BigNumber(10).pow(18))),\n    String(new BigNumber(stxpBurnAmount).times(new BigNumber(10).pow(18))),\n    name\n  );\n  return crafterContract.methods\n    .breedStrainNFT(\n      String(poolId),\n      String(new BigNumber(amount).times(new BigNumber(10).pow(18))),\n      String(new BigNumber(stxpAmount).times(new BigNumber(10).pow(18))),\n      String(new BigNumber(stxpBurnAmount).times(new BigNumber(10).pow(18))),\n      name,\n      String(parentOne),\n      String(parentTwo)\n    )\n    .send({ from: account, gas: 1300000 }, async (error, txHash) => {\n      if (error) {\n        onTxHash && onTxHash(\"\");\n        console.log(\"breeding NFTs error\", error);\n        return false;\n      }\n      onTxHash && onTxHash(txHash);\n      const status = await waitTransaction(provider, txHash);\n      if (!status) {\n        console.log(\"Breeding NFT transaction failed.\");\n        return false;\n      }\n      return true;\n    });\n};\n\nexport const getSingleEarned = async (yam, pool, account) => {\n  return yam.toBigN(await pool.methods.withdrawableRewards(account).call());\n};\n\nexport const getEarned = async (yam, pool, account) => {\n  return yam.toBigN(await pool.methods.earned(account).call());\n};\n\nexport const getNftEarned = async (yam, crafter, account, nftid) => {\n  return yam.toBigN(await crafter.methods.earned(account, nftid).call());\n};\n\nexport const getCanBreed = async (crafter, nftId1, nftId2) => {\n  return await crafter.methods.canBreed(nftId1, nftId2).call();\n};\n\nexport const getStaked = async (yam, pool, account) => {\n  return yam.toBigN(await pool.methods.balanceOf(account).call());\n};\n\nexport const getCurrentPrice = async (yam) => {\n  // FORBROCK: get current YAM price\n  return new BigNumber(\n    await yam.contracts.rebaser.methods.getCurrentTWAP().call()\n  );\n};\n\nexport const getTargetPrice = async (yam) => {\n  return yam.toBigN(1).toFixed(2);\n};\n\nexport const getCirculatingSupply = async (yam) => {\n  let now = await yam.web3.eth.getBlock(\"latest\");\n  let scalingFactor = yam.toBigN(\n    await yam.contracts.yamV3.methods.yamsScalingFactor().call()\n  );\n  let starttime = yam\n    .toBigN(await yam.contracts.eth_pool.methods.starttime().call())\n    .toNumber();\n  let timePassed = now[\"timestamp\"] - starttime;\n  if (timePassed < 0) {\n    return 0;\n  }\n  let yamsDistributed = yam.toBigN((8 * timePassed * 250000) / 625000); //yams from first 8 pools\n  let starttimePool2 = yam\n    .toBigN(await yam.contracts.ycrv_pool.methods.starttime().call())\n    .toNumber();\n  timePassed = now[\"timestamp\"] - starttime;\n  let pool2Yams = yam.toBigN((timePassed * 1500000) / 625000); // yams from second pool. note: just accounts for first week\n  let circulating = pool2Yams\n    .plus(yamsDistributed)\n    .times(scalingFactor)\n    .dividedBy(10 ** 36)\n    .toFixed(2);\n  return circulating;\n};\n\nexport const getLastRebaseTimestamp = async (yam) => {\n  try {\n    const lastTimestamp = yam\n      .toBigN(\n        await yam.contracts.rebaser.methods.lastRebaseTimestampSec().call()\n      )\n      .toNumber();\n    return lastTimestamp;\n  } catch (e) {\n    console.log(e);\n  }\n};\n\nexport const delegate = async (yam, account, onTxHash) => {\n  return yam.contracts.yamV3.methods\n    .delegate(account)\n    .send({ from: account, gas: 150000 }, async (error, txHash) => {\n      if (error) {\n        onTxHash && onTxHash(\"\");\n        console.log(\"Delegate error\", error);\n        return false;\n      }\n      onTxHash && onTxHash(txHash);\n      const status = await waitTransaction(yam.web3.eth, txHash);\n      if (!status) {\n        console.log(\"Delegate transaction failed.\");\n        return false;\n      }\n      return true;\n    });\n};\n\nexport const didDelegate = async (yam, account) => {\n  return (\n    (await yam.contracts.yamV3.methods.delegates(account).call()) === account\n  );\n};\n\nexport const vote = async (yam, proposal, side, account, onTxHash) => {\n  return yam.contracts.gov2.methods\n    .castVote(proposal, side)\n    .send({ from: account, gas: 130000 }, async (error, txHash) => {\n      if (error) {\n        onTxHash && onTxHash(\"\");\n        console.log(\"Vote error\", error);\n        return false;\n      }\n      onTxHash && onTxHash(txHash);\n      const status = await waitTransaction(yam.web3.eth, txHash);\n      if (!status) {\n        console.log(\"Vote transaction failed.\");\n        return false;\n      }\n      return true;\n    });\n};\n\nconst stateMap = {\n  0: \"Pending\",\n  1: \"Active\",\n  2: \"Canceled\",\n  3: \"Defeated\",\n  4: \"Succeeded\",\n  5: \"Queued\",\n  6: \"Expired\",\n  7: \"Executed\",\n};\n\nexport const getProposals = async (yam) => {\n  let BASE24 = new BigNumber(10).pow(24);\n\n  const v1Proposals = await yam.contracts.gov.getPastEvents(\"ProposalCreated\", {\n    fromBlock: 10887059,\n    toBlock: 10926022,\n  });\n  let proposals = [];\n  let v1Descriptions = [];\n  for (let i = 0; i < v1Proposals.length; i++) {\n    let id = v1Proposals[i][\"returnValues\"][\"id\"];\n    let targets = [];\n    for (let j = 0; j < v1Proposals[i][\"returnValues\"][\"targets\"].length; j++) {\n      if (yam.contracts.names[v1Proposals[i][\"returnValues\"][\"targets\"][j]]) {\n        targets.push(\n          yam.contracts.names[v1Proposals[i][\"returnValues\"][\"targets\"][j]]\n        );\n      } else {\n        targets.push(v1Proposals[i][\"returnValues\"][\"targets\"][j]);\n      }\n    }\n\n    let sigs = [];\n    for (\n      let j = 0;\n      j < v1Proposals[i][\"returnValues\"][\"signatures\"].length;\n      j++\n    ) {\n      if (\n        yam.contracts.names[v1Proposals[i][\"returnValues\"][\"signatures\"][j]]\n      ) {\n        sigs.push(\n          yam.contracts.names[v1Proposals[i][\"returnValues\"][\"signatures\"][j]]\n        );\n      } else {\n        sigs.push(v1Proposals[i][\"returnValues\"][\"signatures\"][j]);\n      }\n    }\n\n    let ins = [];\n    for (\n      let j = 0;\n      j < v1Proposals[i][\"returnValues\"][\"calldatas\"].length;\n      j++\n    ) {\n      let abi_types = v1Proposals[i][\"returnValues\"][\"signatures\"][j]\n        .split(\"(\")[1]\n        .split(\")\")\n        .slice(0, -1)[0]\n        .split(\",\");\n      let result = yam.web3.eth.abi.decodeParameters(\n        abi_types,\n        v1Proposals[i][\"returnValues\"][\"calldatas\"][j]\n      );\n      let fr = [];\n      for (let k = 0; k < result.__length__; k++) {\n        fr.push(result[k.toString()]);\n      }\n      ins.push(fr);\n    }\n\n    let proposal = await yam.contracts.gov.methods.proposals(id).call();\n    let fv = new BigNumber(proposal[\"forVotes\"]).div(BASE24);\n    let av = new BigNumber(proposal[\"againstVotes\"]).div(BASE24);\n    let more;\n    if (knownSnapshots[v1Proposals[i][\"transactionHash\"]]) {\n      more = knownSnapshots[v1Proposals[i][\"transactionHash\"]];\n    }\n\n    proposals.push({\n      gov: \"gov\",\n      description: v1Proposals[i][\"returnValues\"][\"description\"],\n      state: stateMap[await yam.contracts.gov.methods.state(id).call()],\n      targets: targets,\n      signatures: sigs,\n      inputs: ins,\n      forVotes: fv.toNumber(),\n      againstVotes: av.toNumber(),\n      id: id,\n      start: v1Proposals[i][\"returnValues\"][\"startBlock\"],\n      end: v1Proposals[i][\"returnValues\"][\"endBlock\"],\n      hash: v1Proposals[i][\"transactionHash\"],\n      more: more,\n    });\n  }\n  const v2Proposals = await yam.contracts.gov2.getPastEvents(\n    \"ProposalCreated\",\n    {\n      fromBlock: 10926022,\n      toBlock: \"latest\",\n    }\n  );\n  for (let i = 0; i < v2Proposals.length; i++) {\n    let id = v2Proposals[i][\"returnValues\"][\"id\"];\n    let targets = [];\n    for (let j = 0; j < v2Proposals[i][\"returnValues\"][\"targets\"].length; j++) {\n      if (yam.contracts.names[v2Proposals[i][\"returnValues\"][\"targets\"][j]]) {\n        targets.push(\n          yam.contracts.names[v2Proposals[i][\"returnValues\"][\"targets\"][j]]\n        );\n      } else {\n        targets.push(v2Proposals[i][\"returnValues\"][\"targets\"][j]);\n      }\n    }\n\n    let sigs = [];\n    for (\n      let j = 0;\n      j < v2Proposals[i][\"returnValues\"][\"signatures\"].length;\n      j++\n    ) {\n      if (\n        yam.contracts.names[v2Proposals[i][\"returnValues\"][\"signatures\"][j]]\n      ) {\n        sigs.push(\n          yam.contracts.names[v2Proposals[i][\"returnValues\"][\"signatures\"][j]]\n        );\n      } else {\n        sigs.push(v2Proposals[i][\"returnValues\"][\"signatures\"][j]);\n      }\n    }\n\n    let ins = [];\n    for (\n      let j = 0;\n      j < v2Proposals[i][\"returnValues\"][\"calldatas\"].length;\n      j++\n    ) {\n      let abi_types = v2Proposals[i][\"returnValues\"][\"signatures\"][j]\n        .split(\"(\")[1]\n        .split(\")\")\n        .slice(0, -1)[0]\n        .split(\",\");\n      let result = yam.web3.eth.abi.decodeParameters(\n        abi_types,\n        v2Proposals[i][\"returnValues\"][\"calldatas\"][j]\n      );\n      let fr = [];\n      for (let k = 0; k < result.__length__; k++) {\n        fr.push(result[k.toString()]);\n      }\n      ins.push(fr);\n    }\n\n    let proposal = await yam.contracts.gov2.methods.proposals(id).call();\n    let fv = new BigNumber(proposal[\"forVotes\"]).div(BASE24);\n    let av = new BigNumber(proposal[\"againstVotes\"]).div(BASE24);\n\n    let more;\n    if (knownSnapshots[v2Proposals[i][\"transactionHash\"]]) {\n      more = knownSnapshots[v2Proposals[i][\"transactionHash\"]];\n    }\n\n    proposals.push({\n      gov: \"gov2\",\n      description: v2Proposals[i][\"returnValues\"][\"description\"],\n      state: stateMap[await yam.contracts.gov2.methods.state(id).call()],\n      targets: targets,\n      signatures: sigs,\n      inputs: ins,\n      forVotes: fv.toNumber(),\n      againstVotes: av.toNumber(),\n      id: id,\n      start: v2Proposals[i][\"returnValues\"][\"startBlock\"],\n      end: v2Proposals[i][\"returnValues\"][\"endBlock\"],\n      hash: v2Proposals[i][\"transactionHash\"],\n      more: more,\n    });\n  }\n  // proposals[1].state = \"Active\"\n  // proposals[0].state = \"Active\"\n  return proposals;\n};\n\nexport const getVotingPowers = async (yam, proposals, account) => {\n  let BASE24 = new BigNumber(10).pow(24);\n  let powers = [];\n  for (let i = 0; i < proposals.length; i++) {\n    if (proposals[i].gov == \"gov\") {\n      let receipt = await yam.contracts.gov.methods\n        .getReceipt(proposals[i].id, account)\n        .call();\n      let power = new BigNumber(receipt[2]).div(BASE24).toNumber();\n      if (power == 0) {\n        power = new BigNumber(\n          await yam.contracts.yamV3.methods\n            .getPriorVotes(account, proposals[i].start)\n            .call()\n        )\n          .div(BASE24)\n          .toNumber();\n      }\n      powers.push({\n        hash: proposals[i].hash,\n        power: power,\n        voted: receipt[0],\n        side: receipt[1],\n      });\n    } else {\n      let receipt = await yam.contracts.gov2.methods\n        .getReceipt(proposals[i].id, account)\n        .call();\n      let power = new BigNumber(receipt[2]).div(BASE24).toNumber();\n      if (power == 0) {\n        power = new BigNumber(\n          await yam.contracts.yamV3.methods\n            .getPriorVotes(account, proposals[i].start)\n            .call()\n        )\n          .div(BASE24)\n          .toNumber();\n      }\n      powers.push({\n        hash: proposals[i].hash,\n        power: power,\n        voted: receipt[0],\n        side: receipt[1],\n      });\n    }\n  }\n  return powers;\n};\n\nexport const getCurrentVotingPower = async (yam, account) => {\n  let BASE24 = new BigNumber(10).pow(24);\n  return new BigNumber(\n    await yam.contracts.yamV3.methods.getCurrentVotes(account).call()\n  )\n    .dividedBy(BASE24)\n    .toNumber();\n};\n\nexport const getVotes = async (yam) => {\n  const votesRaw = new BigNumber(\n    await yam.contracts.yam.methods\n      .getCurrentVotes(\"0x683A78bA1f6b25E29fbBC9Cd1BFA29A51520De84\")\n      .call()\n  ).dividedBy(10 ** 24);\n  return votesRaw;\n};\n\nexport const getScalingFactor = async (yam) => {\n  return new BigNumber(\n    await yam.contracts.yamV3.methods.yamsScalingFactor().call()\n  );\n};\n\nexport const getDelegatedBalance = async (yam, account) => {\n  return new BigNumber(\n    await yam.contracts.yam.methods.balanceOfUnderlying(account).call()\n  ).dividedBy(10 ** 24);\n};\n\nexport const migrate = async (yam, account) => {\n  return yam.contracts.yamV2migration.methods\n    .migrate()\n    .send({ from: account, gas: 320000 });\n};\n\nexport const getMigrationEndTime = async (yam) => {\n  return yam\n    .toBigN(await yam.contracts.yamV2migration.methods.startTime().call())\n    .plus(yam.toBigN(86400 * 3))\n    .toNumber();\n};\n\nexport const getV2Supply = async (yam) => {\n  return new BigNumber(await yam.contracts.yamV2.methods.totalSupply().call());\n};\n\nexport const migrationStarted = async (yam) => {\n  let now = new Date().getTime() / 1000; // get current time\n  let startTime = await yam.contracts.migrator.methods.startTime().call();\n  let token_initialized = await yam.contracts.migrator.methods\n    .token_initialized()\n    .call();\n  let delegatorRewardsSet = await yam.contracts.migrator.methods\n    .delegatorRewardsSet()\n    .call();\n  if (now >= startTime && token_initialized && delegatorRewardsSet) {\n    return true;\n  }\n  return false;\n};\n\nconst yamToFragment = async (yam, amount) => {\n  let BASE24 = new BigNumber(10).pow(24);\n  let scalingFactor = new BigNumber(\n    await yam.contracts.yamV3.methods.yamsScalingFactor().call()\n  );\n\n  return amount.multipliedBy(scalingFactor).dividedBy(BASE24);\n};\n\nexport const currVested = async (yam, account) => {\n  let BASE = new BigNumber(10).pow(18);\n\n  let vested = new BigNumber(\n    await yam.contracts.migrator.methods.vested(account).call()\n  );\n  let amt = await yamToFragment(yam, vested);\n  return amt.dividedBy(BASE);\n};\n\nexport const currUnclaimedDelegatorRewards = async (yam, account) => {\n  let BASE = new BigNumber(10).pow(18);\n  /*\n  let start = new BigNumber(1600444800);\n  let duration = new BigNumber(90 * 86400);\n  let now = new BigNumber(new Date().getTime() / 1000);\n  let percDone = now.minus(start).dividedBy(duration);\n  if (percDone.gt(1)) {\n    percDone = new BigNumber(1)\n  }\n  */\n  //let totalVesting = new BigNumber(await yam.contracts.migrator.methods.delegator_vesting(account).call());\n  //let claimed = new BigNumber(await yam.contracts.migrator.methods.delegator_claimed(account).call());\n  //let unclaimed = ((totalVesting.multipliedBy(percDone)).minus(claimed));\n  let unclaimed = new BigNumber(\n    await yam.contracts.strneth_pool.methods.earned(account).call()\n  );\n  let amt = await yamToFragment(yam, unclaimed);\n  return amt.dividedBy(BASE);\n};\n\nexport const currUnclaimedMigratorVesting = async (yam, account) => {\n  let BASE = new BigNumber(10).pow(18);\n  let BASE24 = new BigNumber(10).pow(24);\n\n  let start = new BigNumber(1600444800);\n  let duration = new BigNumber(30 * 86400);\n  let now = new BigNumber(new Date().getTime() / 1000);\n  let percDone = now.minus(start).dividedBy(duration);\n  if (percDone.gt(1)) {\n    percDone = new BigNumber(1);\n  }\n  let totalVesting = new BigNumber(\n    await yam.contracts.migrator.methods.vesting(account).call()\n  );\n  let claimed = new BigNumber(\n    await yam.contracts.migrator.methods.claimed(account).call()\n  );\n  let unclaimed = totalVesting.multipliedBy(percDone).minus(claimed);\n  let amt = await yamToFragment(yam, unclaimed);\n  return amt.dividedBy(BASE);\n};\n\nexport const delegatorRewards = async (yam, account) => {\n  let BASE = new BigNumber(10).pow(18);\n  let BASE24 = new BigNumber(10).pow(24);\n\n  let rewards = new BigNumber(\n    await yam.contracts.migrator.methods.delegator_vesting(account).call()\n  );\n  let amt = await yamToFragment(yam, rewards);\n  return amt.dividedBy(BASE);\n};\n\nexport const migrateV3 = async (yam, account, onTxHash) => {\n  return await yam.contracts.migrator.methods\n    .migrate()\n    .send({ from: account, gas: 200000 }, async (error, txHash) => {\n      if (error) {\n        onTxHash && onTxHash(\"\");\n        console.log(\"Migration error\", error);\n        return false;\n      }\n      onTxHash && onTxHash(txHash);\n      const status = await waitTransaction(yam.web3.eth, txHash);\n      if (!status) {\n        console.log(\"Migration transaction failed.\");\n        return false;\n      }\n      return true;\n    });\n};\n\nexport const claimVested = async (yam, account, onTxHash) => {\n  return await yam.contracts.migrator.methods\n    .claimVested()\n    .send({ from: account, gas: 140000 });\n};\n\nconst sleep = (ms) => {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n};\n\nexport const waitTransaction = async (provider, txHash) => {\n  const web3 = new Web3(provider);\n  let txReceipt = null;\n  while (txReceipt === null) {\n    const r = await web3.eth.getTransactionReceipt(txHash);\n    txReceipt = r;\n    await sleep(2000);\n  }\n  return txReceipt.status;\n};\n"]},"metadata":{},"sourceType":"module"}