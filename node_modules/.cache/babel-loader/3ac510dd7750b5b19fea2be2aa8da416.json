{"ast":null,"code":"var _jsxFileName = \"/Users/hienle/Documents/GitHub/comfortNFT/src/views/Apothecary/GenerateNftButton.tsx\";\nimport React, { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { Spacer } from \"react-neu\";\nimport styled from \"styled-components\";\nimport useApproval from \"hooks/useApproval\";\nimport { getAddresses } from \"constants/tokenAddresses\";\nimport useStrainNfts from \"hooks/useStrainNfts\";\nimport { useWallet } from \"use-wallet\";\nimport { MIN_LP_AMOUNTS, MIN_LP_AMOUNTS_DISPLAY, MIN_STRN_GEN_VALUE, PoolIds, POOL_NAMES } from \"constants/poolValues\";\nimport NamedGeneratingModal from \"views/Modals/NamedGeneratingModal\";\nimport BigNumber from \"bignumber.js\";\nimport numeral from \"numeral\";\nimport Label from \"components/Label\";\nimport StyledPrimaryButton from \"views/Common/StyledButton\";\nimport useBalances from \"hooks/useBalances\";\n\nconst GenerateNftButton = ({\n  poolId,\n  walletBalance\n}) => {\n  const [generateModalIsOpen, setGenerateModalIsOpen] = useState(false);\n  const [canGenerate, setCanGenerate] = useState(false);\n  const {\n    setConfirmTxModalIsOpen,\n    isCreating,\n    onCreateNft\n  } = useStrainNfts();\n  const {\n    strnTokenBalance\n  } = useBalances();\n  const {\n    status\n  } = useWallet();\n  const poolName = useMemo(() => POOL_NAMES[Number(poolId)], [poolId]);\n  const minAmountLpTokens = useMemo(() => MIN_LP_AMOUNTS[Number(poolId)], [poolId]);\n\n  const getLpTokenAddress = () => {\n    if (poolId === PoolIds.STRN_ETH) return getAddresses().strnLPTokenAddress;\n    return getAddresses().strnXiotLPTokenAddress;\n  };\n\n  const {\n    isApproved,\n    isApproving,\n    onApprove\n  } = useApproval(getLpTokenAddress(), getAddresses().strainNFTCrafterAddress, () => setConfirmTxModalIsOpen(false));\n  const {\n    isApproved: isApprovedStrn,\n    isApproving: isApprovingStrn,\n    onApprove: onApproveStrn\n  } = useApproval(getAddresses().strnTokenAddress, getAddresses().strainNFTCrafterAddress, () => setConfirmTxModalIsOpen(false));\n  const handleApprove = useCallback(() => {\n    setConfirmTxModalIsOpen(true);\n    onApprove();\n  }, [onApprove, setConfirmTxModalIsOpen]);\n  const handleApproveStrn = useCallback(() => {\n    setConfirmTxModalIsOpen(true);\n    onApproveStrn();\n  }, [onApprove, setConfirmTxModalIsOpen]);\n  const handleGenerateClick = useCallback(() => {\n    setGenerateModalIsOpen(true);\n  }, [setGenerateModalIsOpen]);\n\n  const handleOnGenerate = (amount, name) => {\n    onCreateNft(poolId, amount, name);\n    handleDismissGenerateModal();\n  };\n\n  const handleDismissGenerateModal = useCallback(() => {\n    setGenerateModalIsOpen(false);\n  }, [setGenerateModalIsOpen]);\n  useEffect(() => {\n    const hasEnoughStrn = strnTokenBalance ? strnTokenBalance === null || strnTokenBalance === void 0 ? void 0 : strnTokenBalance.gte(MIN_STRN_GEN_VALUE) : false;\n\n    if (!minAmountLpTokens || !walletBalance || !hasEnoughStrn) {\n      setCanGenerate(false);\n    } else if (walletBalance && new BigNumber(walletBalance).gte(new BigNumber(minAmountLpTokens))) {\n      setCanGenerate(true);\n    }\n  }, [walletBalance, poolId, strnTokenBalance]);\n  const formattedLPBalance = useMemo(() => {\n    if (walletBalance) {\n      return poolId === PoolIds.STRN_ETH ? numeral(walletBalance).format(\"0.00a\") : walletBalance.toFixed(8);\n    } else {\n      return \"--\";\n    }\n  }, [walletBalance, poolId]);\n  const GenerateButton = useMemo(() => {\n    if (status !== \"connected\") {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(StyledPrimaryButton, {\n        disabled: true,\n        full: true,\n        text: \"Not Connected\",\n        variant: \"secondary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }\n      }));\n    }\n\n    if (walletBalance === undefined) {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(StyledPrimaryButton, {\n        disabled: true,\n        full: true,\n        text: \"Loading ...\",\n        variant: \"secondary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }\n      }));\n    }\n\n    if (!canGenerate) {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Spacer, {\n        size: \"sm\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(StyledPrimaryButton, {\n        disabled: true,\n        full: true,\n        text: \"Insufficient LP or STRN balance\",\n        variant: \"secondary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }\n      }));\n    }\n\n    if (isCreating) {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(StyledPrimaryButton, {\n        disabled: true,\n        full: true,\n        text: \"Generating...\",\n        variant: \"secondary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }\n      }));\n    }\n\n    if (!isApproved || !isApprovedStrn) {\n      // disable generation\n      return /*#__PURE__*/React.createElement(StyledButtonRow, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(StyledPrimaryButton, {\n        onClick: handleApprove,\n        disabled: isApproved,\n        full: true,\n        size: \"sm\",\n        text: isApproving ? \"Approving ...\" : !isApproved ? \"Approve Generating\" : \"Approved\",\n        variant: isApproving || status !== \"connected\" ? \"secondary\" : \"default\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(StyledPrimaryButton, {\n        onClick: handleApproveStrn,\n        disabled: isApprovedStrn,\n        full: true,\n        size: \"sm\",\n        text: isApprovingStrn ? \"Approving ...\" : !isApprovedStrn ? \"Approve STRN Fee\" : \"Approved\",\n        variant: isApprovingStrn || status !== \"connected\" ? \"secondary\" : \"default\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 11\n        }\n      }));\n    }\n\n    if (isApproved && isApprovedStrn) {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, canGenerate && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(StyledPrimaryButton, {\n        full: true,\n        onClick: handleGenerateClick,\n        text: `wrap ${poolName} LP`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 15\n        }\n      })));\n    }\n  }, [handleGenerateClick, isApproved, isApproving, isApprovedStrn, isApprovingStrn, isApprovedStrn, isCreating, handleApprove, status]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, status !== \"connected\" && /*#__PURE__*/React.createElement(Spacer, {\n    size: \"sm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 34\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 7\n    }\n  }, poolName, \" LP: \", /*#__PURE__*/React.createElement(StyledValue, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 24\n    }\n  }, formattedLPBalance)), /*#__PURE__*/React.createElement(Label, {\n    text: `Min: ${String(MIN_LP_AMOUNTS_DISPLAY[Number(poolId)])} ${poolName} LP`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Spacer, {\n    size: \"sm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 7\n    }\n  }), GenerateButton, /*#__PURE__*/React.createElement(NamedGeneratingModal, {\n    isOpen: generateModalIsOpen,\n    onDismiss: handleDismissGenerateModal,\n    onGenerate: handleOnGenerate,\n    label: poolName,\n    fullBalance: walletBalance,\n    minAmount: minAmountLpTokens,\n    poolId: poolId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst StyledValue = styled.span`\n  font-size: 18px;\n  font-weight: 600;\n`;\nconst StyledButtonRow = styled.div`\n  display: flex;\n  flex-flow: row nowrap;\n  justify-content: space-between;\n  > div {\n    margin: 0 0.25rem;\n  }\n`;\nexport default GenerateNftButton;","map":{"version":3,"sources":["/Users/hienle/Documents/GitHub/comfortNFT/src/views/Apothecary/GenerateNftButton.tsx"],"names":["React","useCallback","useEffect","useMemo","useState","Spacer","styled","useApproval","getAddresses","useStrainNfts","useWallet","MIN_LP_AMOUNTS","MIN_LP_AMOUNTS_DISPLAY","MIN_STRN_GEN_VALUE","PoolIds","POOL_NAMES","NamedGeneratingModal","BigNumber","numeral","Label","StyledPrimaryButton","useBalances","GenerateNftButton","poolId","walletBalance","generateModalIsOpen","setGenerateModalIsOpen","canGenerate","setCanGenerate","setConfirmTxModalIsOpen","isCreating","onCreateNft","strnTokenBalance","status","poolName","Number","minAmountLpTokens","getLpTokenAddress","STRN_ETH","strnLPTokenAddress","strnXiotLPTokenAddress","isApproved","isApproving","onApprove","strainNFTCrafterAddress","isApprovedStrn","isApprovingStrn","onApproveStrn","strnTokenAddress","handleApprove","handleApproveStrn","handleGenerateClick","handleOnGenerate","amount","name","handleDismissGenerateModal","hasEnoughStrn","gte","formattedLPBalance","format","toFixed","GenerateButton","undefined","String","StyledValue","span","StyledButtonRow","div"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useMemo, useState } from \"react\";\n\nimport { Spacer } from \"react-neu\";\n\nimport styled from \"styled-components\";\nimport useApproval from \"hooks/useApproval\";\nimport { getAddresses } from \"constants/tokenAddresses\";\nimport useStrainNfts from \"hooks/useStrainNfts\";\nimport { useWallet } from \"use-wallet\";\nimport {\n  MIN_LP_AMOUNTS,\n  MIN_LP_AMOUNTS_DISPLAY,\n  MIN_STRN_GEN_VALUE,\n  PoolIds,\n  POOL_NAMES,\n} from \"constants/poolValues\";\nimport NamedGeneratingModal from \"views/Modals/NamedGeneratingModal\";\nimport BigNumber from \"bignumber.js\";\nimport numeral from \"numeral\";\nimport Label from \"components/Label\";\nimport StyledPrimaryButton from \"views/Common/StyledButton\";\nimport useBalances from \"hooks/useBalances\";\n\nconst GenerateNftButton = ({\n  poolId,\n  walletBalance,\n}: {\n  poolId: string;\n  walletBalance?: BigNumber;\n}) => {\n  const [generateModalIsOpen, setGenerateModalIsOpen] = useState(false);\n  const [canGenerate, setCanGenerate] = useState(false);\n\n  const { setConfirmTxModalIsOpen, isCreating, onCreateNft } = useStrainNfts();\n\n  const { strnTokenBalance } = useBalances();\n\n  const { status } = useWallet();\n\n  const poolName = useMemo(() => POOL_NAMES[Number(poolId)], [poolId]);\n  const minAmountLpTokens = useMemo(() => MIN_LP_AMOUNTS[Number(poolId)], [\n    poolId,\n  ]);\n\n  const getLpTokenAddress = () => {\n    if (poolId === PoolIds.STRN_ETH) return getAddresses().strnLPTokenAddress;\n    return getAddresses().strnXiotLPTokenAddress;\n  };\n\n  const {\n    isApproved,\n    isApproving,\n    onApprove,\n  } = useApproval(\n    getLpTokenAddress(),\n    getAddresses().strainNFTCrafterAddress,\n    () => setConfirmTxModalIsOpen(false)\n  );\n\n  const {\n    isApproved: isApprovedStrn,\n    isApproving: isApprovingStrn,\n    onApprove: onApproveStrn,\n  } = useApproval(\n    getAddresses().strnTokenAddress,\n    getAddresses().strainNFTCrafterAddress,\n    () => setConfirmTxModalIsOpen(false)\n  );\n\n  const handleApprove = useCallback(() => {\n    setConfirmTxModalIsOpen(true);\n    onApprove();\n  }, [onApprove, setConfirmTxModalIsOpen]);\n\n  const handleApproveStrn = useCallback(() => {\n    setConfirmTxModalIsOpen(true);\n    onApproveStrn();\n  }, [onApprove, setConfirmTxModalIsOpen]);\n  const handleGenerateClick = useCallback(() => {\n    setGenerateModalIsOpen(true);\n  }, [setGenerateModalIsOpen]);\n\n  const handleOnGenerate = (amount: string, name: string) => {\n    onCreateNft(poolId, amount, name);\n    handleDismissGenerateModal();\n  };\n\n  const handleDismissGenerateModal = useCallback(() => {\n    setGenerateModalIsOpen(false);\n  }, [setGenerateModalIsOpen]);\n\n  useEffect(() => {\n    const hasEnoughStrn = strnTokenBalance\n      ? strnTokenBalance?.gte(MIN_STRN_GEN_VALUE)\n      : false;\n    if (!minAmountLpTokens || !walletBalance || !hasEnoughStrn) {\n      setCanGenerate(false);\n    } else if (\n      walletBalance &&\n      new BigNumber(walletBalance).gte(new BigNumber(minAmountLpTokens))\n    ) {\n      setCanGenerate(true);\n    }\n  }, [walletBalance, poolId, strnTokenBalance]);\n\n  const formattedLPBalance = useMemo(() => {\n    if (walletBalance) {\n      return poolId === PoolIds.STRN_ETH\n        ? numeral(walletBalance).format(\"0.00a\")\n        : walletBalance.toFixed(8);\n    } else {\n      return \"--\";\n    }\n  }, [walletBalance, poolId]);\n\n  const GenerateButton = useMemo(() => {\n    if (status !== \"connected\") {\n      return (\n        <>\n          <StyledPrimaryButton\n            disabled\n            full\n            text={\"Not Connected\"}\n            variant=\"secondary\"\n          />\n        </>\n      );\n    }\n    if (walletBalance === undefined) {\n      return (\n        <>\n          <StyledPrimaryButton\n            disabled\n            full\n            text=\"Loading ...\"\n            variant=\"secondary\"\n          />\n        </>\n      );\n    }\n\n    if (!canGenerate) {\n      return (\n        <>\n          <Spacer size={\"sm\"} />\n          <StyledPrimaryButton\n            disabled\n            full\n            text=\"Insufficient LP or STRN balance\"\n            variant=\"secondary\"\n          />\n        </>\n      );\n    }\n\n    if (isCreating) {\n      return (\n        <>\n          <StyledPrimaryButton\n            disabled\n            full\n            text=\"Generating...\"\n            variant=\"secondary\"\n          />\n        </>\n      );\n    }\n\n    if (!isApproved || !isApprovedStrn) {\n      // disable generation\n      return (\n        <StyledButtonRow>\n          <StyledPrimaryButton\n            onClick={handleApprove}\n            disabled={isApproved}\n            full\n            size={\"sm\"}\n            text={\n              isApproving\n                ? \"Approving ...\"\n                : !isApproved\n                ? \"Approve Generating\"\n                : \"Approved\"\n            }\n            variant={\n              isApproving || status !== \"connected\" ? \"secondary\" : \"default\"\n            }\n          />\n          <StyledPrimaryButton\n            onClick={handleApproveStrn}\n            disabled={isApprovedStrn}\n            full\n            size={\"sm\"}\n            text={\n              isApprovingStrn\n                ? \"Approving ...\"\n                : !isApprovedStrn\n                ? \"Approve STRN Fee\"\n                : \"Approved\"\n            }\n            variant={\n              isApprovingStrn || status !== \"connected\"\n                ? \"secondary\"\n                : \"default\"\n            }\n          />\n        </StyledButtonRow>\n      );\n    }\n\n    if (isApproved && isApprovedStrn) {\n      return (\n        <>\n          {canGenerate && (\n            <>\n              <StyledPrimaryButton\n                full\n                onClick={handleGenerateClick}\n                text={`wrap ${poolName} LP`}\n              />\n            </>\n          )}\n        </>\n      );\n    }\n  }, [\n    handleGenerateClick,\n    isApproved,\n    isApproving,\n    isApprovedStrn,\n    isApprovingStrn,\n    isApprovedStrn,\n    isCreating,\n    handleApprove,\n    status,\n  ]);\n\n  return (\n    <>\n      {status !== \"connected\" && <Spacer size=\"sm\" />}\n      <div>\n        {poolName} LP: <StyledValue>{formattedLPBalance}</StyledValue>\n      </div>\n      <Label\n        text={`Min: ${String(\n          MIN_LP_AMOUNTS_DISPLAY[Number(poolId)]\n        )} ${poolName} LP`}\n      />\n      <Spacer size=\"sm\" />\n\n      {GenerateButton}\n\n      <NamedGeneratingModal\n        isOpen={generateModalIsOpen}\n        onDismiss={handleDismissGenerateModal}\n        onGenerate={handleOnGenerate}\n        label={poolName}\n        fullBalance={walletBalance}\n        minAmount={minAmountLpTokens}\n        poolId={poolId}\n      />\n    </>\n  );\n};\n\nconst StyledValue = styled.span`\n  font-size: 18px;\n  font-weight: 600;\n`;\n\nconst StyledButtonRow = styled.div`\n  display: flex;\n  flex-flow: row nowrap;\n  justify-content: space-between;\n  > div {\n    margin: 0 0.25rem;\n  }\n`;\n\nexport default GenerateNftButton;\n"]},"metadata":{},"sourceType":"module"}