{"ast":null,"code":"import { useCallback, useEffect, useState } from 'react';\nimport BigNumber from 'bignumber.js';\nimport { useWallet } from 'use-wallet';\nimport { getAllowance } from 'utils';\n\nconst useAllowance = (tokenAddress, spenderAddress) => {\n  const [allowance, setAllowance] = useState();\n  const {\n    account,\n    ethereum\n  } = useWallet();\n  const fetchAllowance = useCallback(async (userAddress, provider) => {\n    if (!spenderAddress || !tokenAddress) {\n      return;\n    }\n\n    const allowance = await getAllowance(userAddress, spenderAddress, tokenAddress, provider);\n    setAllowance(new BigNumber(allowance));\n  }, [setAllowance, spenderAddress, tokenAddress]);\n  useEffect(() => {\n    if (account && ethereum && spenderAddress && tokenAddress) {\n      fetchAllowance(account, ethereum);\n    }\n\n    let refreshInterval = setInterval(fetchAllowance, 10000);\n    return () => clearInterval(refreshInterval);\n  }, [account, ethereum, spenderAddress, tokenAddress]);\n  return allowance;\n};\n\nexport default useAllowance;","map":{"version":3,"sources":["/Users/hienle/Documents/GitHub/comfortNFT/src/hooks/useAllowance.ts"],"names":["useCallback","useEffect","useState","BigNumber","useWallet","getAllowance","useAllowance","tokenAddress","spenderAddress","allowance","setAllowance","account","ethereum","fetchAllowance","userAddress","provider","refreshInterval","setInterval","clearInterval"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AAEA,OAAOC,SAAP,MAAsB,cAAtB;AACA,SAASC,SAAT,QAA0B,YAA1B;AAGA,SAASC,YAAT,QAA6B,OAA7B;;AAEA,MAAMC,YAAY,GAAG,CAACC,YAAD,EAAwBC,cAAxB,KAAoD;AACvE,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,EAA1C;AACA,QAAM;AAAES,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAwER,SAAS,EAAvF;AAEA,QAAMS,cAAc,GAAGb,WAAW,CAAC,OAAOc,WAAP,EAA4BC,QAA5B,KAAmD;AACpF,QAAI,CAACP,cAAD,IAAmB,CAACD,YAAxB,EAAsC;AACpC;AACD;;AACD,UAAME,SAAS,GAAG,MAAMJ,YAAY,CAACS,WAAD,EAAcN,cAAd,EAA8BD,YAA9B,EAA4CQ,QAA5C,CAApC;AACAL,IAAAA,YAAY,CAAC,IAAIP,SAAJ,CAAcM,SAAd,CAAD,CAAZ;AACD,GANiC,EAM/B,CAACC,YAAD,EAAeF,cAAf,EAA+BD,YAA/B,CAN+B,CAAlC;AAQAN,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIU,OAAO,IAAIC,QAAX,IAAuBJ,cAAvB,IAAyCD,YAA7C,EAA2D;AACzDM,MAAAA,cAAc,CAACF,OAAD,EAAUC,QAAV,CAAd;AACD;;AACD,QAAII,eAAe,GAAGC,WAAW,CAACJ,cAAD,EAAiB,KAAjB,CAAjC;AACA,WAAO,MAAMK,aAAa,CAACF,eAAD,CAA1B;AACD,GANQ,EAMN,CAACL,OAAD,EAAUC,QAAV,EAAoBJ,cAApB,EAAoCD,YAApC,CANM,CAAT;AAQA,SAAOE,SAAP;AACD,CArBD;;AAuBA,eAAeH,YAAf","sourcesContent":["import { useCallback, useEffect, useState } from 'react'\n\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from 'use-wallet'\nimport { provider } from 'web3-core'\n\nimport { getAllowance } from 'utils'\n\nconst useAllowance = (tokenAddress?: string, spenderAddress?: string) => {\n  const [allowance, setAllowance] = useState<BigNumber>()\n  const { account, ethereum }: { account: string | null, ethereum?: provider} = useWallet()\n\n  const fetchAllowance = useCallback(async (userAddress: string, provider: provider) => {\n    if (!spenderAddress || !tokenAddress) {\n      return\n    }\n    const allowance = await getAllowance(userAddress, spenderAddress, tokenAddress, provider)\n    setAllowance(new BigNumber(allowance))\n  }, [setAllowance, spenderAddress, tokenAddress])\n\n  useEffect(() => {\n    if (account && ethereum && spenderAddress && tokenAddress) {\n      fetchAllowance(account, ethereum)\n    }\n    let refreshInterval = setInterval(fetchAllowance, 10000)\n    return () => clearInterval(refreshInterval)\n  }, [account, ethereum, spenderAddress, tokenAddress])\n\n  return allowance\n}\n\nexport default useAllowance"]},"metadata":{},"sourceType":"module"}