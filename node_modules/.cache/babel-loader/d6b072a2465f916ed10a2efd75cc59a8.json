{"ast":null,"code":"var _jsxFileName = \"/Users/hienle/Documents/GitHub/comfortNFT/src/contexts/Farming/Provider.tsx\";\nimport React, { useCallback, useEffect, useState } from 'react';\nimport BigNumber from 'bignumber.js';\nimport { useWallet } from 'use-wallet';\nimport ConfirmTransactionModal from 'components/ConfirmTransactionModal';\nimport { getAddresses } from 'constants/tokenAddresses';\nimport useYam from 'hooks/useYam';\nimport { getEarned, harvest, redeem, stake, unstake } from 'yam-sdk/utils';\nimport Context from './Context';\nimport { setItemValue } from 'utils';\nconst addresses = getAddresses();\n\nconst Provider = ({\n  children\n}) => {\n  const [confirmTxModalIsOpen, setConfirmTxModalIsOpen] = useState(false);\n  const [isHarvesting, setIsHarvesting] = useState([false, false]);\n  const [isRedeeming, setIsRedeeming] = useState([false, false]);\n  const [isStaking, setIsStaking] = useState([false, false]);\n  const [isUnstaking, setIsUnstaking] = useState([false, false]);\n  const [earnedStrnPoolBalances, setEarnedStrnPoolBalance] = useState();\n  const [earnedXiotPoolBalances, setEarnedXiotPoolBalance] = useState();\n  const yam = useYam();\n  const {\n    account\n  } = useWallet();\n  const lpAddresses = [addresses.strnLPTokenAddress, addresses.strnXiotLPTokenAddress];\n\n  const getPoolLPAddress = poolId => {\n    return lpAddresses[Number(poolId)];\n  };\n\n  const incentivizerAddresses = [addresses.strnEthIncAddress, addresses.strnXiotPoolAddress];\n\n  const getIncentivizerAddress = poolId => {\n    return incentivizerAddresses[Number(poolId)];\n  };\n\n  const getSetRewardsBalanceMethod = (poolId = \"0\") => {\n    return [setEarnedStrnPoolBalance, setEarnedXiotPoolBalance][Number(poolId)];\n  };\n\n  const getIncContract = poolId => {\n    if (yam) {\n      if (poolId === \"0\") {\n        return yam.contracts.strneth_pool;\n      }\n\n      return yam.contracts.strnxiot_pool;\n    }\n  };\n\n  const getEarnedBalances = poolId => {\n    return [earnedStrnPoolBalances, earnedXiotPoolBalances][Number(poolId)] || new BigNumber(0);\n  };\n\n  const fetchEarnedBalance = useCallback(async poolId => {\n    if (!account || !yam) return;\n    const balance = await getEarned(yam, getIncContract(poolId), account);\n    getSetRewardsBalanceMethod(poolId)(balance);\n  }, [account, setEarnedStrnPoolBalance, setEarnedXiotPoolBalance, yam]);\n  const fetchBalances = useCallback(async poolId => {\n    fetchEarnedBalance(poolId);\n  }, [fetchEarnedBalance]);\n  const handleHarvest = useCallback(async poolId => {\n    if (!yam) return;\n    setConfirmTxModalIsOpen(true);\n    setIsHarvesting(setItemValue(isHarvesting, poolId, true));\n    await harvest(getIncContract(poolId), yam.web3.eth, account, () => {\n      setConfirmTxModalIsOpen(false);\n    }).catch(e => {\n      console.error(e);\n    });\n    setIsHarvesting(setItemValue(isHarvesting, poolId, false));\n  }, [account, setConfirmTxModalIsOpen, setIsHarvesting, yam]);\n  const handleRedeem = useCallback(async poolId => {\n    if (!yam) return;\n    setConfirmTxModalIsOpen(true);\n    setIsRedeeming(setItemValue(isRedeeming, poolId, true));\n    await redeem(getIncContract(poolId), yam.web3.eth, \"0\", account, () => {\n      setConfirmTxModalIsOpen(false);\n    }).catch(e => {\n      console.error(e);\n      setIsRedeeming(setItemValue(isRedeeming, poolId, false));\n    });\n    setIsRedeeming(setItemValue(isRedeeming, poolId, false));\n  }, [account, setConfirmTxModalIsOpen, setIsRedeeming, yam]);\n  const handleStake = useCallback(async (poolId, amount) => {\n    if (!yam) return;\n    setConfirmTxModalIsOpen(true);\n    setIsStaking(setItemValue(isStaking, poolId, true));\n    await stake(getIncContract(poolId), yam.web3.eth, \"0\", amount, account, () => {\n      setConfirmTxModalIsOpen(false);\n    }).catch(e => {\n      console.error(e);\n      setIsStaking(setItemValue(isStaking, poolId, false));\n    });\n    setIsStaking(setItemValue(isStaking, poolId, false));\n  }, [account, setConfirmTxModalIsOpen, setIsStaking, yam]);\n  const handleUnstake = useCallback(async (poolId, amount) => {\n    if (!yam) return;\n    setConfirmTxModalIsOpen(true);\n    setIsUnstaking(setItemValue(isUnstaking, poolId, true));\n    await unstake(getIncContract(poolId), yam.web3.eth, \"0\", amount, account, () => {\n      setConfirmTxModalIsOpen(false);\n    }).catch(e => {\n      console.error(e);\n      setIsUnstaking(setItemValue(isUnstaking, poolId, false));\n    });\n    setIsUnstaking(setItemValue(isUnstaking, poolId, false));\n  }, [account, setConfirmTxModalIsOpen, setIsUnstaking, yam]);\n  useEffect(() => {\n    fetchBalances(\"0\");\n    fetchBalances(\"1\");\n    let refreshInterval = setInterval(() => {\n      fetchBalances(\"0\");\n      fetchBalances(\"1\");\n    }, 10000);\n    return () => clearInterval(refreshInterval);\n  }, [fetchBalances]);\n  return /*#__PURE__*/React.createElement(Context.Provider, {\n    value: {\n      getPoolLPAddress,\n      setConfirmTxModalIsOpen,\n      getEarnedBalances,\n      isHarvesting,\n      isRedeeming,\n      isStaking,\n      isUnstaking,\n      onHarvest: handleHarvest,\n      onRedeem: handleRedeem,\n      onStake: handleStake,\n      onUnstake: handleUnstake,\n      getIncentivizerAddress\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 5\n    }\n  }, children, /*#__PURE__*/React.createElement(ConfirmTransactionModal, {\n    isOpen: confirmTxModalIsOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default Provider;","map":{"version":3,"sources":["/Users/hienle/Documents/GitHub/comfortNFT/src/contexts/Farming/Provider.tsx"],"names":["React","useCallback","useEffect","useState","BigNumber","useWallet","ConfirmTransactionModal","getAddresses","useYam","getEarned","harvest","redeem","stake","unstake","Context","setItemValue","addresses","Provider","children","confirmTxModalIsOpen","setConfirmTxModalIsOpen","isHarvesting","setIsHarvesting","isRedeeming","setIsRedeeming","isStaking","setIsStaking","isUnstaking","setIsUnstaking","earnedStrnPoolBalances","setEarnedStrnPoolBalance","earnedXiotPoolBalances","setEarnedXiotPoolBalance","yam","account","lpAddresses","strnLPTokenAddress","strnXiotLPTokenAddress","getPoolLPAddress","poolId","Number","incentivizerAddresses","strnEthIncAddress","strnXiotPoolAddress","getIncentivizerAddress","getSetRewardsBalanceMethod","getIncContract","contracts","strneth_pool","strnxiot_pool","getEarnedBalances","fetchEarnedBalance","balance","fetchBalances","handleHarvest","web3","eth","catch","e","console","error","handleRedeem","handleStake","amount","handleUnstake","refreshInterval","setInterval","clearInterval","onHarvest","onRedeem","onStake","onUnstake"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react'\n\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from 'use-wallet'\n\nimport ConfirmTransactionModal from 'components/ConfirmTransactionModal'\nimport {\n  getAddresses\n} from 'constants/tokenAddresses'\nimport useYam from 'hooks/useYam'\n\nimport {\n  getEarned,\n  harvest,\n  redeem,\n  stake,\n  unstake,\n} from 'yam-sdk/utils'\n\nimport Context from './Context'\nimport { getItemValue, setItemValue } from 'utils'\n\nconst addresses = getAddresses()\n\nconst Provider: React.FC = ({ children }) => {\n  const [confirmTxModalIsOpen, setConfirmTxModalIsOpen] = useState(false)\n  const [isHarvesting, setIsHarvesting] = useState([false, false])\n  const [isRedeeming, setIsRedeeming] = useState([false, false])\n  const [isStaking, setIsStaking] = useState([false, false])\n  const [isUnstaking, setIsUnstaking] = useState([false, false])\n\n  const [earnedStrnPoolBalances, setEarnedStrnPoolBalance] = useState<BigNumber>()\n  const [earnedXiotPoolBalances, setEarnedXiotPoolBalance] = useState<BigNumber>()\n\n  const yam = useYam()\n  const { account } = useWallet()\n\n  const lpAddresses = [addresses.strnLPTokenAddress, addresses.strnXiotLPTokenAddress]\n  const getPoolLPAddress = (poolId: string) => {\n    return lpAddresses[Number(poolId)]\n  }\n  \n  const incentivizerAddresses = [addresses.strnEthIncAddress, addresses.strnXiotPoolAddress]\n  const getIncentivizerAddress = (poolId: string) => {\n    return incentivizerAddresses[Number(poolId)]\n  }\n\n  const getSetRewardsBalanceMethod = (poolId: string = \"0\") => {\n    return [setEarnedStrnPoolBalance, setEarnedXiotPoolBalance][Number(poolId)]\n  }\n\n  const getIncContract = (poolId: string) => {\n    if (yam) {\n      if (poolId === \"0\") {\n        return yam.contracts.strneth_pool\n      }\n      return yam.contracts.strnxiot_pool\n    }\n  }\n\n  const getEarnedBalances = (poolId: string): BigNumber => {\n    return [earnedStrnPoolBalances, earnedXiotPoolBalances][Number(poolId)] || new BigNumber(0)\n  }\n\n  const fetchEarnedBalance = useCallback(async (poolId) => {\n    if (!account || !yam) return\n    const balance = await getEarned(yam, getIncContract(poolId), account)\n    getSetRewardsBalanceMethod(poolId)(balance)\n  }, [\n    account,\n    setEarnedStrnPoolBalance,\n    setEarnedXiotPoolBalance,\n    yam\n  ])\n\n  const fetchBalances = useCallback(async (poolId) => {\n    fetchEarnedBalance(poolId)\n  }, [\n    fetchEarnedBalance,\n  ])\n\n  const handleHarvest = useCallback(async (poolId) => {\n    if (!yam) return\n    setConfirmTxModalIsOpen(true)\n    setIsHarvesting(setItemValue(isHarvesting, poolId, true))\n    await harvest(getIncContract(poolId), yam.web3.eth, account, () => {\n      setConfirmTxModalIsOpen(false)\n    }).catch(e => {\n      console.error(e)\n    })\n    setIsHarvesting(setItemValue(isHarvesting, poolId, false))\n  }, [\n    account,\n    setConfirmTxModalIsOpen,\n    setIsHarvesting,\n    yam\n  ])\n\n  const handleRedeem = useCallback(async (poolId) => {\n    if (!yam) return\n    setConfirmTxModalIsOpen(true)\n    setIsRedeeming(setItemValue(isRedeeming, poolId, true))\n    await redeem(getIncContract(poolId), yam.web3.eth, \"0\", account, () => {\n      setConfirmTxModalIsOpen(false)\n    }).catch(e => {\n      console.error(e)\n      setIsRedeeming(setItemValue(isRedeeming, poolId, false))\n    })\n    setIsRedeeming(setItemValue(isRedeeming, poolId, false))\n  }, [\n    account,\n    setConfirmTxModalIsOpen,\n    setIsRedeeming,\n    yam\n  ])\n\n  const handleStake = useCallback(async (poolId: string, amount: string) => {\n    if (!yam) return\n    setConfirmTxModalIsOpen(true)\n    setIsStaking(setItemValue(isStaking, poolId, true))\n    await stake(getIncContract(poolId), yam.web3.eth, \"0\", amount, account, () => {\n      setConfirmTxModalIsOpen(false)\n    }).catch(e => {\n      console.error(e)\n      setIsStaking(setItemValue(isStaking, poolId, false))\n    })\n    setIsStaking(setItemValue(isStaking, poolId, false))\n  }, [\n    account,\n    setConfirmTxModalIsOpen,\n    setIsStaking,\n    yam\n  ])\n\n  const handleUnstake = useCallback(async (poolId: string, amount: string) => {\n    if (!yam) return\n    setConfirmTxModalIsOpen(true)\n    setIsUnstaking(setItemValue(isUnstaking, poolId, true))\n    await unstake(getIncContract(poolId), yam.web3.eth, \"0\", amount, account, () => {\n      setConfirmTxModalIsOpen(false)\n    }).catch(e => {\n      console.error(e)\n      setIsUnstaking(setItemValue(isUnstaking, poolId, false))  \n    })\n    setIsUnstaking(setItemValue(isUnstaking, poolId, false))\n  }, [\n    account,\n    setConfirmTxModalIsOpen,\n    setIsUnstaking,\n    yam\n  ])\n\n  useEffect(() => {\n    fetchBalances(\"0\")\n    fetchBalances(\"1\")\n    let refreshInterval = setInterval(() => {\n      fetchBalances(\"0\")\n      fetchBalances(\"1\")\n    }, 10000)\n    return () => clearInterval(refreshInterval)\n  }, [fetchBalances])\n\n  return (\n    <Context.Provider value={{\n      getPoolLPAddress,\n      setConfirmTxModalIsOpen,\n      getEarnedBalances,\n      isHarvesting,\n      isRedeeming,\n      isStaking,\n      isUnstaking,\n      onHarvest: handleHarvest,\n      onRedeem: handleRedeem,\n      onStake: handleStake,\n      onUnstake: handleUnstake,\n      getIncentivizerAddress,\n    }}>\n      {children}\n      <ConfirmTransactionModal isOpen={confirmTxModalIsOpen} />\n    </Context.Provider>\n  )\n}\n\nexport default Provider"]},"metadata":{},"sourceType":"module"}