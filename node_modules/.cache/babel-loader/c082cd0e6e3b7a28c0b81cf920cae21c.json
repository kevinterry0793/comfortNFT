{"ast":null,"code":"var _jsxFileName = \"/Users/hienle/Documents/GitHub/comfortNFT/src/views/Stake/SingleStake.tsx\";\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { Box, Button, Card, CardActions, CardContent, CardIcon, Container, Spacer } from 'react-neu';\nimport { useWallet } from 'use-wallet';\nimport Label from 'components/Label';\nimport Value from 'components/Value';\nimport numeral from 'numeral';\nimport DurationStakeModal from 'views/Modals/DurationStakeModal';\nimport UnstakeModal from 'views/Modals/UnstakeModal';\nimport useApproval from 'hooks/useApproval';\nimport useBalances from 'hooks/useBalances';\nimport SplitRow from 'components/SplitRow';\nimport { StyledSubtitle } from 'components/PageHeader/PageHeader';\nimport useStaking from 'hooks/useStaking';\nimport BigNumber from 'bignumber.js';\nimport { bnToDec } from 'utils';\nimport { getDaysRemaining, getHoursMinusDaysRemaining, getMinutesMinusHoursRemaining, getSecondsMinusMinutesRemaining, useTimer } from 'hooks/useTimer';\n\nconst SingleStake = () => {\n  const [stakeModalIsOpen, setStakeModalIsOpen] = useState(false);\n  const [unstakeModalIsOpen, setUnstakeModalIsOpen] = useState(false);\n  const [unlockTimer, setUnlockTimer] = useState();\n  const {\n    status\n  } = useWallet();\n  const {\n    strnTokenAddress,\n    setConfirmTxModalIsOpen,\n    isStaking,\n    isUnstaking,\n    onStake,\n    onUnstake,\n    getIncentivizerAddress,\n    totalStaked,\n    endTime,\n    withdrawStakeAmount,\n    lastExpiringStake,\n    userStakes\n  } = useStaking();\n  const {\n    strnTokenBalance\n  } = useBalances();\n  const currentTime = useTimer();\n  const [disableStaking, setDisableStaking] = useState(true);\n  const [disableUnstaking, setDisableUnstaking] = useState(true);\n  const {\n    isApproved,\n    isApproving,\n    onApprove\n  } = useApproval(strnTokenAddress, getIncentivizerAddress(), () => setConfirmTxModalIsOpen(false));\n  const handleApprove = useCallback(() => {\n    setConfirmTxModalIsOpen(true);\n    onApprove();\n  }, [onApprove, setConfirmTxModalIsOpen]);\n  useEffect(() => {\n    if (lastExpiringStake && lastExpiringStake.lockDate && currentTime) {\n      const daysRemaining = getDaysRemaining(lastExpiringStake.lockDate, currentTime);\n      const hoursRemaining = getHoursMinusDaysRemaining(lastExpiringStake.lockDate, currentTime);\n      const minutesRemaining = getMinutesMinusHoursRemaining(lastExpiringStake.lockDate, currentTime);\n      const secondsRemaining = getSecondsMinusMinutesRemaining(lastExpiringStake.lockDate, currentTime);\n      setUnlockTimer(`${daysRemaining}d ${hoursRemaining}h ${minutesRemaining}m ${secondsRemaining}s`);\n    } else {\n      setUnlockTimer(undefined);\n    }\n  }, [lastExpiringStake, currentTime]);\n  useEffect(() => {\n    if (userStakes) {\n      // 1. if any stake with amount == 0 and lockDate > 0 disable stake button\n      const disableStakeButton = userStakes.filter(s => new BigNumber(s.amount).gt(0) && new BigNumber(s.lockDate).gt(0));\n      const hasUnstaked = userStakes.filter(s => new BigNumber(s.amount).eq(0));\n      setDisableStaking(disableStakeButton.length > 0 || hasUnstaked.length > 0); // 2. if any stake lockDate > currentTime disable unstake button. \n\n      const disableUnstakButton = userStakes.filter(s => new BigNumber(s.lockDate).gt(new BigNumber(currentTime)));\n      setDisableUnstaking(disableUnstakButton.length > 0);\n    }\n  }, [userStakes]);\n  const handleDismissStakeModal = useCallback(() => {\n    setStakeModalIsOpen(false);\n  }, [setStakeModalIsOpen]);\n  const handleDismissUnstakeModal = useCallback(() => {\n    setUnstakeModalIsOpen(false);\n  }, [setUnstakeModalIsOpen]);\n  const handleOnStake = useCallback((duration, amount) => {\n    onStake(duration, amount);\n    handleDismissStakeModal();\n  }, [handleDismissStakeModal, onStake]);\n  const handleOnUnstake = useCallback(amount => {\n    onUnstake(amount);\n    handleDismissUnstakeModal();\n  }, [handleDismissUnstakeModal, onUnstake]);\n  const handleStakeClick = useCallback(() => {\n    setStakeModalIsOpen(true);\n  }, [setStakeModalIsOpen]);\n  const handleUnstakeClick = useCallback(() => {\n    setUnstakeModalIsOpen(true);\n  }, [setUnstakeModalIsOpen]);\n  const StakeButton = useMemo(() => {\n    if (status !== 'connected' || disableStaking) {\n      return /*#__PURE__*/React.createElement(Button, {\n        disabled: true,\n        full: true,\n        text: \"Stake\",\n        variant: \"secondary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 9\n        }\n      });\n    }\n\n    if (isStaking) {\n      return /*#__PURE__*/React.createElement(Button, {\n        disabled: true,\n        full: true,\n        text: \"Staking...\",\n        variant: \"secondary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 9\n        }\n      });\n    }\n\n    if (!isApproved) {\n      return /*#__PURE__*/React.createElement(Button, {\n        disabled: isApproving,\n        full: true,\n        onClick: handleApprove,\n        text: !isApproving ? \"Approve staking\" : \"Approving staking...\",\n        variant: isApproving || status !== 'connected' ? 'secondary' : 'default',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 9\n        }\n      });\n    }\n\n    if (isApproved) {\n      return /*#__PURE__*/React.createElement(Button, {\n        full: true,\n        onClick: handleStakeClick,\n        text: \"Stake\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 9\n        }\n      });\n    }\n  }, [handleStakeClick, isApproving, isStaking, handleApprove, status]);\n  const UnstakeButton = useMemo(() => {\n    if (status !== 'connected' || disableUnstaking || withdrawStakeAmount && withdrawStakeAmount.eq(0)) {\n      return /*#__PURE__*/React.createElement(Button, {\n        disabled: true,\n        full: true,\n        text: \"Unstake\",\n        variant: \"secondary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 9\n        }\n      });\n    }\n\n    if (isUnstaking) {\n      return /*#__PURE__*/React.createElement(Button, {\n        disabled: true,\n        full: true,\n        text: \"Unstaking...\",\n        variant: \"secondary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 9\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(Button, {\n      full: true,\n      onClick: handleUnstakeClick,\n      text: \"Unstake\",\n      variant: \"secondary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 7\n      }\n    });\n  }, [handleUnstakeClick, isApproving, isUnstaking, handleApprove, status, withdrawStakeAmount]);\n  const getDisplayBalance = useCallback(value => {\n    if (value) {\n      return numeral(value).format('0.00a');\n    } else {\n      return '--';\n    }\n  }, []);\n  const getDisplayTotalBalance = useCallback(value => {\n    if (value) {\n      return numeral(bnToDec(value)).format('0.00a');\n    } else {\n      return '--';\n    }\n  }, []);\n  const showDurationModal = useMemo(() => {\n    return stakeModalIsOpen ? /*#__PURE__*/React.createElement(DurationStakeModal, {\n      isOpen: stakeModalIsOpen,\n      onDismiss: handleDismissStakeModal,\n      onStake: handleOnStake,\n      label: 'STRN',\n      fullBalance: strnTokenBalance,\n      maxTimestamp: endTime,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 31\n      }\n    }) : null;\n  }, [stakeModalIsOpen, strnTokenBalance, endTime]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    size: \"sm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Spacer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(StyledSubtitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 11\n    }\n  }, \"Stake STRN\")), /*#__PURE__*/React.createElement(CardIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 9\n    }\n  }, \"\\uD83E\\uDDEC\"), /*#__PURE__*/React.createElement(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    alignItems: \"center\",\n    row: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(SplitRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Value, {\n    value: getDisplayTotalBalance(totalStaked),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Label, {\n    text: `Staked`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Value, {\n    value: getDisplayBalance(strnTokenBalance),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Label, {\n    text: `Wallet`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 17\n    }\n  })))), /*#__PURE__*/React.createElement(Box, {\n    alignItems: \"center\",\n    row: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(SplitRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Value, {\n    value: unlockTimer ? unlockTimer : '--',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Label, {\n    text: `unstake after last stake unlocks`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 17\n    }\n  })))), /*#__PURE__*/React.createElement(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Value, {\n    value: getDisplayBalance(withdrawStakeAmount),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(Label, {\n    text: `unstakeable`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 15\n    }\n  })))), /*#__PURE__*/React.createElement(CardActions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 9\n    }\n  }, UnstakeButton, StakeButton)), showDurationModal, /*#__PURE__*/React.createElement(UnstakeModal, {\n    isOpen: unstakeModalIsOpen,\n    onDismiss: handleDismissUnstakeModal,\n    onUnstake: handleOnUnstake,\n    label: 'STRN',\n    fullBalance: withdrawStakeAmount,\n    disableUnstaking: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default SingleStake;","map":{"version":3,"sources":["/Users/hienle/Documents/GitHub/comfortNFT/src/views/Stake/SingleStake.tsx"],"names":["React","useCallback","useEffect","useMemo","useState","Box","Button","Card","CardActions","CardContent","CardIcon","Container","Spacer","useWallet","Label","Value","numeral","DurationStakeModal","UnstakeModal","useApproval","useBalances","SplitRow","StyledSubtitle","useStaking","BigNumber","bnToDec","getDaysRemaining","getHoursMinusDaysRemaining","getMinutesMinusHoursRemaining","getSecondsMinusMinutesRemaining","useTimer","SingleStake","stakeModalIsOpen","setStakeModalIsOpen","unstakeModalIsOpen","setUnstakeModalIsOpen","unlockTimer","setUnlockTimer","status","strnTokenAddress","setConfirmTxModalIsOpen","isStaking","isUnstaking","onStake","onUnstake","getIncentivizerAddress","totalStaked","endTime","withdrawStakeAmount","lastExpiringStake","userStakes","strnTokenBalance","currentTime","disableStaking","setDisableStaking","disableUnstaking","setDisableUnstaking","isApproved","isApproving","onApprove","handleApprove","lockDate","daysRemaining","hoursRemaining","minutesRemaining","secondsRemaining","undefined","disableStakeButton","filter","s","amount","gt","hasUnstaked","eq","length","disableUnstakButton","handleDismissStakeModal","handleDismissUnstakeModal","handleOnStake","duration","handleOnUnstake","handleStakeClick","handleUnstakeClick","StakeButton","UnstakeButton","getDisplayBalance","value","format","getDisplayTotalBalance","showDurationModal"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,OAAxC,EAAiDC,QAAjD,QAAiE,OAAjE;AAEA,SACEC,GADF,EAEEC,MAFF,EAGEC,IAHF,EAIEC,WAJF,EAKEC,WALF,EAMEC,QANF,EAOEC,SAPF,EAQEC,MARF,QASO,WATP;AAUA,SAASC,SAAT,QAA0B,YAA1B;AAEA,OAAOC,KAAP,MAAkB,kBAAlB;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AACA,OAAOC,OAAP,MAAoB,SAApB;AACA,OAAOC,kBAAP,MAA+B,iCAA/B;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AAEA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,SAASC,cAAT,QAA+B,kCAA/B;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,SAASC,gBAAT,EAA2BC,0BAA3B,EAAuDC,6BAAvD,EAAsFC,+BAAtF,EAAuHC,QAAvH,QAAuI,gBAAvI;;AAEA,MAAMC,WAAqB,GAAG,MAAM;AAClC,QAAM,CAACC,gBAAD,EAAmBC,mBAAnB,IAA0C7B,QAAQ,CAAC,KAAD,CAAxD;AACA,QAAM,CAAC8B,kBAAD,EAAqBC,qBAArB,IAA8C/B,QAAQ,CAAC,KAAD,CAA5D;AACA,QAAM,CAACgC,WAAD,EAAcC,cAAd,IAAgCjC,QAAQ,EAA9C;AAEA,QAAM;AAAEkC,IAAAA;AAAF,MAAazB,SAAS,EAA5B;AACA,QAAM;AACJ0B,IAAAA,gBADI;AAEJC,IAAAA,uBAFI;AAGJC,IAAAA,SAHI;AAIJC,IAAAA,WAJI;AAKJC,IAAAA,OALI;AAMJC,IAAAA,SANI;AAOJC,IAAAA,sBAPI;AAQJC,IAAAA,WARI;AASJC,IAAAA,OATI;AAUJC,IAAAA,mBAVI;AAWJC,IAAAA,iBAXI;AAYJC,IAAAA;AAZI,MAaF3B,UAAU,EAbd;AAeA,QAAM;AACJ4B,IAAAA;AADI,MAEF/B,WAAW,EAFf;AAIA,QAAMgC,WAAW,GAAGtB,QAAQ,EAA5B;AACA,QAAM,CAACuB,cAAD,EAAiBC,iBAAjB,IAAsClD,QAAQ,CAAU,IAAV,CAApD;AACA,QAAM,CAACmD,gBAAD,EAAmBC,mBAAnB,IAA0CpD,QAAQ,CAAU,IAAV,CAAxD;AAGA,QAAM;AAAEqD,IAAAA,UAAF;AAAcC,IAAAA,WAAd;AAA2BC,IAAAA;AAA3B,MAAyCxC,WAAW,CACxDoB,gBADwD,EAExDM,sBAAsB,EAFkC,EAGxD,MAAML,uBAAuB,CAAC,KAAD,CAH2B,CAA1D;AAMA,QAAMoB,aAAa,GAAG3D,WAAW,CAAC,MAAM;AACtCuC,IAAAA,uBAAuB,CAAC,IAAD,CAAvB;AACAmB,IAAAA,SAAS;AACV,GAHgC,EAG9B,CACDA,SADC,EAEDnB,uBAFC,CAH8B,CAAjC;AAQAtC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI+C,iBAAiB,IAAIA,iBAAiB,CAACY,QAAvC,IAAmDT,WAAvD,EAAoE;AAClE,YAAMU,aAAa,GAAGpC,gBAAgB,CAACuB,iBAAiB,CAACY,QAAnB,EAA6BT,WAA7B,CAAtC;AACA,YAAMW,cAAc,GAAGpC,0BAA0B,CAC/CsB,iBAAiB,CAACY,QAD6B,EAE/CT,WAF+C,CAAjD;AAIA,YAAMY,gBAAgB,GAAGpC,6BAA6B,CACpDqB,iBAAiB,CAACY,QADkC,EAEpDT,WAFoD,CAAtD;AAIA,YAAMa,gBAAgB,GAAGpC,+BAA+B,CACtDoB,iBAAiB,CAACY,QADoC,EAEtDT,WAFsD,CAAxD;AAIAf,MAAAA,cAAc,CAAE,GAAEyB,aAAc,KAAIC,cAAe,KAAIC,gBAAiB,KAAIC,gBAAiB,GAA/E,CAAd;AACD,KAfD,MAeO;AACL5B,MAAAA,cAAc,CAAC6B,SAAD,CAAd;AACD;AACF,GAnBQ,EAmBN,CAACjB,iBAAD,EAAoBG,WAApB,CAnBM,CAAT;AAqBAlD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIgD,UAAJ,EAAgB;AACd;AACA,YAAMiB,kBAAkB,GAAGjB,UAAU,CAACkB,MAAX,CAAkBC,CAAC,IAAI,IAAI7C,SAAJ,CAAc6C,CAAC,CAACC,MAAhB,EAAwBC,EAAxB,CAA2B,CAA3B,KAAiC,IAAI/C,SAAJ,CAAc6C,CAAC,CAACR,QAAhB,EAA0BU,EAA1B,CAA6B,CAA7B,CAAxD,CAA3B;AACA,YAAMC,WAAW,GAAGtB,UAAU,CAACkB,MAAX,CAAkBC,CAAC,IAAI,IAAI7C,SAAJ,CAAc6C,CAAC,CAACC,MAAhB,EAAwBG,EAAxB,CAA2B,CAA3B,CAAvB,CAApB;AACAnB,MAAAA,iBAAiB,CAACa,kBAAkB,CAACO,MAAnB,GAA4B,CAA5B,IAAiCF,WAAW,CAACE,MAAZ,GAAqB,CAAvD,CAAjB,CAJc,CAKd;;AACA,YAAMC,mBAAmB,GAAGzB,UAAU,CAACkB,MAAX,CAAkBC,CAAC,IAAI,IAAI7C,SAAJ,CAAc6C,CAAC,CAACR,QAAhB,EAA0BU,EAA1B,CAA6B,IAAI/C,SAAJ,CAAc4B,WAAd,CAA7B,CAAvB,CAA5B;AACAI,MAAAA,mBAAmB,CAACmB,mBAAmB,CAACD,MAApB,GAA6B,CAA9B,CAAnB;AACD;AACF,GAVQ,EAUN,CAACxB,UAAD,CAVM,CAAT;AAYA,QAAM0B,uBAAuB,GAAG3E,WAAW,CAAC,MAAM;AAChDgC,IAAAA,mBAAmB,CAAC,KAAD,CAAnB;AACD,GAF0C,EAExC,CAACA,mBAAD,CAFwC,CAA3C;AAIA,QAAM4C,yBAAyB,GAAG5E,WAAW,CAAC,MAAM;AAClDkC,IAAAA,qBAAqB,CAAC,KAAD,CAArB;AACD,GAF4C,EAE1C,CAACA,qBAAD,CAF0C,CAA7C;AAIA,QAAM2C,aAAa,GAAG7E,WAAW,CAAC,CAAC8E,QAAD,EAAmBT,MAAnB,KAAsC;AACtE3B,IAAAA,OAAO,CAACoC,QAAD,EAAWT,MAAX,CAAP;AACAM,IAAAA,uBAAuB;AACxB,GAHgC,EAG9B,CAACA,uBAAD,EAA0BjC,OAA1B,CAH8B,CAAjC;AAKA,QAAMqC,eAAe,GAAG/E,WAAW,CAAEqE,MAAD,IAAoB;AACtD1B,IAAAA,SAAS,CAAC0B,MAAD,CAAT;AACAO,IAAAA,yBAAyB;AAC1B,GAHkC,EAGhC,CACDA,yBADC,EAEDjC,SAFC,CAHgC,CAAnC;AAQA,QAAMqC,gBAAgB,GAAGhF,WAAW,CAAC,MAAM;AACzCgC,IAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACD,GAFmC,EAEjC,CAACA,mBAAD,CAFiC,CAApC;AAIA,QAAMiD,kBAAkB,GAAGjF,WAAW,CAAC,MAAM;AAC3CkC,IAAAA,qBAAqB,CAAC,IAAD,CAArB;AACD,GAFqC,EAEnC,CAACA,qBAAD,CAFmC,CAAtC;AAIA,QAAMgD,WAAW,GAAGhF,OAAO,CAAC,MAAM;AAChC,QAAImC,MAAM,KAAK,WAAX,IAA0Be,cAA9B,EAA8C;AAC5C,0BACE,oBAAC,MAAD;AACE,QAAA,QAAQ,MADV;AAEE,QAAA,IAAI,MAFN;AAGE,QAAA,IAAI,EAAC,OAHP;AAIE,QAAA,OAAO,EAAC,WAJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAQD;;AACD,QAAIZ,SAAJ,EAAe;AACb,0BACE,oBAAC,MAAD;AACE,QAAA,QAAQ,MADV;AAEE,QAAA,IAAI,MAFN;AAGE,QAAA,IAAI,EAAC,YAHP;AAIE,QAAA,OAAO,EAAC,WAJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAQD;;AACD,QAAI,CAACgB,UAAL,EAAiB;AACf,0BACE,oBAAC,MAAD;AACE,QAAA,QAAQ,EAAEC,WADZ;AAEE,QAAA,IAAI,MAFN;AAGE,QAAA,OAAO,EAAEE,aAHX;AAIE,QAAA,IAAI,EAAE,CAACF,WAAD,GAAe,iBAAf,GAAmC,sBAJ3C;AAKE,QAAA,OAAO,EAAEA,WAAW,IAAIpB,MAAM,KAAK,WAA1B,GAAwC,WAAxC,GAAsD,SALjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AASD;;AAED,QAAImB,UAAJ,EAAgB;AACd,0BACE,oBAAC,MAAD;AACE,QAAA,IAAI,MADN;AAEE,QAAA,OAAO,EAAEwB,gBAFX;AAGE,QAAA,IAAI,EAAC,OAHP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAOD;AACF,GA1C0B,EA0CxB,CACDA,gBADC,EAEDvB,WAFC,EAGDjB,SAHC,EAIDmB,aAJC,EAKDtB,MALC,CA1CwB,CAA3B;AAkDA,QAAM8C,aAAa,GAAGjF,OAAO,CAAC,MAAM;AAClC,QAAImC,MAAM,KAAK,WAAX,IAA0BiB,gBAA1B,IAA+CP,mBAAmB,IAAIA,mBAAmB,CAACyB,EAApB,CAAuB,CAAvB,CAA1E,EAAsG;AACpG,0BACE,oBAAC,MAAD;AACE,QAAA,QAAQ,MADV;AAEE,QAAA,IAAI,MAFN;AAGE,QAAA,IAAI,EAAC,SAHP;AAIE,QAAA,OAAO,EAAC,WAJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAQD;;AACD,QAAI/B,WAAJ,EAAiB;AACf,0BACE,oBAAC,MAAD;AACE,QAAA,QAAQ,MADV;AAEE,QAAA,IAAI,MAFN;AAGE,QAAA,IAAI,EAAC,cAHP;AAIE,QAAA,OAAO,EAAC,WAJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAQD;;AACD,wBACE,oBAAC,MAAD;AACE,MAAA,IAAI,MADN;AAEE,MAAA,OAAO,EAAEwC,kBAFX;AAGE,MAAA,IAAI,EAAC,SAHP;AAIE,MAAA,OAAO,EAAC,WAJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAQD,GA7B4B,EA6B1B,CACDA,kBADC,EAEDxB,WAFC,EAGDhB,WAHC,EAIDkB,aAJC,EAKDtB,MALC,EAMDU,mBANC,CA7B0B,CAA7B;AAsCA,QAAMqC,iBAAiB,GAAGpF,WAAW,CAAEqF,KAAD,IAAuB;AAC3D,QAAIA,KAAJ,EAAW;AACT,aAAOtE,OAAO,CAACsE,KAAD,CAAP,CAAeC,MAAf,CAAsB,OAAtB,CAAP;AACD,KAFD,MAEO;AACL,aAAO,IAAP;AACD;AACF,GANoC,EAMlC,EANkC,CAArC;AAQA,QAAMC,sBAAsB,GAAGvF,WAAW,CAAEqF,KAAD,IAAuB;AAChE,QAAIA,KAAJ,EAAW;AACT,aAAOtE,OAAO,CAACS,OAAO,CAAC6D,KAAD,CAAR,CAAP,CAAwBC,MAAxB,CAA+B,OAA/B,CAAP;AACD,KAFD,MAEO;AACL,aAAO,IAAP;AACD;AACF,GANyC,EAMvC,EANuC,CAA1C;AAQA,QAAME,iBAAiB,GAAGtF,OAAO,CAAC,MAAM;AACtC,WAAO6B,gBAAgB,gBAAG,oBAAC,kBAAD;AACxB,MAAA,MAAM,EAAEA,gBADgB;AAExB,MAAA,SAAS,EAAE4C,uBAFa;AAGxB,MAAA,OAAO,EAAEE,aAHe;AAIxB,MAAA,KAAK,EAAE,MAJiB;AAKxB,MAAA,WAAW,EAAE3B,gBALW;AAMxB,MAAA,YAAY,EAAEJ,OANU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAH,GAOlB,IAPL;AAQD,GATgC,EAS9B,CAACf,gBAAD,EAAmBmB,gBAAnB,EAAqCJ,OAArC,CAT8B,CAAjC;AAWA,sBACE,uDACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AAAW,IAAA,IAAI,EAAC,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF,CADF,eAKE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBALF,eAME,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,GAAD;AACE,IAAA,UAAU,EAAC,QADb;AAEE,IAAA,GAAG,MAFL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAIE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,uDACE,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAEyC,sBAAsB,CAAC1C,WAAD,CAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAG,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF,eAKE,uDACE,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAEuC,iBAAiB,CAAClC,gBAAD,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAG,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CALF,CAJF,CADF,eAgBE,oBAAC,GAAD;AACE,IAAA,UAAU,EAAC,QADb;AAEE,IAAA,GAAG,MAFL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAIE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,uDACE,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAEf,WAAW,GAAGA,WAAH,GAAiB,IAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAG,kCAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF,CAJF,CAhBF,eA2BE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,uDACE,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAEiD,iBAAiB,CAACrC,mBAAD,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAG,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF,CA3BF,CANF,eAwCE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGoC,aADH,EAEGD,WAFH,CAxCF,CADF,EA8CGM,iBA9CH,eA+CE,oBAAC,YAAD;AACE,IAAA,MAAM,EAAEvD,kBADV;AAEE,IAAA,SAAS,EAAE2C,yBAFb;AAGE,IAAA,SAAS,EAAEG,eAHb;AAIE,IAAA,KAAK,EAAE,MAJT;AAKE,IAAA,WAAW,EAAEhC,mBALf;AAME,IAAA,gBAAgB,EAAE,IANpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA/CF,CADF;AA0DD,CAvRD;;AAyRA,eAAejB,WAAf","sourcesContent":["import React, { useCallback, useEffect, useMemo, useState } from 'react'\n\nimport {\n  Box,\n  Button,\n  Card,\n  CardActions,\n  CardContent,\n  CardIcon,\n  Container,\n  Spacer,\n} from 'react-neu'\nimport { useWallet } from 'use-wallet'\n\nimport Label from 'components/Label'\nimport Value from 'components/Value'\nimport numeral from 'numeral'\nimport DurationStakeModal from 'views/Modals/DurationStakeModal'\nimport UnstakeModal from 'views/Modals/UnstakeModal'\nimport styled from 'styled-components'\nimport useApproval from 'hooks/useApproval'\nimport useBalances from 'hooks/useBalances'\nimport SplitRow from 'components/SplitRow'\nimport { StyledSubtitle } from 'components/PageHeader/PageHeader'\nimport useStaking from 'hooks/useStaking'\nimport BigNumber from 'bignumber.js'\nimport { bnToDec } from 'utils'\nimport { getDaysRemaining, getHoursMinusDaysRemaining, getMinutesMinusHoursRemaining, getSecondsMinusMinutesRemaining, useTimer } from 'hooks/useTimer'\n\nconst SingleStake: React.FC = () => {\n  const [stakeModalIsOpen, setStakeModalIsOpen] = useState(false)\n  const [unstakeModalIsOpen, setUnstakeModalIsOpen] = useState(false)\n  const [unlockTimer, setUnlockTimer] = useState<string>()\n\n  const { status } = useWallet()\n  const {\n    strnTokenAddress,\n    setConfirmTxModalIsOpen,\n    isStaking,\n    isUnstaking,\n    onStake,\n    onUnstake,\n    getIncentivizerAddress,\n    totalStaked,\n    endTime,\n    withdrawStakeAmount,\n    lastExpiringStake,\n    userStakes,\n  } = useStaking()\n\n  const {\n    strnTokenBalance,\n  } = useBalances()\n\n  const currentTime = useTimer()\n  const [disableStaking, setDisableStaking] = useState<boolean>(true)\n  const [disableUnstaking, setDisableUnstaking] = useState<boolean>(true)\n\n\n  const { isApproved, isApproving, onApprove } = useApproval(\n    strnTokenAddress,\n    getIncentivizerAddress(),\n    () => setConfirmTxModalIsOpen(false)\n  )\n\n  const handleApprove = useCallback(() => {\n    setConfirmTxModalIsOpen(true)\n    onApprove()\n  }, [\n    onApprove,\n    setConfirmTxModalIsOpen,\n  ])\n\n  useEffect(() => {\n    if (lastExpiringStake && lastExpiringStake.lockDate && currentTime) {\n      const daysRemaining = getDaysRemaining(lastExpiringStake.lockDate, currentTime);\n      const hoursRemaining = getHoursMinusDaysRemaining(\n        lastExpiringStake.lockDate,\n        currentTime\n      );\n      const minutesRemaining = getMinutesMinusHoursRemaining(\n        lastExpiringStake.lockDate,\n        currentTime\n      );\n      const secondsRemaining = getSecondsMinusMinutesRemaining(\n        lastExpiringStake.lockDate,\n        currentTime\n      );\n      setUnlockTimer(`${daysRemaining}d ${hoursRemaining}h ${minutesRemaining}m ${secondsRemaining}s`)\n    } else {\n      setUnlockTimer(undefined)\n    }\n  }, [lastExpiringStake, currentTime])\n\n  useEffect(() => {\n    if (userStakes) {\n      // 1. if any stake with amount == 0 and lockDate > 0 disable stake button\n      const disableStakeButton = userStakes.filter(s => new BigNumber(s.amount).gt(0) && new BigNumber(s.lockDate).gt(0))\n      const hasUnstaked = userStakes.filter(s => new BigNumber(s.amount).eq(0))\n      setDisableStaking(disableStakeButton.length > 0 || hasUnstaked.length > 0);\n      // 2. if any stake lockDate > currentTime disable unstake button. \n      const disableUnstakButton = userStakes.filter(s => new BigNumber(s.lockDate).gt(new BigNumber(currentTime)))\n      setDisableUnstaking(disableUnstakButton.length > 0)\n    }\n  }, [userStakes])\n\n  const handleDismissStakeModal = useCallback(() => {\n    setStakeModalIsOpen(false)\n  }, [setStakeModalIsOpen])\n\n  const handleDismissUnstakeModal = useCallback(() => {\n    setUnstakeModalIsOpen(false)\n  }, [setUnstakeModalIsOpen])\n\n  const handleOnStake = useCallback((duration: string, amount: string) => {\n    onStake(duration, amount)\n    handleDismissStakeModal()\n  }, [handleDismissStakeModal, onStake])\n\n  const handleOnUnstake = useCallback((amount: string) => {\n    onUnstake(amount)\n    handleDismissUnstakeModal()\n  }, [\n    handleDismissUnstakeModal,\n    onUnstake,\n  ])\n\n  const handleStakeClick = useCallback(() => {\n    setStakeModalIsOpen(true)\n  }, [setStakeModalIsOpen])\n\n  const handleUnstakeClick = useCallback(() => {\n    setUnstakeModalIsOpen(true)\n  }, [setUnstakeModalIsOpen])\n\n  const StakeButton = useMemo(() => {\n    if (status !== 'connected' || disableStaking) {\n      return (\n        <Button\n          disabled\n          full\n          text=\"Stake\"\n          variant=\"secondary\"\n        />\n      )\n    }\n    if (isStaking) {\n      return (\n        <Button\n          disabled\n          full\n          text=\"Staking...\"\n          variant=\"secondary\"\n        />\n      )\n    }\n    if (!isApproved) {\n      return (\n        <Button\n          disabled={isApproving}\n          full\n          onClick={handleApprove}\n          text={!isApproving ? \"Approve staking\" : \"Approving staking...\"}\n          variant={isApproving || status !== 'connected' ? 'secondary' : 'default'}\n        />\n      )\n    }\n\n    if (isApproved) {\n      return (\n        <Button\n          full\n          onClick={handleStakeClick}\n          text=\"Stake\"\n        />\n      )\n    }\n  }, [\n    handleStakeClick,\n    isApproving,\n    isStaking,\n    handleApprove,\n    status,\n  ])\n\n  const UnstakeButton = useMemo(() => {\n    if (status !== 'connected' || disableUnstaking || (withdrawStakeAmount && withdrawStakeAmount.eq(0))) {\n      return (\n        <Button\n          disabled\n          full\n          text=\"Unstake\"\n          variant=\"secondary\"\n        />\n      )\n    }\n    if (isUnstaking) {\n      return (\n        <Button\n          disabled\n          full\n          text=\"Unstaking...\"\n          variant=\"secondary\"\n        />\n      )\n    }\n    return (\n      <Button\n        full\n        onClick={handleUnstakeClick}\n        text=\"Unstake\"\n        variant=\"secondary\"\n      />\n    )\n  }, [\n    handleUnstakeClick,\n    isApproving,\n    isUnstaking,\n    handleApprove,\n    status,\n    withdrawStakeAmount\n  ])\n\n  const getDisplayBalance = useCallback((value?: BigNumber) => {\n    if (value) {\n      return numeral(value).format('0.00a')\n    } else {\n      return '--'\n    }\n  }, [])\n\n  const getDisplayTotalBalance = useCallback((value?: BigNumber) => {\n    if (value) {\n      return numeral(bnToDec(value)).format('0.00a')\n    } else {\n      return '--'\n    }\n  }, [])\n\n  const showDurationModal = useMemo(() => {\n    return stakeModalIsOpen ? <DurationStakeModal\n      isOpen={stakeModalIsOpen}\n      onDismiss={handleDismissStakeModal}\n      onStake={handleOnStake}\n      label={'STRN'}\n      fullBalance={strnTokenBalance}\n      maxTimestamp={endTime}\n    /> : null\n  }, [stakeModalIsOpen, strnTokenBalance, endTime])\n\n  return (\n    <>\n      <Card>\n        <Container size=\"sm\">\n          <Spacer />\n          <StyledSubtitle>Stake STRN</StyledSubtitle>\n        </Container>\n        <CardIcon>🧬</CardIcon>\n        <CardContent>\n          <Box\n            alignItems=\"center\"\n            row\n          >\n            <SplitRow>\n              <>\n                <Value value={getDisplayTotalBalance(totalStaked)} />\n                <Label text={`Staked`} />\n              </>\n              <>\n                <Value value={getDisplayBalance(strnTokenBalance)} />\n                <Label text={`Wallet`} />\n              </>\n            </SplitRow>\n          </Box>\n          <Box\n            alignItems=\"center\"\n            row\n          >\n            <SplitRow>\n              <>\n                <Value value={unlockTimer ? unlockTimer : '--'} />\n                <Label text={`unstake after last stake unlocks`} />\n              </>\n            </SplitRow>\n          </Box>\n          <Box>\n            <>\n              <Value value={getDisplayBalance(withdrawStakeAmount)} />\n              <Label text={`unstakeable`} />\n            </>\n          </Box>\n        </CardContent>\n        <CardActions>\n          {UnstakeButton}\n          {StakeButton}\n        </CardActions>\n      </Card>\n      {showDurationModal}\n      <UnstakeModal\n        isOpen={unstakeModalIsOpen}\n        onDismiss={handleDismissUnstakeModal}\n        onUnstake={handleOnUnstake}\n        label={'STRN'}\n        fullBalance={withdrawStakeAmount}\n        disableUnstaking={true}\n      />\n    </>\n  )\n}\n\nexport default SingleStake\n"]},"metadata":{},"sourceType":"module"}